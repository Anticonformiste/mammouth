#!/usr/bin/env node
var program = require('commander'),
    fs = require('fs'),
    Mammouth = require('../lib/mammouth.js'),
    Path = require('path');

var mammouth = new Mammouth();
console.log('\n  Mammouth v' + Mammouth.VERSION)
if (process.argv.length - 2 == 0) {
    process.argv.push('--help')
}
// set up an arguments parser
program
    .version(Mammouth.VERSION)
    .usage('[options] <file ...>')
    .option('-c, --compile', '')
    .option('-o, --output [DIR]', 'Write out all compiled PHP files into the specified directory. Use in conjunction with --compile', './');
program.parse(process.argv);

// the core program function
function main() {
    if(program.compile) {
        for (var i = 0; i < program.args.length; i++) {
            path = program.args[i];
            stats = fs.lstatSync(path);
            if(stats.isFile()){
                buildFile(path, program.output)
            } else if(stats.isDirectory()) {
                buildFolder(path, program.output)
            }
        };
    }
}

function buildFile(path, output) {
    if(fs.existsSync(output) == false) {
        fs.mkdirSync(output);
    }
    build(path, output);
}

function buildFolder(path, output) {
    if(fs.existsSync(output) == false) {
        fs.mkdirSync(output);
    }
    var contents = fs.readdirSync(path);
    for (var i = 0; i < contents.length; i++) {
        build(Path.join(path, contents[i]), output);
    }
}

function build(path, to) {
    var stats = fs.lstatSync(path);
    if(stats.isFile()){
        var extension = Path.extname(path);
        if(extension == '.mmt' || extension == '.mammouth') {
            var outPath = Path.join(to, Path.basename(path, extension) + '.php'),
                codeResult = mammouth.compile(path);
            fs.writeFileSync(outPath, codeResult, 'utf8');
        } else {
            var arr = path.split("/");
            copyFileSync(path, Path.join(to, Path.basename(path)));
        }
    } else if(stats.isDirectory()) {
        fs.mkdirSync(Path.join(to, Path.basename(path)));
        var contents = fs.readdirSync(path);
        for (var i = 0; i < contents.length; i++) {
            build(Path.join(path, contents[i]), Path.join(to, Path.basename(path)));
        };
    }
}

// helpers function
function copyFileSync(srcFile, destFile) {
    var BUF_LENGTH, buff, bytesRead, fdr, fdw, pos;
    BUF_LENGTH = 64 * 1024;
    buff = new Buffer(BUF_LENGTH);
    fdr = fs.openSync(srcFile, 'r');
    fdw = fs.openSync(destFile, 'w');
    bytesRead = 1;
    pos = 0;
    while (bytesRead > 0) {
        bytesRead = fs.readSync(fdr, buff, 0, BUF_LENGTH, pos);
        fs.writeSync(fdw, buff, 0, bytesRead);
        pos += bytesRead;
    }
    fs.closeSync(fdr);
    return fs.closeSync(fdw);
}
// let's go
main();
