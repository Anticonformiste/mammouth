/**
 * Mammouth Compiler v2.0.0
 * http://mammouth.wamalaka.com
 *
 * Copyright 2014, Wael Amine Boutglay
 * Released under the MIT License
 */
(function(root) {
function require(path){ return require[path]; }
require["lex"] = (function() {var exports = {}, module = {exports: exports};if (typeof module === "object" && typeof module.exports === "object") module.exports = Lexer;

Lexer.defunct = function (char) {
    throw new Error("Unexpected character at index " + (this.index - 1) + ": " + char);
};

function Lexer(defunct) {
    if (typeof defunct !== "function") defunct = Lexer.defunct;

    var tokens = [];
    var rules = [];
    var remove = 0;
    this.state = 0;
    this.index = 0;
    this.input = "";

    this.addRule = function (pattern, action, start) {
        var global = pattern.global;

        if (!global) {
            var flags = "g";
            if (pattern.multiline) flags += "m";
            if (pattern.ignoreCase) flags += "i";
            pattern = new RegExp(pattern.source, flags);
        }

        if (Object.prototype.toString.call(start) !== "[object Array]") start = [0];

        rules.push({
            pattern: pattern,
            global: global,
            action: action,
            start: start
        });

        return this;
    };

    this.setInput = function (input) {
        remove = 0;
        this.state = 0;
        this.index = 0;
        this.input = input;
        return this;
    };

    this.lex = function () {
        if (tokens.length) return tokens.shift();

        this.reject = true;

        while (this.index <= this.input.length) {
            var matches = scan.call(this).splice(remove);
            var index = this.index;

            while (matches.length) {
                if (this.reject) {
                    var match = matches.shift();
                    var result = match.result;
                    var length = match.length;
                    this.index += length;
                    this.reject = false;
                    remove++;

                    var token = match.action.apply(this, result);
                    if (this.reject) this.index = result.index;
                    else if (typeof token !== "undefined") {
                        switch (Object.prototype.toString.call(token)) {
                        case "[object Array]":
                            tokens = token.slice(1);
                            token = token[0];
                        default:
                            if (length) remove = 0;
                            return token;
                        }
                    }
                } else break;
            }

            var input = this.input;

            if (index < input.length) {
                if (this.reject) {
                    remove = 0;
                    var token = defunct.call(this, input.charAt(this.index++));
                    if (typeof token !== "undefined") {
                        if (Object.prototype.toString.call(token) === "[object Array]") {
                            tokens = token.slice(1);
                            return token[0];
                        } else return token;
                    }
                } else {
                    if (this.index !== index) remove = 0;
                    this.reject = true;
                }
            } else if (matches.length)
                this.reject = true;
            else break;
        }
    };

    function scan() {
        var matches = [];
        var index = 0;

        var state = this.state;
        var lastIndex = this.index;
        var input = this.input;

        for (var i = 0, length = rules.length; i < length; i++) {
            var rule = rules[i];
            var start = rule.start;
            var states = start.length;

            if ((!states || start.indexOf(state) >= 0) ||
                (state % 2 && states === 1 && !start[0])) {
                var pattern = rule.pattern;
                pattern.lastIndex = lastIndex;
                var result = pattern.exec(input);

                if (result && result.index === lastIndex) {
                    var j = matches.push({
                        result: result,
                        action: rule.action,
                        length: result[0].length
                    });

                    if (rule.global) index = j;

                    while (--j > index) {
                        var k = j - 1;

                        if (matches[j].length > matches[k].length) {
                            var temple = matches[j];
                            matches[j] = matches[k];
                            matches[k] = temple;
                        }
                    }
                }
            }
        }

        return matches;
    }
}
return module.exports;})();
require["./parser"] = (function() {var exports = {}, module = {exports: exports};/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[1,8,9],$V3=[1,12],$V4=[1,13],$V5=[1,47],$V6=[1,61],$V7=[1,62],$V8=[1,71],$V9=[1,64],$Va=[1,66],$Vb=[1,72],$Vc=[1,67],$Vd=[1,69],$Ve=[1,59],$Vf=[1,60],$Vg=[1,70],$Vh=[1,36],$Vi=[1,37],$Vj=[1,44],$Vk=[1,45],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,68],$Vt=[1,55],$Vu=[1,56],$Vv=[1,73],$Vw=[1,38],$Vx=[1,39],$Vy=[1,41],$Vz=[1,42],$VA=[1,43],$VB=[11,14,16,17,47,49,50,54,55,56,60,62,66,67,69,70,71,75,76,78,80,81,89,92,101,103,104,105,106,108,110,112,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161],$VC=[1,85],$VD=[1,89],$VE=[1,78],$VF=[1,76],$VG=[1,75],$VH=[1,77],$VI=[1,79],$VJ=[1,80],$VK=[1,81],$VL=[1,82],$VM=[1,83],$VN=[1,84],$VO=[1,86],$VP=[1,87],$VQ=[1,88],$VR=[11,14,16,17,47,49,50,54,55,56,59,60,62,66,67,69,70,71,75,76,78,80,81,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175],$VS=[1,115],$VT=[1,107],$VU=[1,120],$VV=[1,109],$VW=[1,110],$VX=[1,121],$VY=[1,113],$VZ=[1,111],$V_=[1,114],$V$=[1,116],$V01=[1,117],$V11=[1,118],$V21=[1,119],$V31=[11,14,16,17,47,49,50,54,55,56,59,60,62,67,69,70,71,75,76,78,80,81,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175],$V41=[1,126],$V51=[1,127],$V61=[1,128],$V71=[1,129],$V81=[1,125],$V91=[11,14,16,17,47,49,50,54,55,56,59,60,62,63,64,65,66,67,69,70,71,75,76,78,79,80,81,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175],$Va1=[2,39],$Vb1=[1,134],$Vc1=[1,136],$Vd1=[2,52],$Ve1=[1,142],$Vf1=[1,148],$Vg1=[1,154],$Vh1=[11,14,16,17,47,49,50,54,55,56,59,60,62,66,67,69,70,75,76,78,80,81,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175],$Vi1=[47,49,54,55,56,59,60,62,66,69,70,71,78,81,89,92,113,157,159,160,161,162,163],$Vj1=[2,121],$Vk1=[1,159],$Vl1=[11,14,16,17,47,49,50,54,55,56,59,60,62,63,64,65,66,67,69,70,71,75,76,78,79,80,81,88,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175],$Vm1=[11,14,16,17,47,49,50,54,55,56,59,60,62,63,64,65,66,67,69,70,71,75,76,78,79,80,81,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175],$Vn1=[1,167],$Vo1=[11,14,16,17,47,49,50,52,54,55,56,59,60,62,63,64,65,66,67,69,70,71,75,76,78,79,80,81,88,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175],$Vp1=[2,54],$Vq1=[1,175],$Vr1=[1,176],$Vs1=[2,62],$Vt1=[1,178],$Vu1=[47,49,54,55,56,59,60,62,66,69,70,71,78,81,89,92,101,103,104,105,106,108,110,113,116,117,120,123,129,134,135,136,137,141,151,155,157,159,160,161,162,163],$Vv1=[2,15],$Vw1=[1,197],$Vx1=[16,17,47,49,54,55,56,59,60,62,66,69,70,71,78,81,89,92,101,103,104,105,106,108,110,113,116,117,120,123,129,134,135,136,137,141,151,155,157,159,160,161,162,163],$Vy1=[1,198],$Vz1=[50,75],$VA1=[2,92],$VB1=[1,229],$VC1=[1,230],$VD1=[1,228],$VE1=[11,14,16,17,47,49,50,54,55,56,59,60,62,66,67,69,70,71,75,76,78,80,81,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,162,163,165,170,171,172,174,175],$VF1=[2,199],$VG1=[2,200],$VH1=[75,91],$VI1=[2,55],$VJ1=[1,245],$VK1=[2,78],$VL1=[1,247],$VM1=[16,17,67,75,80],$VN1=[2,202],$VO1=[2,204],$VP1=[11,14,16,17,47,49,50,54,55,56,59,60,62,66,67,69,70,71,75,76,78,80,81,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,162,163,165,166,168,169,170,171,172,174,175],$VQ1=[11,14,16,17,47,49,50,54,55,56,59,60,62,66,67,69,70,71,75,76,78,80,81,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,171],$VR1=[2,133],$VS1=[1,260],$VT1=[1,261],$VU1=[1,259],$VV1=[1,258],$VW1=[14,17,47,49,54,55,56,60,62,66,69,70,71,78,81,89,92,101,103,104,105,106,108,110,133,135,136,157,159,160,161],$VX1=[16,17,47,49,54,55,56,59,60,62,66,69,70,71,78,81,84,89,92,101,103,104,105,106,108,110,113,116,117,120,123,129,134,135,136,137,141,151,155,157,159,160,161,162,163],$VY1=[1,284],$VZ1=[50,75,88],$V_1=[1,295],$V$1=[16,17],$V02=[16,17,47,49,54,55,56,59,60,62,66,69,70,71,78,81,89,92,101,103,104,105,106,108,110,112,113,116,117,120,123,129,134,135,136,137,141,151,155,157,159,160,161,162,163],$V12=[16,17,47,49,54,55,56,59,60,62,66,69,70,71,78,81,89,92,101,103,104,105,106,108,110,113,116,117,119,120,123,129,134,135,136,137,141,151,155,157,159,160,161,162,163],$V22=[16,17,47,49,54,55,56,59,60,62,66,69,70,71,78,81,89,92,101,103,104,105,106,108,110,113,116,117,120,123,129,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,162,163],$V32=[14,17,47,49,54,55,56,59,60,62,66,69,70,71,78,81,89,92,101,103,104,105,106,108,110,113,115,135,136,157,159,160,161,162,163,165,170,171,172,174,175],$V42=[1,336],$V52=[1,337],$V62=[49,54,55,56,59,60,62,66,69,70,71,81,89,92,150,157],$V72=[2,171],$V82=[1,342],$V92=[1,341],$Va2=[1,343],$Vb2=[1,344],$Vc2=[1,345],$Vd2=[1,351],$Ve2=[17,75],$Vf2=[16,17,112,127,128],$Vg2=[49,54,55,56,59,60,62,66,69,70,71,81,89,92,141,145,147,148,149,150,157],$Vh2=[1,369],$Vi2=[16,17,49,54,55,56,59,60,62,66,69,70,71,81,89,92,141,145,147,148,149,150,157],$Vj2=[49,54,55,56,59,60,62,66,69,70,71,81,89,92,157],$Vk2=[2,175],$Vl2=[1,371],$Vm2=[49,54,55,56,59,60,62,66,69,70,71,89,92,147,157],$Vn2=[1,379],$Vo2=[16,17,49,54,55,56,59,60,62,66,69,70,71,89,92,147,157],$Vp2=[1,381];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Contents":4,"Content":5,"PlainBlock":6,"MammouthBlock":7,"PlainText":8,"{{":9,"Block":10,"}}":11,"Expression":12,"SimpleStatement":13,"INDENT":14,"Lines":15,"OUTDENT":16,"LineTerminator":17,"Line":18,"OptLineTerminator":19,"Statement":20,"Function":21,"If":22,"While":23,"DoWhile":24,"For":25,"Try":26,"Switch":27,"Declare":28,"Section":29,"Class":30,"Interface":31,"Namespace":32,"Value":33,"Invocation":34,"Code":35,"Operation":36,"Assign":37,"IfExpression":38,"HereDoc":39,"Assignable":40,"Literal":41,"Parenthetical":42,"Casting":43,"Execution":44,"NamespaceRef":45,"Clone":46,"`":47,"HEREDOCTEXT":48,"(":49,")":50,"SimpleAssignable":51,"=>":52,"cType":53,"EXEC":54,"STRING":55,"CLONE":56,"Array":57,"Identifier":58,"&":59,"IDENTIFIER":60,"Accessor":61,"@":62,".":63,"..":64,"::":65,"[":66,"]":67,"AlphaNumeric":68,"BOOL":69,"NULL":70,"NUMBER":71,"ArgList":72,"OptComma":73,"Arg":74,",":75,":":76,"Arguments":77,"NEW":78,"CALL_START":79,"CALL_END":80,"FUNC":81,"FuncGlyph":82,"ParametersList":83,"->":84,"Param":85,"ParamVar":86,"USE":87,"=":88,"{":89,"KeysList":90,"}":91,"CTE":92,"Echo":93,"Break":94,"Continue":95,"Delete":96,"Include":97,"Require":98,"Return":99,"Goto":100,"ECHO":101,"SimpleArg":102,"BREAK":103,"CONTINUE":104,"DELETE":105,"INCLUDE":106,"isOnce":107,"REQUIRE":108,"ONCE":109,"RETURN":110,"IfBlock":111,"ELSE":112,"IF":113,"IfBlockExpression":114,"THEN":115,"WHILE":116,"DO":117,"TryBlock":118,"FINALLY":119,"TRY":120,"CatchBlock":121,"CATCH":122,"SWITCH":123,"Whens":124,"When":125,"WhenTok":126,"CASE":127,"WHEN":128,"FOR":129,"ForExpressions":130,"EACH":131,"AS":132,";":133,"DECLARE":134,"==>":135,"GOTO":136,"CLASS":137,"ClassBody":138,"EXTENDS":139,"IMPLEMENTS":140,"ABSTRACT":141,"ClassLine":142,"Visibility":143,"Statically":144,"FINAL":145,"Finaly":146,"PUBLIC":147,"PRIVATE":148,"PROTECTED":149,"STATIC":150,"INTERFACE":151,"InterfaceBody":152,"ExtendedList":153,"InterfaceLine":154,"NAMESPACE":155,"NamespaceName":156,"\\":157,"NamespaceRefname":158,"--":159,"++":160,"NOT":161,"-":162,"+":163,"?":164,"<->":165,"*":166,"**":167,"/":168,"%":169,"SHIFT":170,"LOGIC":171,"COMPARE":172,"ASSIGN":173,"INSTANCEOF":174,"IN":175,"$accept":0,"$end":1},
terminals_: {2:"error",8:"PlainText",9:"{{",11:"}}",14:"INDENT",16:"OUTDENT",17:"LineTerminator",47:"`",48:"HEREDOCTEXT",49:"(",50:")",52:"=>",53:"cType",54:"EXEC",55:"STRING",56:"CLONE",59:"&",60:"IDENTIFIER",62:"@",63:".",64:"..",65:"::",66:"[",67:"]",69:"BOOL",70:"NULL",71:"NUMBER",75:",",76:":",78:"NEW",79:"CALL_START",80:"CALL_END",81:"FUNC",84:"->",87:"USE",88:"=",89:"{",91:"}",92:"CTE",101:"ECHO",103:"BREAK",104:"CONTINUE",105:"DELETE",106:"INCLUDE",108:"REQUIRE",109:"ONCE",110:"RETURN",112:"ELSE",113:"IF",115:"THEN",116:"WHILE",117:"DO",119:"FINALLY",120:"TRY",122:"CATCH",123:"SWITCH",127:"CASE",128:"WHEN",129:"FOR",131:"EACH",132:"AS",133:";",134:"DECLARE",135:"==>",136:"GOTO",137:"CLASS",139:"EXTENDS",140:"IMPLEMENTS",141:"ABSTRACT",145:"FINAL",147:"PUBLIC",148:"PRIVATE",149:"PROTECTED",150:"STATIC",151:"INTERFACE",155:"NAMESPACE",157:"\\",159:"--",160:"++",161:"NOT",162:"-",163:"+",164:"?",165:"<->",166:"*",167:"**",168:"/",169:"%",170:"SHIFT",171:"LOGIC",172:"COMPARE",173:"ASSIGN",174:"INSTANCEOF",175:"IN"},
productions_: [0,[3,1],[4,1],[4,2],[5,1],[5,1],[6,1],[7,3],[10,1],[10,1],[10,3],[10,4],[15,1],[15,3],[15,2],[19,0],[19,1],[18,1],[18,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[39,3],[42,3],[43,3],[44,2],[44,4],[46,2],[40,1],[40,1],[51,1],[51,2],[51,2],[51,2],[61,2],[61,2],[61,2],[61,3],[58,1],[41,1],[41,1],[41,1],[68,1],[68,1],[57,2],[57,4],[72,1],[72,3],[72,4],[72,4],[72,7],[72,5],[74,1],[74,3],[73,0],[73,1],[34,2],[34,2],[34,3],[77,2],[77,4],[21,2],[21,4],[21,5],[21,7],[35,6],[35,3],[82,1],[83,0],[83,1],[83,3],[85,1],[85,2],[85,3],[86,2],[86,1],[37,3],[37,5],[37,4],[90,1],[90,3],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[93,2],[94,1],[94,2],[95,1],[95,2],[96,2],[97,3],[98,3],[107,0],[107,1],[99,2],[102,1],[102,3],[22,1],[22,3],[111,3],[111,5],[38,1],[38,3],[114,4],[114,3],[23,3],[24,4],[26,1],[26,3],[118,3],[121,3],[27,6],[27,8],[124,1],[124,3],[124,2],[125,3],[126,1],[126,1],[25,3],[25,6],[130,1],[130,3],[28,2],[28,3],[29,2],[100,2],[100,2],[30,6],[30,8],[30,8],[30,7],[138,1],[138,3],[138,2],[142,3],[142,3],[142,3],[142,4],[142,2],[146,0],[146,1],[143,0],[143,1],[143,1],[143,1],[144,0],[144,1],[31,6],[31,8],[152,1],[152,3],[152,2],[154,2],[154,1],[153,1],[153,3],[32,2],[32,4],[156,1],[156,3],[45,1],[158,3],[158,3],[158,2],[36,2],[36,2],[36,2],[36,2],[36,2],[36,2],[36,2],[36,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0]
break;
case 2: case 12: case 70: case 93: case 103: case 142: case 150: case 161: case 179: case 184:
this.$ = [$$[$0]]
break;
case 3:
this.$ = $$[$0-1].concat($$[$0])
break;
case 4: case 5: case 18: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 42: case 43: case 45: case 52: case 63: case 76: case 78: case 79: case 95: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 124: case 126: case 130: case 136: case 182: case 188:
this.$ = $$[$0];
break;
case 6:
this.$ = new yy.PlainBlock(yytext)
break;
case 7:
this.$ = new yy.MammouthBlock($$[$0-1])
break;
case 8: case 9:
this.$ = new yy.Block([new yy.Expression($$[$0])])
break;
case 10: case 11:
this.$ = new yy.Block($$[$0-1])
break;
case 13: case 71: case 94:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 14: case 125: case 144: case 163: case 181:
this.$ = $$[$0-1];
break;
case 15: case 91: case 146: case 147:

break;
case 16:
false
break;
case 17: case 19: case 183:
this.$ = new yy.Expression($$[$0])
break;
case 41: case 44: case 53: case 54:
this.$ = new yy.Value($$[$0])
break;
case 46:
this.$ = new yy.HereDoc($$[$0-1])
break;
case 47:
this.$ = new yy.Parens($$[$0-1])
break;
case 48:
this.$ = new yy.Casting($$[$0-2], $$[$0])
break;
case 49:
this.$ = new yy.Exec($$[$0])
break;
case 50:
this.$ = new yy.Exec($$[$0-1])
break;
case 51:
this.$ = new yy.Clone($$[$0])
break;
case 55: case 98:
this.$ = new yy.Identifier(yytext, true, true)
break;
case 56:
$$[$0-1].add($$[$0]); this.$ = $$[$0-1]
break;
case 57:
th = new yy.Value(new yy.Identifier("this")); th.add(new yy.Access($$[$0])); this.$ = th
break;
case 58:
this.$ = new yy.Access($$[$0])
break;
case 59:
this.$ = new yy.Access($$[$0], "..")
break;
case 60:
this.$ = new yy.Access($$[$0], "::")
break;
case 61:
this.$ = new yy.Access($$[$0-1], "[]")
break;
case 62:
this.$ = new yy.Identifier(yytext)
break;
case 64:
this.$ = new yy.Bool(yytext)
break;
case 65:
this.$ = new yy.Null()
break;
case 66: case 67:
this.$ = new yy.Literal(yytext)
break;
case 68:
this.$ = new yy.Array()
break;
case 69:
this.$ = new yy.Array($$[$0-2])
break;
case 72:
this.$ = $$[$0-3].concat($$[$0])
break;
case 73: case 75: case 84:
this.$ = $$[$0-2];
break;
case 74:
this.$ = $$[$0-6].concat($$[$0-2])
break;
case 77:
this.$ = new yy.ArrayKey($$[$0-2], $$[$0])
break;
case 80:
this.$ = new yy.Call($$[$0-1], $$[$0])
break;
case 81:
this.$ = new yy.NewCall($$[$0])
break;
case 82:
this.$ = new yy.NewCall($$[$0-1], $$[$0])
break;
case 83: case 92:
this.$ = []
break;
case 85:
this.$ = new yy.Code([], false, true, $$[$0])
break;
case 86:
this.$ = new yy.Code([], $$[$0], true, $$[$0-2])
break;
case 87:
this.$ = new yy.Code($$[$0-1], false, true, $$[$0-3])
break;
case 88:
this.$ = new yy.Code($$[$0-3], $$[$0], true, $$[$0-5])
break;
case 89:
this.$ = new yy.Code($$[$0-3], $$[$0])
break;
case 90:
this.$ = new yy.Code([], $$[$0])
break;
case 96:
$$[$0].passing = true, this.$ = $$[$0]
break;
case 97: case 100:
this.$ = new yy.Assign("=", $$[$0-2], $$[$0])
break;
case 99:
this.$ = new yy.Identifier(yytext, true)
break;
case 101:
this.$ = new yy.GetKeyAssign($$[$0-3], $$[$0])
break;
case 102:
this.$ = new yy.Constant($$[$0-2], $$[$0])
break;
case 104: case 151: case 162: case 180: case 185:
this.$ = $$[$0-2].concat($$[$0])
break;
case 113:
this.$ = new yy.Echo($$[$0])
break;
case 114:
this.$ = new yy.Break()
break;
case 115:
this.$ = new yy.Break(new yy.Literal($$[$0]))
break;
case 116:
this.$ = new yy.Continue()
break;
case 117:
this.$ = new yy.Continue(new yy.Literal($$[$0]))
break;
case 118:
this.$ = new yy.Delete($$[$0])
break;
case 119:
this.$ = new yy.Include($$[$0], $$[$0-1])
break;
case 120:
this.$ = new yy.Require($$[$0], $$[$0-1])
break;
case 121: case 169: case 171: case 175:
this.$ = false
break;
case 122: case 170:
this.$ = true
break;
case 123:
this.$ = new yy.Return($$[$0])
break;
case 127:
$$[$0-2].addElse(new yy.Else($$[$0])); this.$ = $$[$0-2]
break;
case 128:
this.$ = new yy.If($$[$0-1], $$[$0])
break;
case 129:
$$[$0-4].addElse(new yy.ElseIf($$[$0-1], $$[$0])); this.$ = $$[$0-4]
break;
case 131:
$$[$0-2].Elses = $$[$0]; this.$ = $$[$0-2]
break;
case 132:
this.$ = new yy.If($$[$0-2], $$[$0], true)
break;
case 133:
this.$ = new yy.If($$[$0], $$[$0-2], true)
break;
case 134:
this.$ = new yy.While($$[$0-1], $$[$0])
break;
case 135:
this.$ = new yy.DoWhile($$[$0-1], $$[$0])
break;
case 137:
$$[$0-2].addFinally($$[$0]); this.$ = $$[$0-2]
break;
case 138:
this.$ = new yy.Try($$[$0-1], $$[$0][0], $$[$0][1])
break;
case 139:
this.$ = [$$[$0-1], $$[$0]]
break;
case 140:
this.$ = new yy.Switch($$[$0-4], $$[$0-1])
break;
case 141:
$$[$0-3].push(new yy.SwitchElse($$[$0-1])); this.$ = new yy.Switch($$[$0-6], $$[$0-3])
break;
case 143:
this.$ = $$[$0-2].concat($$[$0-1])
break;
case 145:
this.$ = new yy.When($$[$0-1], $$[$0])
break;
case 148:
this.$ = new yy.For("normal", $$[$0-1], $$[$0])
break;
case 149:
$$[$0-1].foreach = true; this.$ = new yy.For("foreach", $$[$0-3], $$[$0-1], $$[$0])
break;
case 152:
this.$ = new yy.Expression(new yy.Declare($$[$0]))
break;
case 153:
this.$ = new yy.Declare($$[$0-1], $$[$0])
break;
case 154:
this.$ = new yy.Section($$[$0-1])
break;
case 155: case 156:
this.$ = new yy.Goto($$[$0])
break;
case 157:
this.$ = new yy.Class($$[$0-4], $$[$0-1])
break;
case 158:
this.$ = new yy.Class($$[$0-6], $$[$0-1], $$[$0-4])
break;
case 159:
this.$ = new yy.Class($$[$0-6], $$[$0-1], false, $$[$0-4])
break;
case 160:
this.$ = new yy.Class($$[$0-4], $$[$0-1], false, false, true)
break;
case 164: case 165:
this.$ = new yy.ClassLine($$[$0-2], $$[$0-1], this.$ = new yy.Expression($$[$0]))
break;
case 166:
this.$ = new yy.ClassLine($$[$0-2], $$[$0-1], $$[$0]);
break;
case 167:
n = new yy.ClassLine($$[$0-2], $$[$0-1], $$[$0]); n.finaly = true; this.$ = n
break;
case 168:
$$[$0].abstract = true; this.$ = $$[$0]
break;
case 172:
this.$ = "public"
break;
case 173:
this.$ = "private"
break;
case 174:
this.$ = "protected"
break;
case 176:
this.$ = "static"
break;
case 177:
this.$ = new yy.Interface($$[$0-4], $$[$0-1])
break;
case 178:
this.$ = new yy.Interface($$[$0-6], $$[$0-1], $$[$0-4])
break;
case 186:
this.$ = new yy.Expression(new yy.Namespace($$[$0]))
break;
case 187:
this.$ = new yy.Namespace($$[$0-2], $$[$0])
break;
case 189:
 this.$ = $$[$0-2] + "\\" + $$[$0]
break;
case 190:
this.$ = new yy.NamespaceRef($$[$0])
break;
case 191: case 192:
this.$ = $$[$0-2] + "\\" + $$[$0]
break;
case 193:
this.$ = "\\" + $$[$0]
break;
case 194:
this.$ = new yy.Update("--", $$[$0])
break;
case 195:
this.$ = new yy.Update("++", $$[$0])
break;
case 196:
this.$ = new yy.Update("--", $$[$0-1], false)
break;
case 197:
this.$ = new yy.Update("++", $$[$0-1], false)
break;
case 198:
this.$ = new yy.Unary("!", $$[$0])
break;
case 199:
this.$ = new yy.Unary("-", $$[$0])
break;
case 200:
this.$ = new yy.Unary("+", $$[$0])
break;
case 201:
this.$ = new yy.Existence($$[$0-1])
break;
case 202:
this.$ = new yy.Operation("+", $$[$0-2], $$[$0])
break;
case 203:
this.$ = new yy.Operation("<->", $$[$0-2], $$[$0])
break;
case 204:
this.$ = new yy.Operation("-", $$[$0-2], $$[$0])
break;
case 205:
this.$ = new yy.Operation("*", $$[$0-2], $$[$0])
break;
case 206:
this.$ = new yy.Operation("**", $$[$0-2], $$[$0])
break;
case 207:
this.$ = new yy.Operation("/", $$[$0-2], $$[$0])
break;
case 208:
this.$ = new yy.Operation("%", $$[$0-2], $$[$0])
break;
case 209: case 210: case 212:
this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0])
break;
case 211:
this.$ = new yy.Operation("&", $$[$0-2], $$[$0])
break;
case 213:
this.$ = new yy.Assign($$[$0-1], $$[$0-2], $$[$0])
break;
case 214:
this.$ = new yy.Operation("instanceof", $$[$0-2], $$[$0])
break;
case 215:
this.$ = new yy.In($$[$0-2], $$[$0])
break;
}
},
table: [{3:1,4:2,5:3,6:4,7:5,8:$V0,9:$V1},{1:[3]},{1:[2,1],5:8,6:4,7:5,8:$V0,9:$V1},o($V2,[2,2]),o($V2,[2,4]),o($V2,[2,5]),o($V2,[2,6]),{10:9,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$Vs,114:46,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($V2,[2,3]),{11:[1,74]},o($VB,[2,8],{59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),o($VR,[2,9]),{12:92,13:94,15:90,18:91,20:93,21:95,22:96,23:97,24:98,25:99,26:100,27:101,28:102,29:103,30:104,31:105,32:106,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$VS,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$VT,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,111:108,113:$VU,114:46,116:$VV,117:$VW,118:112,120:$VX,123:$VY,129:$VZ,134:$V_,135:$Vt,136:$Vu,137:$V$,141:$V01,151:$V11,155:$V21,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{14:[1,122]},o($V31,[2,32],{77:123,61:124,63:$V41,64:$V51,65:$V61,66:$V71,79:$V81}),o($VR,[2,33]),o($VR,[2,34]),o($VR,[2,35]),o($VR,[2,36]),o($VR,[2,37]),o($VR,[2,38]),o($VR,[2,105]),o($VR,[2,106]),o($VR,[2,107]),o($VR,[2,108]),o($VR,[2,109]),o($VR,[2,110]),o($VR,[2,111]),o($VR,[2,112]),o($V91,$Va1,{88:[1,130]}),o($V91,[2,40]),o($V91,[2,41]),o($V91,[2,42]),o($V91,[2,43]),o($V91,[2,44]),o($V91,[2,45]),{33:131,40:132,41:30,42:31,43:32,44:33,45:34,46:35,49:$V6,51:133,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,157:$Vv,158:63},{49:$Vb1,82:135,84:$Vc1},{12:137,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:138,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o([11,14,16,17,47,49,50,54,55,56,59,60,62,63,64,65,66,67,69,70,71,75,76,78,79,80,81,88,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,161,162,163,164,165,166,167,168,169,170,171,172,174,175],$Vd1,{52:$Ve1,159:[1,139],160:[1,140],173:[1,141]}),{12:143,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:144,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:145,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{58:147,60:$Vf1,90:146},{58:149,60:$Vf1},o([11,14,16,17,47,49,50,54,55,56,59,60,62,66,67,69,70,71,75,76,78,80,81,89,92,101,103,104,105,106,108,110,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175],[2,130],{112:[1,150]}),{48:[1,151]},{12:153,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$Vg1,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,102:152,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($Vh1,[2,114],{71:[1,155]}),o($Vh1,[2,116],{71:[1,156]}),{12:153,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$Vg1,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,102:157,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($Vi1,$Vj1,{107:158,109:$Vk1}),o($Vi1,$Vj1,{107:160,109:$Vk1}),{12:153,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$Vg1,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,102:161,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{60:[1,162]},{60:[1,163]},o($Vl1,[2,53]),o($V91,[2,63]),o($V91,[2,64]),o($V91,[2,65]),{12:164,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{49:[1,166],55:[1,165]},o($Vm1,[2,190],{157:$Vn1}),{33:168,40:132,41:30,42:31,43:32,44:33,45:34,46:35,49:$V6,51:133,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,157:$Vv,158:63},o($Vo1,$Vp1),{60:[1,169]},{58:170,60:$Vf1},{12:171,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:177,14:$Vq1,17:$Vr1,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,67:[1,172],68:58,69:$Ve,70:$Vf,71:$Vg,72:173,74:174,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($V91,[2,66]),o($V91,[2,67]),o([11,14,16,17,47,49,50,52,54,55,56,59,60,62,63,64,65,66,67,69,70,71,75,76,78,79,80,81,88,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175],$Vs1,{157:$Vt1}),{60:[1,180],157:$Vv,158:179},o($V2,[2,7]),o($VR,[2,201]),{12:181,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:182,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:183,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:184,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:185,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:186,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:187,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:188,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:189,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:190,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:191,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:192,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:193,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:194,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($Vu1,$Vv1,{19:196,16:[1,195],17:$Vw1}),o($Vx1,[2,12]),o([16,17,47,49,54,55,56,60,62,66,69,70,71,78,81,89,92,101,103,104,105,106,108,110,116,117,120,123,129,134,135,136,137,141,151,155,157,159,160,161],[2,17],{59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),o($Vx1,[2,18]),o($Vx1,[2,19]),o($Vx1,[2,20]),o($Vx1,[2,21]),o($Vx1,[2,22]),o($Vx1,[2,23]),o($Vx1,[2,24]),o($Vx1,[2,25]),o($Vx1,[2,26]),o($Vx1,[2,27]),o($Vx1,[2,28]),o($Vx1,[2,29]),o($Vx1,[2,30]),o($Vx1,[2,31]),{49:$Vb1,60:$Vy1,82:135,84:$Vc1},o($Vx1,[2,126],{112:[1,199]}),{12:200,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{116:[1,201]},{12:204,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,130:202,131:[1,203],157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($Vx1,[2,136],{119:[1,205]}),{12:206,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:153,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$Vg1,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,102:207,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o([16,17,47,49,52,54,55,56,59,60,62,63,64,65,66,69,70,71,78,79,81,88,89,92,101,103,104,105,106,108,110,113,116,117,120,123,129,134,135,136,137,141,151,155,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175],$Vs1,{76:[1,208],157:$Vt1}),{60:[1,209]},{137:[1,210]},{60:[1,211]},{60:[1,213],156:212},{12:214,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{10:215,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$Vs,114:46,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:92,13:94,15:216,18:91,20:93,21:95,22:96,23:97,24:98,25:99,26:100,27:101,28:102,29:103,30:104,31:105,32:106,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$VS,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$VT,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,111:108,113:$VU,114:46,116:$VV,117:$VW,118:112,120:$VX,123:$VY,129:$VZ,134:$V_,135:$Vt,136:$Vu,137:$V$,141:$V01,151:$V11,155:$V21,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($VR,[2,80]),o($Vo1,[2,56]),{12:177,14:$Vq1,17:$Vr1,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,72:218,74:174,78:$Vh,80:[1,217],81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{58:219,60:$Vf1},{58:220,60:$Vf1},{58:221,60:$Vf1},{12:222,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:223,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($V31,[2,81],{61:124,77:224,63:$V41,64:$V51,65:$V61,66:$V71,79:$V81}),o($V91,$Va1),o($Vl1,$Vd1,{52:$Ve1}),o($Vz1,$VA1,{83:225,85:226,86:227,59:$VB1,60:$VC1,87:$VD1}),{10:231,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$Vs,114:46,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o([14,17,47,49,54,55,56,59,60,62,66,69,70,71,78,81,89,92,101,103,104,105,106,108,110,113,135,136,157,159,160,161,162,163],[2,91]),o($VR,[2,194]),o($VR,[2,195]),o($VR,[2,196]),o($VR,[2,197]),{12:232,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{53:[1,233]},o($VE1,[2,198],{164:$VG,166:$VI,167:$VJ,168:$VK,169:$VL}),o($VE1,$VF1,{164:$VG,166:$VI,167:$VJ,168:$VK,169:$VL}),o($VE1,$VG1,{164:$VG,166:$VI,167:$VJ,168:$VK,169:$VL}),{75:[1,235],91:[1,234]},o($VH1,[2,103]),o([11,14,16,17,47,49,50,52,54,55,56,59,60,62,63,64,65,66,67,69,70,71,75,76,78,79,80,81,88,89,91,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175],$Vs1),{88:[1,236]},{12:237,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{47:[1,238]},o($VR,[2,113]),o($VB,[2,124],{59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),{12:239,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($VR,[2,115]),o($VR,[2,117]),o($VR,[2,118]),{12:153,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$Vg1,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,102:240,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($Vi1,[2,122]),{12:153,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$Vg1,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,102:241,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($VR,[2,123]),o($VR,[2,155]),o($VR,[2,156]),{50:[1,242],59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ},o($V91,[2,49]),{55:[1,243]},{60:[1,244]},o([11,14,16,17,47,49,50,54,55,56,59,60,62,67,69,70,71,75,76,78,79,80,81,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175],[2,51],{61:124,63:$V41,64:$V51,65:$V61,66:$V71}),o($Vo1,$VI1),o($Vo1,[2,57]),{59:$VC,113:$VD,115:$VJ1,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ},o($Vl1,[2,68]),o([17,67],$VK1,{73:246,75:$VL1}),o($VM1,[2,70]),{12:177,14:$Vq1,17:$Vr1,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,72:248,74:174,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{14:[1,249]},o($VM1,[2,76],{59:$VC,76:[1,250],113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),{60:[1,251]},o($Vm1,[2,193],{157:$Vn1}),{157:$Vt1},o($VE1,$VN1,{164:$VG,166:$VI,167:$VJ,168:$VK,169:$VL}),o($VE1,[2,203],{164:$VG,166:$VI,167:$VJ,168:$VK,169:$VL}),o($VE1,$VO1,{164:$VG,166:$VI,167:$VJ,168:$VK,169:$VL}),o($VP1,[2,205],{164:$VG,167:$VJ}),o($VP1,[2,206],{164:$VG,167:$VJ}),o($VP1,[2,207],{164:$VG,167:$VJ}),o($VP1,[2,208],{164:$VG,167:$VJ}),o([11,14,16,17,47,49,50,54,55,56,59,60,62,66,67,69,70,71,75,76,78,80,81,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,170,171,172,174,175],[2,209],{162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL}),o($VQ1,[2,210],{162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,172:$VO,174:$VP,175:$VQ}),o($VQ1,[2,211],{162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,172:$VO,174:$VP,175:$VQ}),o([11,14,16,17,47,49,50,54,55,56,59,60,62,66,67,69,70,71,75,76,78,80,81,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,171,172],[2,212],{162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,174:$VP,175:$VQ}),o([11,14,16,17,47,49,50,54,55,56,59,60,62,66,67,69,70,71,75,76,78,80,81,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,171,172,174,175],[2,214],{162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM}),o([11,14,16,17,47,49,50,54,55,56,59,60,62,66,67,69,70,71,75,76,78,80,81,89,92,101,103,104,105,106,108,110,112,113,115,116,117,119,120,122,123,127,128,129,132,133,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,171,172,175],[2,215],{162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,174:$VP}),o($VB,$VR1,{59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),o($VR,[2,10]),{12:92,13:94,18:252,20:93,21:95,22:96,23:97,24:98,25:99,26:100,27:101,28:102,29:103,30:104,31:105,32:106,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$VS,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$VT,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,111:108,113:$VU,114:46,116:$VV,117:$VW,118:112,120:$VX,123:$VY,129:$VZ,134:$V_,135:$Vt,136:$Vu,137:$V$,141:$V01,151:$V11,155:$V21,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($Vx1,[2,14]),o([16,17,47,54,55,56,59,60,62,66,69,70,71,78,81,89,92,101,103,104,105,106,108,110,113,116,117,120,123,129,134,135,136,137,141,145,147,148,149,150,151,155,157,159,160,161,162,163],[2,85],{82:253,49:[1,254],84:$Vc1}),{10:255,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:[1,256],114:46,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{10:257,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$VS1,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$VT1,114:46,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$VU1,163:$VV1,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ},{12:262,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{10:263,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$Vs,114:46,133:[1,264],135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:265,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($VW1,[2,150],{59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),{10:266,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$Vs,114:46,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{17:[1,267],59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ},o([16,101,103,104,105,106,108,110,113,116,117,120,123,129,134,137,141,151,155],[2,152],{12:10,13:11,33:14,34:15,35:16,36:17,37:18,38:19,39:20,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,40:29,41:30,42:31,43:32,44:33,45:34,46:35,51:40,114:46,57:57,68:58,158:63,58:65,10:268,14:$V3,17:$V4,47:$V5,49:$V6,54:$V7,55:$V8,56:$V9,59:$Va,60:$Vb,62:$Vc,66:$Vd,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,135:$Vt,136:$Vu,157:$Vv,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA}),o($Vx1,[2,154]),{17:[1,269],139:[1,270],140:[1,271]},{60:[1,272]},{17:[1,273],139:[1,274]},o([16,17,47,49,54,55,56,59,60,62,66,69,70,71,78,81,89,92,101,103,104,105,106,108,110,113,116,117,120,123,129,134,135,136,137,141,151,155,159,160,161,162,163],[2,186],{84:[1,275],157:[1,276]}),o($VX1,[2,188]),{10:277,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$VS1,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$VT1,114:46,115:$VJ1,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$VU1,163:$VV1,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ},{121:278,122:[1,279]},o($Vu1,$Vv1,{19:196,16:[1,280],17:$Vw1}),o($VR,[2,83]),o([17,80],$VK1,{73:281,75:$VL1}),o($Vo1,[2,58]),o($Vo1,[2,59]),o($Vo1,[2,60]),{59:$VC,67:[1,282],113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ},o($VB,[2,100],{59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),o($VR,[2,82]),{50:[1,283],75:$VY1},o($Vz1,[2,93]),o($Vz1,[2,95],{88:[1,285]}),{59:$VB1,60:$VC1,86:286},{60:[1,287]},o($VZ1,[2,99]),o($VR,[2,90]),o($VB,[2,213],{59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),o($V91,[2,48]),{88:[1,288]},{58:289,60:$Vf1},{12:290,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($VB,[2,131],{59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),o($VR,[2,46]),{50:[1,291],59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ},o($VR,[2,119]),o($VR,[2,120]),o($V91,[2,47]),{50:[1,292]},o($V91,[2,192]),{12:293,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{17:$V_1,67:[1,294]},o([16,17,67,80],[2,79],{33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,51:40,114:46,57:57,68:58,158:63,58:65,12:177,74:296,47:$V5,49:$V6,54:$V7,55:$V8,56:$V9,59:$Va,60:$Vb,62:$Vc,66:$Vd,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,157:$Vv,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA}),o($V$1,$VK1,{73:297,75:$VL1}),{12:177,14:$Vq1,17:$Vr1,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,72:298,74:174,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:299,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($V91,[2,191]),o($Vx1,[2,13]),{10:300,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$Vs,114:46,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($Vz1,$VA1,{85:226,86:227,83:301,59:$VB1,60:$VC1,87:$VD1}),o($Vx1,[2,127]),{12:302,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($Vx1,[2,134]),{12:303,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:304,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:190,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:[1,305],62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{12:306,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{10:307,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$VS1,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$VT1,114:46,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$VU1,163:$VV1,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ},o($Vx1,[2,148]),{12:308,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{59:$VC,113:$VD,132:[1,309],162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ},o($Vx1,[2,137]),{14:[1,310]},o($Vx1,[2,153]),{14:[1,311]},{60:[1,312]},{60:[1,313]},{17:[1,314]},{14:[1,315]},{60:[1,317],153:316},{10:318,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$Vs,114:46,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{60:[1,319]},o($V02,[2,128]),o($V12,[2,138]),{58:320,60:$Vf1},o($VR,[2,11]),{17:$V_1,80:[1,321]},o($Vo1,[2,61]),{82:322,84:$Vc1},{59:$VB1,60:$VC1,85:323,86:227,87:$VD1},{12:324,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($Vz1,[2,96]),o($VZ1,[2,98]),{12:325,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($VH1,[2,104]),o($VB,[2,102],{59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),o($V91,[2,125]),o($V91,[2,50]),o($VB,[2,132],{59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),o($Vl1,[2,69]),{12:177,14:[1,327],33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,74:326,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($VM1,[2,71]),{16:[1,328],17:$V_1},o($V$1,$VK1,{73:329,75:$VL1}),o($VM1,[2,77],{59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),o($V22,[2,86]),{50:[1,330],75:$VY1},{10:331,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$VS1,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$VT1,114:46,115:$VJ1,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$VU1,163:$VV1,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ},o($V32,$VN1,{16:$VG1,112:$VG1,116:$VG1,117:$VG1,120:$VG1,123:$VG1,127:$VG1,128:$VG1,129:$VG1,134:$VG1,137:$VG1,141:$VG1,151:$VG1,155:$VG1,164:$VG,166:$VI,167:$VJ,168:$VK,169:$VL}),o($V32,$VO1,{16:$VF1,112:$VF1,116:$VF1,117:$VF1,120:$VF1,123:$VF1,127:$VF1,128:$VF1,129:$VF1,134:$VF1,137:$VF1,141:$VF1,151:$VF1,155:$VF1,164:$VG,166:$VI,167:$VJ,168:$VK,169:$VL}),o([16,17,47,49,52,54,55,56,59,60,62,63,64,65,66,69,70,71,78,79,81,88,89,92,101,103,104,105,106,108,110,112,113,116,117,120,123,127,128,129,134,135,136,137,141,151,155,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175],$VI1,{14:$Vs1,115:$Vs1,157:$Vt1}),o([14,17,47,49,54,55,56,60,62,66,69,70,71,78,81,89,92,101,103,104,105,106,108,110,112,135,136,157,159,160,161],$VR1,{59:$VC,113:$VD,115:$VJ1,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),o($Vx1,[2,135]),o($VW1,[2,151],{59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),{12:332,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{124:333,125:334,126:335,127:$V42,128:$V52},o($V62,$V72,{138:338,142:339,143:340,141:$V82,145:$V92,147:$Va2,148:$Vb2,149:$Vc2}),{17:[1,346]},{17:[1,347]},{14:[1,348]},{33:353,37:352,40:29,41:30,42:31,43:32,44:33,45:34,46:35,49:$V6,51:133,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,89:$Vj,92:$Vk,147:$Vd2,152:349,154:350,157:$Vv,158:63},{17:[1,354],75:[1,355]},o($Ve2,[2,184]),o($Vx1,[2,187]),o($VX1,[2,189]),{10:356,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$Vs,114:46,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($VR,[2,84]),{10:357,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$Vs,114:46,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($Vz1,[2,94]),o($Vz1,[2,97],{59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),o($VB,[2,101],{59:$VC,113:$VD,162:$VE,163:$VF,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ}),o($VM1,[2,72]),{12:177,14:$Vq1,17:$Vr1,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,72:358,74:174,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($VM1,[2,73]),{16:[1,359],17:$V_1},o($V22,[2,87],{82:360,84:$Vc1}),o($V02,[2,129]),{10:361,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$VS1,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$VT1,114:46,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$VU1,163:$VV1,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ},o([127,128],$Vv1,{19:364,16:[1,362],17:[1,365],112:[1,363]}),o($Vf2,[2,142]),{12:366,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,113:$Vs,114:46,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($Vi1,[2,146]),o($Vi1,[2,147]),o($Vg2,$Vv1,{19:368,16:[1,367],17:$Vh2}),o($Vi2,[2,161]),o($Vj2,$Vk2,{144:370,150:$Vl2}),o([81,150],$V72,{143:372,147:$Va2,148:$Vb2,149:$Vc2}),o($V62,$V72,{143:340,142:373,141:$V82,145:$V92,147:$Va2,148:$Vb2,149:$Vc2}),o($V62,[2,172]),o($V62,[2,173]),o($V62,[2,174]),{14:[1,374]},{14:[1,375]},o($V62,$V72,{142:339,143:340,138:376,141:$V82,145:$V92,147:$Va2,148:$Vb2,149:$Vc2}),o($Vm2,$Vv1,{19:378,16:[1,377],17:$Vn2}),o($Vo2,[2,179]),{21:380,81:$Vp2},o($Vo2,[2,183]),{61:124,63:$V41,64:$V51,65:$V61,66:$V71},{14:[1,382]},{60:[1,383]},o($V12,[2,139]),o($VR,[2,89]),o($V$1,$VK1,{73:384,75:$VL1}),o($VM1,[2,75]),{10:385,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$Vs,114:46,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},o($Vx1,[2,149]),o($Vx1,[2,140]),{10:386,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$Vs,114:46,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$Vz,163:$VA},{125:387,126:335,127:$V42,128:$V52},o($Vf2,[2,144]),{10:388,12:10,13:11,14:$V3,17:$V4,33:14,34:15,35:16,36:17,37:18,38:19,39:20,40:29,41:30,42:31,43:32,44:33,45:34,46:35,47:$V5,49:$V6,51:40,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$VS1,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,78:$Vh,81:$Vi,89:$Vj,92:$Vk,93:21,94:22,95:23,96:24,97:25,98:26,99:27,100:28,101:$Vl,103:$Vm,104:$Vn,105:$Vo,106:$Vp,108:$Vq,110:$Vr,113:$VT1,114:46,135:$Vt,136:$Vu,157:$Vv,158:63,159:$Vw,160:$Vx,161:$Vy,162:$VU1,163:$VV1,164:$VG,165:$VH,166:$VI,167:$VJ,168:$VK,169:$VL,170:$VM,171:$VN,172:$VO,174:$VP,175:$VQ},o($Vx1,[2,157]),o($V62,$V72,{143:340,142:389,141:$V82,145:$V92,147:$Va2,148:$Vb2,149:$Vc2}),o($Vi2,[2,163]),{21:392,33:353,37:391,40:29,41:30,42:31,43:32,44:33,45:34,46:35,49:$V6,51:133,54:$V7,55:$V8,56:$V9,57:57,58:390,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,81:$Vp2,89:$Vj,92:$Vk,157:$Vv,158:63},o($Vj2,[2,176]),{81:$Vk2,144:393,150:$Vl2},o($Vi2,[2,168]),o($V62,$V72,{142:339,143:340,138:394,141:$V82,145:$V92,147:$Va2,148:$Vb2,149:$Vc2}),o($V62,$V72,{142:339,143:340,138:395,141:$V82,145:$V92,147:$Va2,148:$Vb2,149:$Vc2}),o($Vg2,$Vv1,{19:368,16:[1,396],17:$Vh2}),o($Vx1,[2,177]),{33:353,37:352,40:29,41:30,42:31,43:32,44:33,45:34,46:35,49:$V6,51:133,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,89:$Vj,92:$Vk,147:$Vd2,154:397,157:$Vv,158:63},o($Vo2,[2,181]),o($Vo2,[2,182]),{60:$Vy1},{33:353,37:352,40:29,41:30,42:31,43:32,44:33,45:34,46:35,49:$V6,51:133,54:$V7,55:$V8,56:$V9,57:57,58:65,59:$Va,60:$Vb,62:$Vc,66:$Vd,68:58,69:$Ve,70:$Vf,71:$Vg,89:$Vj,92:$Vk,147:$Vd2,152:398,154:350,157:$Vv,158:63},o($Ve2,[2,185]),{16:[1,399],17:$V_1},o($V22,[2,88]),{16:[1,400]},o($Vf2,[2,143]),o($Vf2,[2,145]),o($Vi2,[2,162]),o($Vi2,[2,164],{52:$Vp1,63:$Vp1,64:$Vp1,65:$Vp1,88:$Vp1}),o($Vi2,[2,165]),o($Vi2,[2,166]),{21:401,81:$Vp2},o($Vg2,$Vv1,{19:368,16:[1,402],17:$Vh2}),o($Vg2,$Vv1,{19:368,16:[1,403],17:$Vh2}),o($Vx1,[2,160]),o($Vo2,[2,180]),o($Vm2,$Vv1,{19:378,16:[1,404],17:$Vn2}),o($VM1,[2,74]),o($Vx1,[2,141]),o($Vi2,[2,167]),o($Vx1,[2,158]),o($Vx1,[2,159]),o($Vx1,[2,178])],
defaultActions: {},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}return exports;})();
require["./context"] = (function() {var exports = {}, module = {exports: exports};// Generated by CoffeeScript 1.7.1
(function() {
  var Context, PreContext;

  exports.Context = Context = (function() {
    function Context(element) {
      this.scopes = [];
      this.scopes.unshift(element);
    }

    Context.prototype.push = function(iden) {
      this.scopes[0][iden.name] = {};
      this.scopes[0][iden.name].name = iden.name;
      return this.scopes[0][iden.name].type = iden.type;
    };

    Context.prototype.scopein = function() {
      return this.scopes.unshift({});
    };

    Context.prototype.scopeout = function() {
      return this.scopes.shift();
    };

    Context.prototype.Identify = function(name) {
      var scope, _i, _len, _ref, _ref1;
      _ref = this.scopes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        scope = _ref[_i];
        if (scope[name] !== void 0) {
          if ((_ref1 = scope[name].type) === 'function' || _ref1 === 'cte' || _ref1 === 'class' || _ref1 === 'interface') {
            return name;
          } else {
            return '$' + name;
          }
        }
      }
      return '$' + name;
    };

    return Context;

  })();

  PreContext = exports.PreContext = new Context({
    'call_​user_​func_​array': {
      'type': 'function'
    },
    'call_user_func': {
      'type': 'function'
    },
    'create_function': {
      'type': 'function'
    },
    'forward_static_call_array': {
      'type': 'function'
    },
    'forward_static_call': {
      'type': 'function'
    },
    'func_get_arg': {
      'type': 'function'
    },
    'func_get_args': {
      'type': 'function'
    },
    'func_num_args': {
      'type': 'function'
    },
    'function_exists': {
      'type': 'function'
    },
    'get_defined_functions': {
      'type': 'function'
    },
    'register_shutdown_function': {
      'type': 'function'
    },
    'register_tick_function': {
      'type': 'function'
    },
    'unregister_tick_function': {
      'type': 'function'
    },
    'CASE_LOWER': {
      'type': 'cte'
    },
    'CASE_UPPER': {
      'type': 'cte'
    },
    'SORT_ASC': {
      'type': 'cte'
    },
    'SORT_DESC': {
      'type': 'cte'
    },
    'SORT_REGULAR': {
      'type': 'cte'
    },
    'SORT_NUMERIC': {
      'type': 'cte'
    },
    'SORT_STRING': {
      'type': 'cte'
    },
    'SORT_LOCALE_STRING': {
      'type': 'cte'
    },
    'SORT_NATURAL': {
      'type': 'cte'
    },
    'SORT_FLAG_CASE': {
      'type': 'cte'
    },
    'COUNT_NORMAL': {
      'type': 'cte'
    },
    'COUNT_RECURSIVE': {
      'type': 'cte'
    },
    'EXTR_OVERWRITE': {
      'type': 'cte'
    },
    'EXTR_SKIP': {
      'type': 'cte'
    },
    'EXTR_PREFIX_SAME': {
      'type': 'cte'
    },
    'EXTR_PREFIX_ALL': {
      'type': 'cte'
    },
    'EXTR_PREFIX_INVALID': {
      'type': 'cte'
    },
    'EXTR_PREFIX_IF_EXISTS': {
      'type': 'cte'
    },
    'EXTR_IF_EXISTS': {
      'type': 'cte'
    },
    'EXTR_REFS': {
      'type': 'cte'
    },
    'array_change_key_case': {
      'type': 'function'
    },
    'array_chunk': {
      'type': 'function'
    },
    'array_column': {
      'type': 'function'
    },
    'array_combine': {
      'type': 'function'
    },
    'array_count_values': {
      'type': 'function'
    },
    'array_diff_assoc': {
      'type': 'function'
    },
    'array_diff_key': {
      'type': 'function'
    },
    'array_diff_uassoc': {
      'type': 'function'
    },
    'array_diff_ukey': {
      'type': 'function'
    },
    'array_diff': {
      'type': 'function'
    },
    'array_fill_keys': {
      'type': 'function'
    },
    'array_fill': {
      'type': 'function'
    },
    'array_filter': {
      'type': 'function'
    },
    'array_flip': {
      'type': 'function'
    },
    'array_intersect_assoc': {
      'type': 'function'
    },
    'array_intersect_key': {
      'type': 'function'
    },
    'array_intersect_uassoc': {
      'type': 'function'
    },
    'array_intersect_ukey': {
      'type': 'function'
    },
    'array_intersect': {
      'type': 'function'
    },
    'array_key_exists': {
      'type': 'function'
    },
    'array_keys': {
      'type': 'function'
    },
    'array_map': {
      'type': 'function'
    },
    'array_merge_recursive': {
      'type': 'function'
    },
    'array_merge': {
      'type': 'function'
    },
    'array_multisort': {
      'type': 'function'
    },
    'array_pad': {
      'type': 'function'
    },
    'array_pop': {
      'type': 'function'
    },
    'array_product': {
      'type': 'function'
    },
    'array_push': {
      'type': 'function'
    },
    'array_rand': {
      'type': 'function'
    },
    'array_reduce': {
      'type': 'function'
    },
    'array_replace_recursive': {
      'type': 'function'
    },
    'array_replace': {
      'type': 'function'
    },
    'array_reverse': {
      'type': 'function'
    },
    'array_search': {
      'type': 'function'
    },
    'array_shift': {
      'type': 'function'
    },
    'array_slice': {
      'type': 'function'
    },
    'array_splice': {
      'type': 'function'
    },
    'array_sum': {
      'type': 'function'
    },
    'array_udiff_assoc': {
      'type': 'function'
    },
    'array_udiff_uassoc': {
      'type': 'function'
    },
    'array_udiff': {
      'type': 'function'
    },
    'array_uintersect_assoc': {
      'type': 'function'
    },
    'array_uintersect_uassoc': {
      'type': 'function'
    },
    'array_uintersect': {
      'type': 'function'
    },
    'array_unique': {
      'type': 'function'
    },
    'array_unshift': {
      'type': 'function'
    },
    'array_values': {
      'type': 'function'
    },
    'array_walk_recursive': {
      'type': 'function'
    },
    'array_walk': {
      'type': 'function'
    },
    'array': {
      'type': 'function'
    },
    'arsort': {
      'type': 'function'
    },
    'asort': {
      'type': 'function'
    },
    'compact': {
      'type': 'function'
    },
    'count': {
      'type': 'function'
    },
    'current': {
      'type': 'function'
    },
    'each': {
      'type': 'function'
    },
    'end': {
      'type': 'function'
    },
    'extract': {
      'type': 'function'
    },
    'in_array': {
      'type': 'function'
    },
    'key_exists': {
      'type': 'function'
    },
    'key': {
      'type': 'function'
    },
    'krsort': {
      'type': 'function'
    },
    'ksort': {
      'type': 'function'
    },
    'list': {
      'type': 'function'
    },
    'natcasesort': {
      'type': 'function'
    },
    'natsort': {
      'type': 'function'
    },
    'next': {
      'type': 'function'
    },
    'pos': {
      'type': 'function'
    },
    'prev': {
      'type': 'function'
    },
    'range': {
      'type': 'function'
    },
    'reset': {
      'type': 'function'
    },
    'rsort': {
      'type': 'function'
    },
    'shuffle': {
      'type': 'function'
    },
    'sizeof': {
      'type': 'function'
    },
    'sort': {
      'type': 'function'
    },
    'uasort': {
      'type': 'function'
    },
    'uksort': {
      'type': 'function'
    },
    'usort': {
      'type': 'function'
    },
    '__autoload': {
      'type': 'function'
    },
    'call_user_method_array': {
      'type': 'function'
    },
    'call_user_method': {
      'type': 'function'
    },
    'class_alias': {
      'type': 'function'
    },
    'class_exists': {
      'type': 'function'
    },
    'get_called_class': {
      'type': 'function'
    },
    'get_class_methods': {
      'type': 'function'
    },
    'get_class_vars': {
      'type': 'function'
    },
    'get_class': {
      'type': 'function'
    },
    'get_declared_classes': {
      'type': 'function'
    },
    'get_declared_interfaces': {
      'type': 'function'
    },
    'get_declared_traits': {
      'type': 'function'
    },
    'get_object_vars': {
      'type': 'function'
    },
    'get_parent_class': {
      'type': 'function'
    },
    'interface_exists': {
      'type': 'function'
    },
    'is_a': {
      'type': 'function'
    },
    'is_subclass_of': {
      'type': 'function'
    },
    'method_exists': {
      'type': 'function'
    },
    'property_exists': {
      'type': 'function'
    },
    'trait_exists': {
      'type': 'function'
    },
    'CLASSKIT_ACC_PRIVATE': {
      'type': 'cte'
    },
    'CLASSKIT_ACC_PROTECTED': {
      'type': 'cte'
    },
    'CLASSKIT_ACC_PUBLIC': {
      'type': 'cte'
    },
    'classkit_import': {
      'type': 'function'
    },
    'classkit_method_add': {
      'type': 'function'
    },
    'classkit_method_copy': {
      'type': 'function'
    },
    'classkit_method_redefine': {
      'type': 'function'
    },
    'classkit_method_remove': {
      'type': 'function'
    },
    'classkit_method_rename': {
      'type': 'function'
    },
    'ctype_alnum': {
      'type': 'function'
    },
    'ctype_alpha': {
      'type': 'function'
    },
    'ctype_cntrl': {
      'type': 'function'
    },
    'ctype_digit': {
      'type': 'function'
    },
    'ctype_graph': {
      'type': 'function'
    },
    'ctype_lower': {
      'type': 'function'
    },
    'ctype_print': {
      'type': 'function'
    },
    'ctype_punct': {
      'type': 'function'
    },
    'ctype_space': {
      'type': 'function'
    },
    'ctype_upper': {
      'type': 'function'
    },
    'ctype_xdigit': {
      'type': 'function'
    },
    'INPUT_POST': {
      'type': 'cte'
    },
    'INPUT_GET': {
      'type': 'cte'
    },
    'INPUT_COOKIE': {
      'type': 'cte'
    },
    'INPUT_ENV': {
      'type': 'cte'
    },
    'INPUT_SERVER': {
      'type': 'cte'
    },
    'INPUT_SESSION': {
      'type': 'cte'
    },
    'INPUT_REQUEST': {
      'type': 'cte'
    },
    'FILTER_FLAG_NONE': {
      'type': 'cte'
    },
    'FILTER_REQUIRE_SCALAR': {
      'type': 'cte'
    },
    'FILTER_REQUIRE_ARRAY': {
      'type': 'cte'
    },
    'FILTER_FORCE_ARRAY': {
      'type': 'cte'
    },
    'FILTER_NULL_ON_FAILURE': {
      'type': 'cte'
    },
    'FILTER_VALIDATE_INT': {
      'type': 'cte'
    },
    'FILTER_VALIDATE_BOOLEAN': {
      'type': 'cte'
    },
    'FILTER_VALIDATE_FLOAT': {
      'type': 'cte'
    },
    'FILTER_VALIDATE_REGEXP': {
      'type': 'cte'
    },
    'FILTER_VALIDATE_URL': {
      'type': 'cte'
    },
    'FILTER_VALIDATE_EMAIL': {
      'type': 'cte'
    },
    'FILTER_VALIDATE_IP': {
      'type': 'cte'
    },
    'FILTER_DEFAULT': {
      'type': 'cte'
    },
    'FILTER_UNSAFE_RAW': {
      'type': 'cte'
    },
    'FILTER_SANITIZE_STRING': {
      'type': 'cte'
    },
    'FILTER_SANITIZE_STRIPPED': {
      'type': 'cte'
    },
    'FILTER_SANITIZE_ENCODED': {
      'type': 'cte'
    },
    'FILTER_SANITIZE_SPECIAL_CHARS': {
      'type': 'cte'
    },
    'FILTER_SANITIZE_EMAIL': {
      'type': 'cte'
    },
    'FILTER_SANITIZE_URL': {
      'type': 'cte'
    },
    'FILTER_SANITIZE_NUMBER_INT': {
      'type': 'cte'
    },
    'FILTER_SANITIZE_NUMBER_FLOAT': {
      'type': 'cte'
    },
    'FILTER_SANITIZE_MAGIC_QUOTES': {
      'type': 'cte'
    },
    'FILTER_CALLBACK': {
      'type': 'cte'
    },
    'FILTER_FLAG_ALLOW_OCTAL': {
      'type': 'cte'
    },
    'FILTER_FLAG_ALLOW_HEX': {
      'type': 'cte'
    },
    'FILTER_FLAG_STRIP_LOW': {
      'type': 'cte'
    },
    'FILTER_FLAG_STRIP_HIGH': {
      'type': 'cte'
    },
    'FILTER_FLAG_ENCODE_LOW': {
      'type': 'cte'
    },
    'FILTER_FLAG_ENCODE_HIGH': {
      'type': 'cte'
    },
    'FILTER_FLAG_ENCODE_AMP': {
      'type': 'cte'
    },
    'FILTER_FLAG_NO_ENCODE_QUOTES': {
      'type': 'cte'
    },
    'FILTER_FLAG_EMPTY_STRING_NULL': {
      'type': 'cte'
    },
    'FILTER_FLAG_ALLOW_FRACTION': {
      'type': 'cte'
    },
    'FILTER_FLAG_ALLOW_THOUSAND': {
      'type': 'cte'
    },
    'FILTER_FLAG_ALLOW_SCIENTIFIC': {
      'type': 'cte'
    },
    'FILTER_FLAG_PATH_REQUIRED': {
      'type': 'cte'
    },
    'FILTER_FLAG_QUERY_REQUIRED': {
      'type': 'cte'
    },
    'FILTER_FLAG_IPV4': {
      'type': 'cte'
    },
    'FILTER_FLAG_IPV6': {
      'type': 'cte'
    },
    'FILTER_FLAG_NO_RES_RANGE': {
      'type': 'cte'
    },
    'FILTER_FLAG_NO_PRIV_RANGE': {
      'type': 'cte'
    },
    'filter_has_var': {
      'type': 'function'
    },
    'filter_id': {
      'type': 'function'
    },
    'filter_input_array': {
      'type': 'function'
    },
    'filter_input': {
      'type': 'function'
    },
    'filter_list': {
      'type': 'function'
    },
    'filter_var_array': {
      'type': 'function'
    },
    'filter_var': {
      'type': 'function'
    },
    'aggregate_infoh': {
      'type': 'function'
    },
    'aggregate_methods_by_list': {
      'type': 'function'
    },
    'aggregate_methods_by_regexp': {
      'type': 'function'
    },
    'aggregate_methods': {
      'type': 'function'
    },
    'aggregate_properties_by_list': {
      'type': 'function'
    },
    'aggregate_properties_by_regexp': {
      'type': 'function'
    },
    'aggregate_properties': {
      'type': 'function'
    },
    'aggregate': {
      'type': 'function'
    },
    'aggregation_info': {
      'type': 'function'
    },
    'deaggregate': {
      'type': 'function'
    },
    'QuickHashIntSet': {
      'type': 'class'
    },
    'QuickHashIntHash': {
      'type': 'class'
    },
    'QuickHashStringIntHash': {
      'type': 'class'
    },
    'QuickHashIntStringHash': {
      'type': 'class'
    },
    'Reflection': {
      'type': 'class'
    },
    'ReflectionClass': {
      'type': 'class'
    },
    'ReflectionZendExtension': {
      'type': 'class'
    },
    'ReflectionExtension': {
      'type': 'class'
    },
    'ReflectionFunction': {
      'type': 'class'
    },
    'ReflectionFunctionAbstract': {
      'type': 'class'
    },
    'ReflectionMethod': {
      'type': 'class'
    },
    'ReflectionObject': {
      'type': 'class'
    },
    'ReflectionParameter': {
      'type': 'class'
    },
    'ReflectionProperty': {
      'type': 'class'
    },
    'Reflector': {
      'type': 'class'
    },
    'ReflectionException': {
      'type': 'class'
    },
    'boolval': {
      'type': 'function'
    },
    'debug_zval_dump': {
      'type': 'function'
    },
    'doubleval': {
      'type': 'function'
    },
    'empty': {
      'type': 'function'
    },
    'floatval': {
      'type': 'function'
    },
    'get_defined_vars': {
      'type': 'function'
    },
    'get_resource_type': {
      'type': 'function'
    },
    'gettype': {
      'type': 'function'
    },
    'import_request_variables': {
      'type': 'function'
    },
    'intval': {
      'type': 'function'
    },
    'is_array': {
      'type': 'function'
    },
    'is_bool': {
      'type': 'function'
    },
    'is_callable': {
      'type': 'function'
    },
    'is_double': {
      'type': 'function'
    },
    'is_float': {
      'type': 'function'
    },
    'is_int': {
      'type': 'function'
    },
    'is_integer': {
      'type': 'function'
    },
    'is_long': {
      'type': 'function'
    },
    'is_null': {
      'type': 'function'
    },
    'is_numeric': {
      'type': 'function'
    },
    'is_object': {
      'type': 'function'
    },
    'is_real': {
      'type': 'function'
    },
    'is_resource': {
      'type': 'function'
    },
    'is_scalar': {
      'type': 'function'
    },
    'is_string': {
      'type': 'function'
    },
    'isset': {
      'type': 'function'
    },
    'print_r': {
      'type': 'function'
    },
    'serialize': {
      'type': 'function'
    },
    'settype': {
      'type': 'function'
    },
    'strval': {
      'type': 'function'
    },
    'unserialize': {
      'type': 'function'
    },
    'unset': {
      'type': 'function'
    },
    'var_dump': {
      'type': 'function'
    },
    'var_export': {
      'type': 'function'
    }
  });

}).call(this);
return module.exports;})();
require["./lexer"] = (function() {var exports = {}, module = {exports: exports};// Generated by CoffeeScript 1.7.1
(function() {
  var CloseIndents, IntoArray, IntoHereDoc, IntoMammouth, Levels, Lexer, RegularExpression, ShouldCloseCall, captureTypeCasting, col, lastIsIdentifier, lexer, row, setToken, tokenStack;

  Lexer = require("lex");

  col = 1;

  row = 1;

  IntoArray = false;

  IntoMammouth = false;

  IntoHereDoc = false;

  Levels = [
    {
      IndentStack: [],
      CurrentIndent: -1,
      OpenedIndent: 0
    }
  ];

  lastIsIdentifier = false;

  ShouldCloseCall = false;

  captureTypeCasting = false;

  tokenStack = [];

  setToken = function(token) {
    if (token === 'IDENTIFIER' && tokenStack[0] !== 'FUNC') {
      lastIsIdentifier = true;
    } else {
      lastIsIdentifier = false;
      if (token === '=>') {
        captureTypeCasting = true;
      } else {
        captureTypeCasting = false;
      }
    }
    return tokenStack.unshift(token);
  };

  CloseIndents = function(tokens) {
    while (Levels[0].OpenedIndent > 0) {
      tokens.unshift('OUTDENT');
      Levels[0].OpenedIndent--;
    }
    return tokens;
  };

  lexer = module.exports = new Lexer(function(char) {
    throw new Error("Unexpected character at row " + row + ", col " + col + ": " + char);
  });

  RegularExpression = {
    PlainText: /(((?!({{|}}))([\n\r\u2028\u2029]|.))*)/,
    MammouthStart: /{{/,
    MammouthEnd: /}}/,
    Python_indent: /(^[ \t]*)/gm,
    EmptyLine: /(^[\u0020\u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000]*[\n\r\u2028\u2029])/gmi,
    IDENTIFIER: /(([$A-Za-z_\x7f-\uffff][$\w\x7f-\uffff]*)( [^\n\S]* : (?!:) )?)/,
    NUMBER: /(0b[01]+|0o[0-7]+|0(x|X)[\da-fA-F]+|\d*\.?\d+(?:(e|E)[+-]?\d+)?)/,
    STRING: /('[^\\']*(?:\\[\s\S][^\\']*)*'|"[^\\"]*(?:\\[\s\S][^\\"]*)*")/,
    HEREDOC: /(((?!(\`))(.|[\n\r\u2028\u2029]|[\u0020\u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000]))*)/,
    LineTerminator: /[\n\r\u2028\u2029]/,
    Zs: /[\u0020\u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000]/,
    SingleComment: /#(.*)+[\n\r\u2028\u2029]/,
    MultiComment: /###(([\n\r\u2028\u2029]|.)*)###/
  };

  lexer.addRule(RegularExpression.PlainText, function(lexeme) {
    if (!IntoMammouth) {
      col += lexeme.length;
      this.yytext = lexeme;
      setToken('PlainText');
      return 'PlainText';
    } else {
      return this.reject = true;
    }
  });

  lexer.addRule(RegularExpression.HEREDOC, function(lexeme) {
    if (IntoMammouth && IntoHereDoc) {
      col += lexeme.length;
      this.yytext = lexeme;
      setToken('HEREDOCTEXT');
      return 'HEREDOCTEXT';
    } else {
      return this.reject = true;
    }
  });

  lexer.addRule(RegularExpression.EmptyLine, function(lexeme) {});

  lexer.addRule(RegularExpression.SingleComment, function(lexeme) {});

  lexer.addRule(RegularExpression.MultiComment, function(lexeme) {});

  lexer.addRule(RegularExpression.Python_indent, function(lexeme) {
    var a, current_line_indent, i, tokens, _i, _j, _len, _len1, _ref;
    if (IntoMammouth) {
      col += lexeme.length;
      current_line_indent = lexeme.replace(/\t/g, '    ').length;
      if (current_line_indent > Levels[0].CurrentIndent) {
        Levels[0].CurrentIndent = current_line_indent;
        Levels[0].OpenedIndent++;
        Levels[0].IndentStack.push(Levels[0].CurrentIndent);
        setToken('INDENT');
        return 'INDENT';
      } else if (current_line_indent < Levels[0].CurrentIndent) {
        tokens = [];
        a = [];
        _ref = Levels[0].IndentStack;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          a.unshift(i);
        }
        for (_j = 0, _len1 = a.length; _j < _len1; _j++) {
          i = a[_j];
          if (current_line_indent === i) {
            Levels[0].CurrentIndent = i;
          } else if (current_line_indent < i) {
            Levels[0].CurrentIndent = Levels[0].IndentStack.pop();
            setToken('OUTDENT');
            tokens.push('OUTDENT');
            Levels[0].OpenedIndent -= 1;
          }
        }
        return tokens;
      } else {

      }
    }
  });

  lexer.addRule(RegularExpression.Zs, function(lexeme) {});

  lexer.addRule(RegularExpression.MammouthStart, function() {
    col += 2;
    IntoMammouth = true;
    setToken('{{');
    IntoArray = false;
    IntoHereDoc = false;
    Levels = [
      {
        IndentStack: [],
        CurrentIndent: -1,
        OpenedIndent: 0
      }
    ];
    lastIsIdentifier = false;
    ShouldCloseCall = false;
    captureTypeCasting = false;
    tokenStack = [];
    return '{{';
  });

  lexer.addRule(RegularExpression.MammouthEnd, function() {
    var token, tokens, _i, _len;
    col += 2;
    IntoMammouth = false;
    tokens = CloseIndents(['}}']);
    for (_i = 0, _len = tokens.length; _i < _len; _i++) {
      token = tokens[_i];
      setToken(token);
    }
    return tokens;
  });

  lexer.addRule(/\`/, function(lexeme) {
    col += lexeme.length;
    if (IntoHereDoc) {
      IntoHereDoc = false;
    } else {
      IntoHereDoc = true;
    }
    setToken('`');
    return '`';
  });

  lexer.addRule(/\{/, function(lexeme) {
    col += lexeme.length;
    setToken('{');
    return '{';
  });

  lexer.addRule(/\}/, function(lexeme) {
    col += lexeme.length;
    setToken('}');
    return '}';
  });

  lexer.addRule(/\(/, function(lexeme) {
    col += lexeme.length;
    if (lastIsIdentifier) {
      lastIsIdentifier = false;
      ShouldCloseCall = true;
      setToken('CALL_START');
      return 'CALL_START';
    } else {
      setToken('(');
      return '(';
    }
  });

  lexer.addRule(/\)/, function(lexeme) {
    col += lexeme.length;
    if (ShouldCloseCall) {
      ShouldCloseCall = false;
      setToken('CALL_END');
      return 'CALL_END';
    } else {
      setToken(')');
      return ')';
    }
  });

  lexer.addRule(/\;/, function(lexeme) {
    col += lexeme.length;
    setToken(';');
    return ';';
  });

  lexer.addRule(/\[/, function(lexeme) {
    col += lexeme.length;
    setToken('[');
    return '[';
  });

  lexer.addRule(/\]/, function(lexeme) {
    col += lexeme.length;
    setToken(']');
    return ']';
  });

  lexer.addRule(/@/, function(lexeme) {
    col += lexeme.length;
    setToken('@');
    return '@';
  });

  lexer.addRule(/,/, function(lexeme) {
    col += lexeme.length;
    setToken(',');
    return ',';
  });

  lexer.addRule(/\./, function(lexeme) {
    col += lexeme.length;
    setToken('.');
    return '.';
  });

  lexer.addRule(/\.\./, function(lexeme) {
    col += lexeme.length;
    setToken('..');
    return '..';
  });

  lexer.addRule(/<->/, function(lexeme) {
    col += lexeme.length;
    setToken('<->');
    return '<->';
  });

  lexer.addRule(/->/, function(lexeme) {
    col += lexeme.length;
    setToken('->');
    return '->';
  });

  lexer.addRule(/\=>/, function(lexeme) {
    col += lexeme.length;
    setToken('=>');
    return '=>';
  });

  lexer.addRule(/\=\=>/, function(lexeme) {
    col += lexeme.length;
    setToken('==>');
    return '==>';
  });

  lexer.addRule(/:/, function(lexeme) {
    col += lexeme.length;
    setToken(':');
    return ':';
  });

  lexer.addRule(/::/, function(lexeme) {
    col += lexeme.length;
    setToken('::');
    return '::';
  });

  lexer.addRule(/\+/, function(lexeme) {
    col += lexeme.length;
    setToken('+');
    return '+';
  });

  lexer.addRule(/\+\+/, function(lexeme) {
    col += lexeme.length;
    setToken('++');
    return '++';
  });

  lexer.addRule(/-/, function(lexeme) {
    col += lexeme.length;
    setToken('-');
    return '-';
  });

  lexer.addRule(/--/, function(lexeme) {
    col += lexeme.length;
    setToken('--');
    return '--';
  });

  lexer.addRule(/\?/, function(lexeme) {
    col += lexeme.length;
    setToken('?');
    return '?';
  });

  lexer.addRule(/\*/, function(lexeme) {
    col += lexeme.length;
    setToken('*');
    return '*';
  });

  lexer.addRule(/\*\*/, function(lexeme) {
    col += lexeme.length;
    setToken('**');
    return '**';
  });

  lexer.addRule(/\//, function(lexeme) {
    col += lexeme.length;
    setToken('/');
    return '/';
  });

  lexer.addRule(/\\/, function(lexeme) {
    col += lexeme.length;
    setToken('\\');
    return '\\';
  });

  lexer.addRule(/%/, function(lexeme) {
    col += lexeme.length;
    setToken('%');
    return '%';
  });

  lexer.addRule(/\+\=/, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('ASSIGN');
    return "ASSIGN";
  });

  lexer.addRule(/-\=/, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('ASSIGN');
    return "ASSIGN";
  });

  lexer.addRule(/\*\=/, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('ASSIGN');
    return "ASSIGN";
  });

  lexer.addRule(/\/\=/, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('ASSIGN');
    return "ASSIGN";
  });

  lexer.addRule(/\%\=/, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('ASSIGN');
    return "ASSIGN";
  });

  lexer.addRule(/&/, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('&');
    return "&";
  });

  lexer.addRule(/>>/, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('>>');
    return "SHIFT";
  });

  lexer.addRule(/<</, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('<<');
    return 'SHIFT';
  });

  lexer.addRule(/\|\|/, function(lexeme) {
    col += lexeme.length;
    this.yytext = '||';
    setToken('LOGIC');
    return 'LOGIC';
  });

  lexer.addRule(/&&/, function(lexeme) {
    col += lexeme.length;
    this.yytext = 'and';
    setToken('LOGIC');
    return 'LOGIC';
  });

  lexer.addRule(/\|/, function(lexeme) {
    col += lexeme.length;
    this.yytext = 'or';
    setToken('LOGIC');
    return 'LOGIC';
  });

  lexer.addRule(/</, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('COMPARE');
    return "COMPARE";
  });

  lexer.addRule(/>/, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('COMPARE');
    return "COMPARE";
  });

  lexer.addRule(/<=/, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('COMPARE');
    return "COMPARE";
  });

  lexer.addRule(/>=/, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('COMPARE');
    return "COMPARE";
  });

  lexer.addRule(/!\=/, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('COMPARE');
    return "COMPARE";
  });

  lexer.addRule(/\=\=/, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('COMPARE');
    return "COMPARE";
  });

  lexer.addRule(/\=\=\=/, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('COMPARE');
    return "COMPARE";
  });

  lexer.addRule(/\=/, function(lexeme) {
    col += lexeme.length;
    setToken('=');
    return "=";
  });

  lexer.addRule(RegularExpression.IDENTIFIER, function(lexeme) {
    col += lexeme.length;
    if (captureTypeCasting) {
      this.yytext = lexeme;
      setToken('cType');
      return 'cType';
    }
    if (lexeme === 'true' || lexeme === 'false') {
      this.yytext = eval(lexeme);
      setToken('BOOL');
      return 'BOOL';
    } else if (lexeme === 'break') {
      setToken('BREAK');
      return 'BREAK';
    } else if (lexeme === 'and') {
      this.yytext = lexeme;
      setToken('LOGIC');
      return 'LOGIC';
    } else if (lexeme === 'abstract') {
      setToken('ABSTRACT');
      return 'ABSTRACT';
    } else if (lexeme === 'as') {
      setToken('AS');
      return 'AS';
    } else if (lexeme === 'catch') {
      setToken('CATCH');
      return 'CATCH';
    } else if (lexeme === 'case') {
      setToken('CASE');
      return 'CASE';
    } else if (lexeme === 'class') {
      setToken('CLASS');
      return 'CLASS';
    } else if (lexeme === 'clone') {
      setToken('CLONE');
      return 'CLONE';
    } else if (lexeme === 'continue') {
      setToken('CONTINUE');
      return 'CONTINUE';
    } else if (lexeme === 'cte') {
      setToken('CTE');
      return 'CTE';
    } else if (lexeme === 'declare') {
      setToken('DECLARE');
      return 'DECLARE';
    } else if (lexeme === 'delete') {
      setToken('DELETE');
      return 'DELETE';
    } else if (lexeme === 'do') {
      setToken('DO');
      return 'DO';
    } else if (lexeme === 'each') {
      setToken('EACH');
      return 'EACH';
    } else if (lexeme === 'echo') {
      setToken('ECHO');
      return 'ECHO';
    } else if (lexeme === 'else') {
      setToken('ELSE');
      return 'ELSE';
    } else if (lexeme === 'exec') {
      setToken('EXEC');
      return 'EXEC';
    } else if (lexeme === 'extends') {
      setToken('EXTENDS');
      return 'EXTENDS';
    } else if (lexeme === 'final') {
      setToken('FINAL');
      return 'FINAL';
    } else if (lexeme === 'finally') {
      setToken('FINALLY');
      return 'FINALLY';
    } else if (lexeme === 'for') {
      setToken('FOR');
      return 'FOR';
    } else if (lexeme === 'func') {
      setToken('FUNC');
      return 'FUNC';
    } else if (lexeme === 'goto') {
      setToken('GOTO');
      return 'GOTO';
    } else if (lexeme === 'if') {
      setToken('IF');
      return 'IF';
    } else if (lexeme === 'implements') {
      setToken('IMPLEMENTS');
      return 'IMPLEMENTS';
    } else if (lexeme === 'include') {
      setToken('INCLUDE');
      return 'INCLUDE';
    } else if (lexeme === 'instanceof') {
      setToken('INSTANCEOF');
      return 'INSTANCEOF';
    } else if (lexeme === 'interface') {
      setToken('INTERFACE');
      return 'INTERFACE';
    } else if (lexeme === "is") {
      this.yytext = "===";
      setToken('COMPARE');
      return "COMPARE";
    } else if (lexeme === "isnt") {
      this.yytext = "!=";
      setToken('COMPARE');
      return "COMPARE";
    } else if (lexeme === "in") {
      setToken('IN');
      return "IN";
    } else if (lexeme === 'not') {
      setToken('NOT');
      return 'NOT';
    } else if (lexeme === 'namespace') {
      setToken('NAMESPACE');
      return 'NAMESPACE';
    } else if (lexeme === 'new') {
      setToken('NEW');
      return 'NEW';
    } else if (lexeme === 'null') {
      setToken('NULL');
      return 'NULL';
    } else if (lexeme === 'once') {
      setToken('ONCE');
      return 'ONCE';
    } else if (lexeme === 'or') {
      this.yytext = lexeme;
      setToken('LOGIC');
      return 'LOGIC';
    } else if (lexeme === 'public') {
      setToken('PUBLIC');
      return 'PUBLIC';
    } else if (lexeme === 'private') {
      setToken('PRIVATE');
      return 'PRIVATE';
    } else if (lexeme === 'protected') {
      setToken('PROTECTED');
      return 'PROTECTED';
    } else if (lexeme === 'static') {
      setToken('STATIC');
      return 'STATIC';
    } else if (lexeme === 'require') {
      setToken('REQUIRE');
      return 'REQUIRE';
    } else if (lexeme === 'return') {
      setToken('RETURN');
      return 'RETURN';
    } else if (lexeme === 'switch') {
      setToken('SWITCH');
      return 'SWITCH';
    } else if (lexeme === 'then') {
      setToken('THEN');
      return 'THEN';
    } else if (lexeme === 'try') {
      setToken('TRY');
      return 'TRY';
    } else if (lexeme === 'use') {
      setToken('USE');
      return 'USE';
    } else if (lexeme === 'when') {
      setToken('WHEN');
      return 'WHEN';
    } else if (lexeme === 'while') {
      setToken('WHILE');
      return 'WHILE';
    } else {
      this.yytext = lexeme;
      setToken('IDENTIFIER');
      return "IDENTIFIER";
    }
  });

  lexer.addRule(RegularExpression.NUMBER, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('NUMBER');
    return "NUMBER";
  });

  lexer.addRule(RegularExpression.STRING, function(lexeme) {
    col += lexeme.length;
    this.yytext = lexeme;
    setToken('STRING');
    return "STRING";
  });

  lexer.addRule(RegularExpression.LineTerminator, function(lexeme) {
    col = 1;
    row++;
    setToken('LineTerminator');
    return "LineTerminator";
  });

}).call(this);
return module.exports;})();
require["./nodes"] = (function() {var exports = {}, module = {exports: exports};// Generated by CoffeeScript 1.7.1
(function() {
  var Access, Array, ArrayKey, Assign, Block, Bool, Break, Call, Casting, Class, ClassLine, Clone, Code, Constant, Continue, Declare, Delete, DoWhile, Echo, Else, ElseIf, Exec, Existence, Expression, For, GetKeyAssign, Goto, HereDoc, Identifier, If, In, Include, Interface, Literal, MammouthBlock, Namespace, NamespaceRef, NewCall, Operation, Parens, PlainBlock, Require, Return, Section, Switch, SwitchElse, Try, Unary, Update, Value, When, While;

  exports.PlainBlock = PlainBlock = (function() {
    function PlainBlock(text) {
      this.text = text;
      this.type = 'PlainBlock';
    }

    PlainBlock.prototype.toPHP = function() {
      return this.text;
    };

    return PlainBlock;

  })();

  exports.MammouthBlock = MammouthBlock = (function() {
    function MammouthBlock(body) {
      this.body = body;
      this.type = 'MammouthBlock';
    }

    return MammouthBlock;

  })();

  exports.Block = Block = (function() {
    function Block(nodes) {
      this.nodes = nodes;
      this.type = 'Block';
    }

    return Block;

  })();

  exports.Expression = Expression = (function() {
    function Expression(expression) {
      this.expression = expression;
      this.type = 'Expression';
    }

    return Expression;

  })();

  exports.Value = Value = (function() {
    function Value(value, properties) {
      this.value = value;
      this.properties = properties != null ? properties : [];
      this.type = 'Value';
    }

    Value.prototype.add = function(prop) {
      return this.properties.push(prop);
    };

    return Value;

  })();

  exports.Access = Access = (function() {
    function Access(value, method) {
      this.value = value;
      this.method = method != null ? method : ".";
      this.type = 'Access';
    }

    return Access;

  })();

  exports.Parens = Parens = (function() {
    function Parens(expression) {
      this.expression = expression;
      this.type = 'Parens';
    }

    return Parens;

  })();

  exports.Identifier = Identifier = (function() {
    function Identifier(name, as_arguments, passing) {
      this.name = name;
      this.as_arguments = as_arguments != null ? as_arguments : false;
      this.passing = passing != null ? passing : false;
      this.type = 'Identifier';
    }

    return Identifier;

  })();

  exports.Literal = Literal = (function() {
    function Literal(value) {
      this.value = value;
      this.type = 'Literal';
    }

    return Literal;

  })();

  exports.Bool = Bool = (function() {
    function Bool(value) {
      this.value = value;
      this.type = 'Bool';
    }

    return Bool;

  })();

  exports.Null = (function() {
    function _Class() {
      this.type = 'Null';
    }

    return _Class;

  })();

  exports.Array = Array = (function() {
    function Array(elements) {
      this.elements = elements != null ? elements : [];
      this.type = 'Array';
    }

    return Array;

  })();

  exports.ArrayKey = ArrayKey = (function() {
    function ArrayKey(key, value) {
      this.key = key;
      this.value = value;
      this.type = 'ArrayKey';
    }

    return ArrayKey;

  })();

  exports.Call = Call = (function() {
    function Call(variable, _arguments) {
      this.variable = variable;
      this["arguments"] = _arguments != null ? _arguments : [];
      this.type = 'Call';
    }

    return Call;

  })();

  exports.NewCall = NewCall = (function() {
    function NewCall(variable, _arguments) {
      this.variable = variable;
      this["arguments"] = _arguments != null ? _arguments : false;
      this.type = 'NewCall';
    }

    return NewCall;

  })();

  exports.Code = Code = (function() {
    function Code(parameters, body, normal, name) {
      this.parameters = parameters;
      this.body = body;
      this.normal = normal != null ? normal : false;
      this.name = name != null ? name : null;
      this.type = 'Code';
    }

    return Code;

  })();

  exports.Casting = Casting = (function() {
    function Casting(variable, typec) {
      this.variable = variable;
      this.typec = typec;
      this.type = 'Casting';
    }

    return Casting;

  })();

  exports.Exec = Exec = (function() {
    function Exec(code) {
      this.type = 'Exec';
      if (code[0] === "'") {
        this.code = code.replace(/\'/g, '');
      } else if (code[0] === '"') {
        this.code = code.replace(/\"/, '');
      }
    }

    return Exec;

  })();

  exports.HereDoc = HereDoc = (function() {
    function HereDoc(doc) {
      this.doc = doc;
      this.type = 'HereDoc';
    }

    return HereDoc;

  })();

  exports.Clone = Clone = (function() {
    function Clone(value) {
      this.value = value;
      this.type = 'Clone';
    }

    return Clone;

  })();

  exports.Assign = Assign = (function() {
    function Assign(operator, left, right) {
      this.operator = operator;
      this.left = left;
      this.right = right;
      this.type = 'Assign';
    }

    return Assign;

  })();

  exports.GetKeyAssign = GetKeyAssign = (function() {
    function GetKeyAssign(keys, source) {
      this.keys = keys;
      this.source = source;
      this.type = 'GetKeyAssign';
    }

    return GetKeyAssign;

  })();

  exports.Constant = Constant = (function() {
    function Constant(left, right) {
      this.left = left;
      this.right = right;
      this.type = 'Constant';
    }

    return Constant;

  })();

  exports.Unary = Unary = (function() {
    function Unary(operator, expression) {
      this.operator = operator;
      this.expression = expression;
      this.type = 'Unary';
    }

    return Unary;

  })();

  exports.Update = Update = (function() {
    function Update(operator, expression, prefix) {
      this.operator = operator;
      this.expression = expression;
      this.prefix = prefix != null ? prefix : true;
      this.type = 'Update';
    }

    return Update;

  })();

  exports.Existence = Existence = (function() {
    function Existence(expression) {
      this.expression = expression;
      this.type = 'Existence';
    }

    return Existence;

  })();

  exports.Operation = Operation = (function() {
    function Operation(operator, left, right) {
      this.operator = operator;
      this.left = left;
      this.right = right;
      this.type = 'Operation';
    }

    return Operation;

  })();

  exports.In = In = (function() {
    function In(left, right) {
      this.left = left;
      this.right = right;
      this.type = 'In';
    }

    return In;

  })();

  exports.Echo = Echo = (function() {
    function Echo(value) {
      this.value = value;
      this.type = 'Echo';
    }

    return Echo;

  })();

  exports.Delete = Delete = (function() {
    function Delete(value) {
      this.value = value;
      this.type = 'Delete';
    }

    return Delete;

  })();

  exports.Include = Include = (function() {
    function Include(path, once) {
      this.path = path;
      this.once = once;
      this.type = 'Include';
    }

    return Include;

  })();

  exports.Require = Require = (function() {
    function Require(path, once) {
      this.path = path;
      this.once = once;
      this.type = 'Require';
    }

    return Require;

  })();

  exports.Break = Break = (function() {
    function Break(arg) {
      this.arg = arg != null ? arg : false;
      this.type = 'Break';
    }

    return Break;

  })();

  exports.Continue = Continue = (function() {
    function Continue(arg) {
      this.arg = arg != null ? arg : false;
      this.type = 'Continue';
    }

    return Continue;

  })();

  exports.Return = Return = (function() {
    function Return(value) {
      this.value = value;
      this.type = 'Return';
    }

    return Return;

  })();

  exports.Declare = Declare = (function() {
    function Declare(expression, script) {
      this.expression = expression;
      this.script = script != null ? script : false;
      this.type = 'Declare';
    }

    return Declare;

  })();

  exports.Goto = Goto = (function() {
    function Goto(section) {
      this.section = section;
      this.type = 'Goto';
    }

    return Goto;

  })();

  exports.If = If = (function() {
    function If(condition, body, as_expression) {
      this.condition = condition;
      this.body = body;
      this.as_expression = as_expression != null ? as_expression : false;
      this.type = 'If';
      if (!this.as_expression) {
        this.Elses = [];
      } else {
        this.Elses = false;
      }
    }

    If.prototype.addElse = function(element) {
      return this.Elses.push(element);
    };

    return If;

  })();

  exports.ElseIf = ElseIf = (function() {
    function ElseIf(condition, body) {
      this.condition = condition;
      this.body = body;
      this.type = 'ElseIf';
    }

    return ElseIf;

  })();

  exports.Else = Else = (function() {
    function Else(body) {
      this.body = body;
      this.type = 'Else';
    }

    return Else;

  })();

  exports.While = While = (function() {
    function While(test, body) {
      this.test = test;
      this.body = body;
      this.type = 'While';
    }

    return While;

  })();

  exports.DoWhile = DoWhile = (function() {
    function DoWhile(test, body) {
      this.test = test;
      this.body = body;
      this.type = 'DoWhile';
    }

    return DoWhile;

  })();

  exports.Try = Try = (function() {
    function Try(TryBody, CatchIdentifier, CatchBody, Finally) {
      this.TryBody = TryBody;
      this.CatchIdentifier = CatchIdentifier;
      this.CatchBody = CatchBody;
      this.Finally = Finally != null ? Finally : false;
      this.type = 'Try';
    }

    Try.prototype.addFinally = function(body) {
      this.Finally = true;
      return this.FinallyBody = body;
    };

    return Try;

  })();

  exports.Switch = Switch = (function() {
    function Switch(variable, cases) {
      this.variable = variable;
      this.cases = cases;
      this.type = 'Switch';
    }

    return Switch;

  })();

  exports.When = When = (function() {
    function When(condition, body) {
      this.condition = condition;
      this.body = body;
      this.type = 'When';
    }

    return When;

  })();

  exports.SwitchElse = SwitchElse = (function() {
    function SwitchElse(body) {
      this.body = body;
      this.type = 'SwitchElse';
    }

    return SwitchElse;

  })();

  exports.For = For = (function() {
    function For() {
      this.type = 'For';
      if (arguments[0] === 'normal') {
        this.method = 'normal';
        this.expressions = arguments[1];
        this.body = arguments[2];
      } else if (arguments[0] === 'foreach') {
        this.method = 'foreach';
        this.left = arguments[1];
        this.right = arguments[2];
        this.body = arguments[3];
      }
    }

    return For;

  })();

  exports.Section = Section = (function() {
    function Section(name) {
      this.name = name;
      this.type = 'Section';
    }

    return Section;

  })();

  exports.Class = Class = (function() {
    function Class(name, body, extendable, implement, abstract) {
      this.name = name;
      this.body = body;
      this.extendable = extendable != null ? extendable : false;
      this.implement = implement != null ? implement : false;
      this.abstract = abstract != null ? abstract : false;
      this.type = "Class";
    }

    return Class;

  })();

  exports.ClassLine = ClassLine = (function() {
    function ClassLine(visibility, statically, element) {
      this.visibility = visibility;
      this.statically = statically;
      this.element = element;
      this.type = 'ClassLine';
      this.abstract = false;
    }

    return ClassLine;

  })();

  exports.Interface = Interface = (function() {
    function Interface(name, body, extendable) {
      this.name = name;
      this.body = body;
      this.extendable = extendable != null ? extendable : false;
      this.type = "Interface";
    }

    return Interface;

  })();

  exports.Namespace = Namespace = (function() {
    function Namespace(name, body) {
      this.name = name;
      this.body = body != null ? body : false;
      this.type = 'Namespace';
    }

    return Namespace;

  })();

  exports.NamespaceRef = NamespaceRef = (function() {
    function NamespaceRef(path) {
      this.path = path;
      this.type = 'NamespaceRef';
    }

    return NamespaceRef;

  })();

}).call(this);
return module.exports;})();
require["./helpers"] = (function() {var exports = {}, module = {exports: exports};// Generated by CoffeeScript 1.7.1
(function() {
  var IdCounter, nodes;

  nodes = require('./nodes');

  exports.IdCounter = IdCounter = (function() {
    function IdCounter() {}

    IdCounter.prototype.letter = ['i', 'j', 'k', 'c', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'j', 'h'];

    IdCounter.prototype._level = 1;

    IdCounter.prototype.letterLevel = 0;

    IdCounter.prototype.generateAtLevel = function() {
      var i, r;
      r = '';
      i = 0;
      while (i < this._level) {
        r += '_';
        i++;
      }
      return r;
    };

    IdCounter.prototype.next = function() {
      if ((this.letterLevel + 1) === this.letter.length) {
        this._level++;
        return this.letterLevel = 0;
      } else {
        return this.letterLevel++;
      }
    };

    IdCounter.prototype.get = function() {
      var r;
      r = this.generateAtLevel() + this.letter[this.letterLevel];
      this.next();
      return new nodes.Identifier(r);
    };

    return IdCounter;

  })();

}).call(this);
return module.exports;})();
require["./rewriter"] = (function() {var exports = {}, module = {exports: exports};// Generated by CoffeeScript 1.7.1
(function() {
  var helpers, nodes;

  nodes = require('./nodes');

  helpers = require('./helpers');

  exports.rewrite = function(tree, context) {
    var ADD, IdCounter, UseSuperMammouth, compile, doc, php, _i, _len;
    IdCounter = new helpers.IdCounter;
    UseSuperMammouth = false;
    php = '';
    ADD = function(string) {
      return php += string;
    };
    compile = function(element) {
      var ID, InElement, Scase, arg, elem, elsei, expression, ext, i, key, line, lr, node, parameter, propertie, r, value, _i, _j, _k, _l, _len, _len1, _len10, _len11, _len12, _len2, _len3, _len4, _len5, _len6, _len7, _len8, _len9, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref10, _ref11, _ref12, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _s, _t, _u;
      switch (element.type) {
        case 'Block':
          if (element.nodes[element.nodes.length - 1].type === 'BlankLine') {
            element.nodes.pop();
          }
          if (element.nodes.length === 1 && element.nodes[0].type === 'Expression') {
            r = ' ' + compile(element.nodes[0]) + ' ';
            return r;
          } else {
            r = '';
            _ref = element.nodes;
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              node = _ref[i];
              r += compile(node);
              if (i !== element.nodes.length - 1) {
                r += '\n';
              }
            }
            return '\n' + r + '\n';
          }
          break;
        case 'Expression':
          return compile(element.expression) + ';';
        case 'Value':
          if (element.properties.length > 0) {
            r = compile(element.value);
            _ref1 = element.properties;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              propertie = _ref1[_j];
              switch (propertie.method) {
                case '->':
                case '.':
                  r += "->" + propertie.value.name;
                  break;
                case '::':
                case '..':
                  r += '::' + propertie.value.name;
                  break;
                case '[]':
                  r += '[' + compile(propertie.value) + ']';
              }
            }
            return r;
          } else {
            return compile(element.value);
          }
          break;
        case 'Parens':
          return '(' + compile(element.expression) + ')';
        case 'Identifier':
          if (element.as_arguments) {
            r = '$' + element.name;
          } else {
            r = context.Identify(element.name);
          }
          if (element.passing) {
            r = '&' + r;
          }
          return r;
        case 'Literal':
          if (typeof element.value === 'number') {
            return element.value;
          } else {
            return element.value;
          }
          break;
        case 'Bool':
          if (element.value) {
            return 'TRUE';
          } else {
            return 'FALSE';
          }
          break;
        case 'Null':
          return 'NULL';
        case 'Array':
          r = 'array(';
          _ref2 = element.elements;
          for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
            elem = _ref2[i];
            if (elem.type === 'ArrayKey') {
              r += compile(elem.key) + ' => ' + compile(elem.value);
            } else {
              r += compile(elem);
            }
            if (i !== element.elements.length - 1) {
              r += ', ';
            }
          }
          r += ')';
          return r;
        case 'Call':
          r = compile(element.variable) + '(';
          _ref3 = element["arguments"];
          for (i = _l = 0, _len3 = _ref3.length; _l < _len3; i = ++_l) {
            arg = _ref3[i];
            r += compile(arg);
            if (i !== element["arguments"].length - 1) {
              r += ', ';
            }
          }
          r += ')';
          return r;
        case 'NewCall':
          r = 'new ' + compile(element.variable);
          if (element["arguments"] !== false) {
            r += '(';
            _ref4 = element["arguments"];
            for (i = _m = 0, _len4 = _ref4.length; _m < _len4; i = ++_m) {
              arg = _ref4[i];
              r += compile(arg);
              if (i !== element["arguments"].length - 1) {
                r += ', ';
              }
            }
            r += ')';
          }
          return r;
        case 'Code':
          if (element.normal) {
            r = 'function ' + element.name + '(';
            context.push({
              name: element.name,
              type: 'function'
            });
          } else {
            r = 'function(';
          }
          _ref5 = element.parameters;
          for (i = _n = 0, _len5 = _ref5.length; _n < _len5; i = ++_n) {
            parameter = _ref5[i];
            if (parameter.and === true) {
              r += '&' + compile(parameter);
            } else {
              r += compile(parameter);
            }
            if (i !== element.parameters.length - 1) {
              r += ', ';
            }
          }
          r += ')';
          if (element.body !== false) {
            r += ' {';
            r += compile(element.body);
            r += '}';
          } else {
            r += ';';
          }
          return r;
        case 'Casting':
          if (element.foreach === true) {
            return compile(new nodes.Identifier(element.typec)) + ' => ' + compile(element.variable);
          } else {
            return '(' + element.typec + ') ' + compile(element.variable);
          }
          break;
        case 'Exec':
          return '`' + element.code + '`';
        case 'HereDoc':
          return '<<<EOT\n' + element.doc + '\nEOT';
        case 'Clone':
          return 'clone ' + compile(element.value);
        case 'Operation':
          if (element.operator === '**') {
            r = 'pow(' + compile(element.left) + ', ' + compile(element.right) + ')';
          } else if (element.operator === 'and') {
            r = compile(element.left) + ' & ' + compile(element.right);
          } else if (element.operator === 'or') {
            r = compile(element.left) + ' or ' + compile(element.right);
          } else if (element.operator === '<->') {
            r = compile(element.left) + '.' + compile(element.right);
          } else if (element.operator === '+') {
            UseSuperMammouth = true;
            r = '$Mammouth("+", ' + compile(element.left) + ', ' + compile(element.right) + ')';
          } else {
            r = compile(element.left) + ' ' + element.operator + ' ' + compile(element.right);
          }
          return r;
        case 'Assign':
          r = compile(element.left) + ' ' + element.operator + ' ' + compile(element.right);
          return r;
        case 'GetKeyAssign':
          r = '';
          _ref6 = element.keys;
          for (i = _o = 0, _len6 = _ref6.length; _o < _len6; i = ++_o) {
            key = _ref6[i];
            value = new nodes.Value(element.source.value);
            value.add(new nodes.Access(new nodes.Literal('"' + key.name + '"'), '[]'));
            if (i !== (element.keys.length - 1)) {
              r += compile(new nodes.Expression(new nodes.Assign("=", key, value)));
              r += '\n';
            } else {
              r += compile(new nodes.Assign("=", key, value));
            }
          }
          return r;
        case 'Constant':
          context.push({
            name: compile(element.left),
            type: 'cte'
          });
          return 'const ' + compile(element.left) + ' = ' + compile(element.right);
        case 'Unary':
          r = element.operator;
          r += compile(element.expression);
          return r;
        case 'Update':
          r = compile(element.expression);
          r = !element.prefix ? r + element.operator : element.operator + r;
          return r;
        case 'Existence':
          r = 'isset(' + compile(element.expression) + ')';
          return r;
        case 'In':
          r = '$Mammouth("in_array", ' + compile(element.left) + ', ' + compile(element.right) + ')';
          return r;
        case 'Echo':
          return 'echo ' + compile(element.value);
        case 'Delete':
          return 'unset(' + compile(element.value) + ')';
        case 'Include':
          if (element.once) {
            r = 'include_once ';
          } else {
            r = 'include ';
          }
          r += compile(element.path);
          return r;
        case 'Require':
          if (element.once) {
            r = 'require_once ';
          } else {
            r = 'require ';
          }
          r += compile(element.path);
          return r;
        case 'Break':
          r = 'break';
          if (element.arg !== false) {
            r += ' ' + compile(element.arg);
          }
          return r;
        case 'Continue':
          r = 'continue';
          if (element.arg !== false) {
            r += ' ' + compile(element.arg);
          }
          return r;
        case 'Return':
          return 'return ' + compile(element.value);
        case 'Declare':
          r = 'declare(' + compile(element.expression) + ')';
          if (element.script !== false) {
            r += ' {';
            r += compile(element.script);
            r += '}';
          }
          return r;
        case 'Goto':
          return 'goto ' + element.section;
        case 'If':
          if (element.as_expression) {
            r = compile(element.condition) + ' ? ' + compile(element.body);
            if (element.Elses === false) {
              r += ' : NULL';
            } else {
              r += ' : ' + compile(element.Elses);
            }
            return r;
          } else {
            r = 'if(' + compile(element.condition) + ') {';
            r += compile(element.body);
            r += '}';
            _ref7 = element.Elses;
            for (_p = 0, _len7 = _ref7.length; _p < _len7; _p++) {
              elsei = _ref7[_p];
              if (elsei.type === 'Else') {
                r += ' else {';
                r += compile(elsei.body);
                r += '}';
              } else if (elsei.type === 'ElseIf') {
                r += ' elseif(' + compile(elsei.condition) + ') {';
                r += compile(elsei.body);
                r += '}';
              }
            }
            return r;
          }
          break;
        case 'While':
          r = 'while(' + compile(element.test) + ') {';
          r += compile(element.body);
          r += '}';
          return r;
        case 'DoWhile':
          r = 'do {';
          r += compile(element.body);
          r += '} while (' + compile(element.test) + ');';
          return r;
        case 'Try':
          r = 'try {';
          r += compile(element.TryBody);
          r += '}';
          r += ' catch(Exception ' + compile(element.CatchIdentifier) + ') {';
          r += compile(element.CatchBody);
          r += '}';
          if (element.Finally) {
            r += ' finally {';
            r += compile(element.FinallyBody);
            r += '}';
          }
          return r;
        case 'Switch':
          r = 'switch (' + compile(element.variable) + ') {\n';
          _ref8 = element.cases;
          for (_q = 0, _len8 = _ref8.length; _q < _len8; _q++) {
            Scase = _ref8[_q];
            if (Scase.type === 'When') {
              r += 'case ' + compile(Scase.condition) + ': {';
              r += compile(Scase.body);
              r += '}';
            } else if (Scase.type === 'SwitchElse') {
              r += 'default: {';
              r += compile(Scase.body);
              r += '}';
            }
            r += '\n';
          }
          r += '}';
          return r;
        case 'For':
          if (element.method === 'normal' && element.expressions.length > 1) {
            r = 'for(';
            _ref9 = element.expressions;
            for (i = _r = 0, _len9 = _ref9.length; _r < _len9; i = ++_r) {
              expression = _ref9[i];
              if (expression.type === 'In') {
                expression.each = true;
              }
              r += compile(expression);
              if (i !== element.expressions.length) {
                r += '; ';
              }
            }
            r += ') {';
            r += compile(element.body);
            r += '}';
          } else if (element.method === 'normal' && element.expressions.length === 1 && element.expressions[0].type === 'In') {
            InElement = element.expressions[0];
            r = 'for(';
            ID = IdCounter.get();
            r += compile(ID) + ' = 0; ';
            r += compile(ID) + ' < count(' + compile(InElement.right) + '); ';
            r += compile(ID) + '++';
            r += ') {';
            element.body.nodes.unshift(new nodes.Expression(new nodes.Assign('=', InElement.left, new nodes.Value(InElement.right, [new nodes.Access(ID, '[]')]))));
            r += compile(element.body);
            r += '}';
          } else if (element.method === 'foreach') {
            r = 'foreach(';
            r += compile(element.left);
            r += ' as ';
            r += compile(element.right);
            r += ') {';
            r += compile(element.body);
            r += '}';
          }
          return r;
        case 'Section':
          return element.name + ':';
        case 'Class':
          r = 'class ' + element.name;
          context.push({
            name: element.name,
            type: 'class'
          });
          if (element.abstract === true) {
            r = 'abstract ' + r;
          }
          if (element.extendable !== false) {
            r += ' extends ' + element.extendable;
          }
          if (element.implement !== false) {
            r += ' implements ' + element.implement;
          }
          r += ' {\n';
          _ref10 = element.body;
          for (i = _s = 0, _len10 = _ref10.length; _s < _len10; i = ++_s) {
            line = _ref10[i];
            lr = '';
            if (line.visibility !== false) {
              lr += line.visibility + ' ';
            }
            if (line.statically !== false) {
              lr += line.statically + ' ';
            }
            lr += compile(line.element);
            if (line.finaly === true) {
              lr = 'final ' + lr;
            }
            if (line.abstract === true) {
              lr = 'abstract ' + lr;
            }
            r += lr;
            if (i !== (element.body.length - 1)) {
              r += '\n';
            }
          }
          r += '\n}';
          return r;
        case 'Interface':
          r = 'interface ' + element.name;
          context.push({
            name: element.name,
            type: 'interface'
          });
          if (element.extendable !== false) {
            r += ' extends ';
            _ref11 = element.extendable;
            for (i = _t = 0, _len11 = _ref11.length; _t < _len11; i = ++_t) {
              ext = _ref11[i];
              r += ext;
              if (i !== (element.extendable.length - 1)) {
                r += ', ';
              }
            }
          }
          r += ' {\n';
          _ref12 = element.body;
          for (i = _u = 0, _len12 = _ref12.length; _u < _len12; i = ++_u) {
            line = _ref12[i];
            lr = '';
            if (line.type === 'Code') {
              lr += 'public ' + compile(line);
            } else {
              lr += compile(line);
            }
            r += lr;
            if (i !== (element.body.length - 1)) {
              r += '\n';
            }
          }
          return r += '\n}';
        case 'Namespace':
          r = 'namespace ' + element.name;
          if (element.body !== false) {
            r += ' {';
            r += compile(element.body);
            r += '}';
          }
          return r;
        case 'NamespaceRef':
          return element.path;
      }
    };
    for (_i = 0, _len = tree.length; _i < _len; _i++) {
      doc = tree[_i];
      switch (doc.type) {
        case 'PlainBlock':
          ADD(doc.toPHP());
          break;
        case 'MammouthBlock':
          ADD('<?php' + compile(doc.body) + '?>');
      }
    }
    return php;
  };

}).call(this);
return module.exports;})();
require["./mammouth"] = (function() {var exports = {}, module = {exports: exports};// Generated by CoffeeScript 1.7.1
(function() {
  var PreContext, lexer, parser, rewriter, yy;

  yy = require('./nodes');

  parser = require('./parser').parser;

  lexer = require('./lexer');

  rewriter = require('./rewriter');

  PreContext = require('./context').PreContext;

  parser.lexer = lexer;

  parser.yy = yy;

  module.exports = {
    VERSION: '2.0.0',
    parser: parser,
    parse: function(code) {
      return this.parser.parse(code);
    },
    compile: function(code, context) {
      var result, tree;
      tree = this.parse(code);
      return result = rewriter.rewrite(tree, context ? context : PreContext);
    }
  };

}).call(this);
return module.exports;})();
mammouth = require["./mammouth"];
return require["./mammouth"];
}(this));