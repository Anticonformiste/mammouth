{"name":"Mammouth","tagline":"Unfancy PHP","body":"# Mammouth - Unfancy PHP #\r\nMammouth is a small language that compiles into PHP, inspired by CoffeeScript. It's compiled to PHP codes/files that you can run in your PHP server.\r\n\r\n## Installation ##\r\nVia npm:\r\n```\r\nnpm install mammouth\r\n```\r\n\r\n## Usage ##\r\nOnce installed, you should have access to the coffee command, which can execute scripts, compile `.mammouth` files into `.php`. The coffee command takes the following options: \r\n```\r\nUsage: mammouth [options] [dir|file ...]\r\n\r\nOptions:\r\n  -c, --compile        Compile a \".mammouth\"  or  into a .php file of the same name(can compiles a folder).\r\n  -o, --output [DIR]   Write out all compiled PHP files into the specified directory. Use in conjunction with --compile\r\n\r\nExamples:\r\n\r\n  # Compile 'codes.mammouth' to 'codes.php' in the same folder\r\n  $ mammouth --compile codes.mammouth\r\n\r\n  # Compile all mammouth files in 'codes' folder to 'result' folder\r\n  $ mammouth --compile --output /result /codes\r\n```\r\n\r\nYou can compile mammouth script from browser by adding `mammouth.js` in `/extras` to your html page, and call compile function:\r\n```javascript\r\nmammouth.compile(\"<your mammouth code as string>\"); //return PHP result\r\n```\r\n\r\nAs node module, you can use the following code:\r\n```javascript\r\nmammouth = require('mammouth');\r\nmammouth.compile(\"<your mammouth code as string>\"); //return PHP result\r\n```\r\n\r\n## Syntax ##\r\n###Basic Mammouth Syntax###\r\nA mammouth script can be placed anywhere in the document.\r\nA mammouth script starts with `{{` and ends with `}}`:\r\n```\r\n{{\r\n// Mammouth script\r\n}}\r\n```\r\nfor example is converted to `<?php ?>`\r\nThe default file extension for PHP files is `.mammouth`, but you can use `.mmt`.\r\nA mammouth file normally contains HTML tags, and some mammouth scripting code.\r\n\r\nBelow, we have an example of a simple mammouth file, with a mammouth script that sends the text \"Hello World!\" back to the browser:\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<body>\r\n\r\n<h1>My first mammouth page</h1>\r\n\r\n{{\r\necho(\"Hello World!\")\r\n}}\r\n\r\n</body>\r\n</html> \r\n```\r\nThis example is compiled to:\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <body>\r\n    <h1>My first mammouth page</h1>\r\n<?php\r\necho(\"Hello World!\");\r\n?>\r\n  </body>\r\n</html> \r\n```\r\n\r\n###Variables###\r\nIn PHP, a variable starts with the $ sign, followed by the name of the variable, but in mammouth variable is like Javascript:\r\n```\r\n{{\r\nvariable1 = true\r\nnumber1 = 10\r\nnumber2 = 1\r\nvariable2 = (number2-15)/number1\r\n}}\r\n```\r\nThe result will be:\r\n```html\r\n<?php \r\n$variable1 = true;\r\n$number1 = 10;\r\n$number2 = 1;\r\n$variable2 = ($number2 - 15) / $number1;\r\n?>\r\n```\r\nVariable can not take the current name: `and`, `breal`, `case`, `else`, `false`, `true`, `for`, `if`, `in`, `new`, `null`, `of`, `or`, `switch`, `then`, `this` and `while`.\r\n\r\n##Change Log##\r\n**0.1.0** -12/08/2013\r\nThe initial version of Mammouth","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}