// Generated by CoffeeScript 1.10.0
(function() {
  var Context, IndexGenerator, Name, Scope, nodes;

  nodes = require('./nodes');

  exports.Name = Name = (function() {
    function Name(name1, type) {
      this.name = name1;
      this.type = type != null ? type : 'variable';
    }

    return Name;

  })();

  exports.Scope = Scope = (function() {
    function Scope() {
      this.names = {};
    }

    Scope.prototype.has = function(name) {
      return this.names[name] != null;
    };

    Scope.prototype.add = function(name) {
      return this.names[name.name] = name;
    };

    Scope.prototype.get = function(name) {
      return this.names[name];
    };

    Scope.prototype["delete"] = function() {
      return delete this.names[name.name];
    };

    return Scope;

  })();

  exports.Context = Context = (function() {
    function Context(scope) {
      this.indexGen = new IndexGenerator;
      this.scopes = [];
      this.scopes.unshift(scope);
    }

    Context.prototype.push = function(name) {
      return this.scopes[0].add(name);
    };

    Context.prototype.has = function(name) {
      var j, len, ref, scope;
      ref = this.scopes;
      for (j = 0, len = ref.length; j < len; j++) {
        scope = ref[j];
        if (scope.has(name)) {
          return true;
        }
      }
      return false;
    };

    Context.prototype.scopeStarts = function() {
      return this.scopes.unshift(new Scope);
    };

    Context.prototype.scopeEnds = function() {
      return this.scopes.shift();
    };

    Context.prototype.Identify = function(name) {
      var j, len, ref, ref1, scope;
      ref = this.scopes;
      for (j = 0, len = ref.length; j < len; j++) {
        scope = ref[j];
        if (scope.has(name)) {
          if ((ref1 = scope.get(name).type) === 'function' || ref1 === 'const' || ref1 === 'class' || ref1 === 'interface') {
            return name;
          } else {
            return '$' + name;
          }
        }
      }
      return '$' + name;
    };

    Context.prototype.free = function(name) {
      var i, next;
      if (name === 'i') {
        next = this.indexGen.get();
        while (this.has(next)) {
          next = this.indexGen.get();
        }
        this.push(new Name(next));
        return next;
      } else {
        i = 0;
        while (true) {
          if (!this.has(name + (i === 0 ? '' : i))) {
            this.push(new Name(name + (i === 0 ? '' : i)));
            return name + (i === 0 ? '' : i);
          }
          i++;
        }
      }
    };

    return Context;

  })();

  exports.IndexGenerator = IndexGenerator = (function() {
    function IndexGenerator() {}

    IndexGenerator.prototype.letter = ['i', 'j', 'k', 'c', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'j', 'h'];

    IndexGenerator.prototype._level = 0;

    IndexGenerator.prototype.letterLevel = 0;

    IndexGenerator.prototype.generateAtLevel = function() {
      var i, r;
      r = '';
      i = 0;
      while (i < this._level) {
        r += '_';
        i++;
      }
      return r;
    };

    IndexGenerator.prototype.next = function() {
      if ((this.letterLevel + 1) === this.letter.length) {
        this._level++;
        return this.letterLevel = 0;
      } else {
        return this.letterLevel++;
      }
    };

    IndexGenerator.prototype.get = function() {
      var r;
      r = this.generateAtLevel() + this.letter[this.letterLevel];
      this.next();
      return r;
    };

    return IndexGenerator;

  })();

}).call(this);
