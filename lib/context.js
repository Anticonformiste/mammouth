// Generated by CoffeeScript 1.9.3
(function() {
  var Context, IndexGenerator, Name, Scope, nodes;

  nodes = require('./nodes');

  IndexGenerator = require('./utils').IndexGenerator;

  exports.Name = Name = (function() {
    function Name(name1, type) {
      this.name = name1;
      this.type = type != null ? type : 'variable';
    }

    return Name;

  })();

  exports.Scope = Scope = (function() {
    function Scope() {
      this.names = {};
    }

    Scope.prototype.has = function(name) {
      return this.names[name] != null;
    };

    Scope.prototype.add = function(name) {
      return this.names[name.name] = name;
    };

    Scope.prototype.get = function(name) {
      return this.names[name];
    };

    Scope.prototype["delete"] = function() {
      return delete this.names[name.name];
    };

    return Scope;

  })();

  exports.Context = Context = (function() {
    function Context(scope) {
      this.indexGen = new IndexGenerator;
      this.scopes = [];
      this.scopes.unshift(scope);
    }

    Context.prototype.push = function(name) {
      return this.scopes[0].add(name);
    };

    Context.prototype.has = function(name) {
      var j, len, ref, scope;
      ref = this.scopes;
      for (j = 0, len = ref.length; j < len; j++) {
        scope = ref[j];
        if (scope.has(name)) {
          return true;
        }
      }
      return false;
    };

    Context.prototype.scopeStarts = function() {
      return this.scopes.unshift(new Scope);
    };

    Context.prototype.scopeEnds = function() {
      return this.scopes.shift();
    };

    Context.prototype.Identify = function(name) {
      var j, len, ref, ref1, scope;
      ref = this.scopes;
      for (j = 0, len = ref.length; j < len; j++) {
        scope = ref[j];
        if (scope.has(name)) {
          if ((ref1 = scope.get(name).type) === 'function' || ref1 === 'const' || ref1 === 'class' || ref1 === 'interface') {
            return name;
          } else {
            return '$' + name;
          }
        }
      }
      return '$' + name;
    };

    Context.prototype.free = function(name) {
      var i, next;
      if (name === 'i') {
        next = this.indexGen.next;
        while (!this.has(new Name(next.name))) {
          next = this.indexGen.next;
        }
        return next;
      } else {
        i = 0;
        while (true) {
          if (!this.has(name + (i === 0 ? '' : i))) {
            return new nodes.Identifier(name + (i === 0 ? '' : i));
          }
          i++;
        }
      }
    };

    return Context;

  })();

}).call(this);
