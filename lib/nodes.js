// Generated by CoffeeScript 1.9.3
(function() {
  exports.Document = (function() {
    function Document(sections) {
      this.type = 'Document';
      this.sections = sections;
    }

    return Document;

  })();

  exports.RawText = (function() {
    function RawText(text) {
      if (text == null) {
        text = '';
      }
      this.type = 'RawText';
      this.text = text;
    }

    return RawText;

  })();

  exports.Script = (function() {
    function Script(block) {
      this.type = 'Script';
      this.body = block;
    }

    return Script;

  })();

  exports.Block = (function() {
    function Block(instructions) {
      if (instructions == null) {
        instructions = [];
      }
      this.type = 'Block';
      this.body = instructions;
    }

    return Block;

  })();

  exports.Value = (function() {
    function Value(value, properties) {
      if (properties == null) {
        properties = [];
      }
      this.type = 'Value';
      this.value = value;
      this.properties = properties;
    }

    Value.prototype.add = function(prop) {
      return this.properties.push(prop);
    };

    return Value;

  })();

  exports.Identifier = (function() {
    function Identifier(name) {
      this.type = 'Identifier';
      this.name = name;
    }

    return Identifier;

  })();

  exports.Literal = (function() {
    function Literal(raw) {
      this.type = 'Literal';
      this.value = eval(raw);
      this.raw = raw;
    }

    return Literal;

  })();

  exports.Access = (function() {
    function Access(value, method) {
      if (method == null) {
        method = ".";
      }
      this.type = 'Access';
      this.value = value;
      this.method = method;
    }

    return Access;

  })();

  exports.Array = (function() {
    function Array(elements) {
      if (elements == null) {
        elements = [];
      }
      this.type = 'Array';
      this.elements = elements;
    }

    return Array;

  })();

  exports.ArrayKey = (function() {
    function ArrayKey(key, value) {
      this.type = 'ArrayKey';
      this.key = key;
      this.value = value;
    }

    return ArrayKey;

  })();

  exports.Parens = (function() {
    function Parens(expression) {
      this.type = 'Parens';
      this.expression = expression;
    }

    return Parens;

  })();

  exports.typeCasting = (function() {
    function typeCasting(expression, ctype) {
      this.type = 'typeCasting';
      this.expression = expression;
      this.ctype = ctype;
    }

    return typeCasting;

  })();

  exports.Clone = (function() {
    function Clone(expression) {
      this.type = 'Clone';
      this.expression = expression;
    }

    return Clone;

  })();

  exports.Call = (function() {
    function Call(callee, args) {
      if (args == null) {
        args = [];
      }
      this.type = 'Call';
      this.callee = callee;
      this["arguments"] = args;
    }

    return Call;

  })();

  exports.NewExpression = (function() {
    function NewExpression(callee, args) {
      if (args == null) {
        args = [];
      }
      this.type = 'NewExpression';
      this.callee = callee;
      this["arguments"] = args;
    }

    return NewExpression;

  })();

  exports.Existence = (function() {
    function Existence(value) {
      this.type = 'Existence';
      this.value = value;
    }

    return Existence;

  })();

  exports.Assign = (function() {
    function Assign(operator, left, right) {
      this.type = 'Assign';
      this.operator = operator;
      this.left = left;
      this.right = right;
    }

    return Assign;

  })();

  exports.Unary = (function() {
    function Unary(operator, expression) {
      this.type = 'Unary';
      this.operator = operator;
      this.expression = expression;
    }

    return Unary;

  })();

  exports.Update = (function() {
    function Update(operator, expression, prefix) {
      if (prefix == null) {
        prefix = true;
      }
      this.type = 'Update';
      this.operator = operator;
      this.expression = expression;
      this.prefix = prefix;
    }

    return Update;

  })();

  exports.Operation = (function() {
    function Operation(operator, left, right) {
      this.type = 'Operation';
      this.operator = operator;
      this.left = left;
      this.right = right;
    }

    return Operation;

  })();

  exports.Code = (function() {
    function Code(parameters, body, asStatement, name) {
      if (asStatement == null) {
        asStatement = false;
      }
      if (name == null) {
        name = null;
      }
      this.type = 'Code';
      this.parameters = parameters;
      this.body = body;
      this.asStatement = asStatement;
      this.name = name;
    }

    return Code;

  })();

  exports.Param = (function() {
    function Param(name, passing, hasDefault, def) {
      if (passing == null) {
        passing = false;
      }
      if (hasDefault == null) {
        hasDefault = false;
      }
      if (def == null) {
        def = null;
      }
      this.type = 'Param';
      this.name = name;
      this.passing = passing;
      this.hasDefault = hasDefault;
      this["default"] = def;
    }

    return Param;

  })();

  exports.If = (function() {
    function If(condition, body) {
      this.type = 'If';
      this.condition = condition;
      this.body = body;
      this.elses = [];
    }

    If.prototype.addElse = function(element) {
      return this.elses.push(element);
    };

    return If;

  })();

  exports.ElseIf = (function() {
    function ElseIf(condition, body) {
      this.type = 'ElseIf';
      this.condition = condition;
      this.body = body;
    }

    return ElseIf;

  })();

  exports.Else = (function() {
    function Else(body) {
      this.type = 'Else';
      this.body = body;
    }

    return Else;

  })();

}).call(this);
