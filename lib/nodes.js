// Generated by CoffeeScript 1.7.1
(function() {
  var Access, Array, ArrayKey, Assign, Block, Bool, Break, Call, Casting, Class, ClassLine, Clone, Code, Constant, Continue, Declare, Delete, DoWhile, Echo, Else, ElseIf, Exec, Existence, Expression, For, GetKeyAssign, Goto, HereDoc, Identifier, If, In, Include, Interface, Literal, MammouthBlock, Namespace, NamespaceRef, NewCall, Operation, Parens, PlainBlock, Require, Return, Section, Switch, SwitchElse, Try, Unary, Update, Value, When, While;

  exports.PlainBlock = PlainBlock = (function() {
    function PlainBlock(text) {
      this.text = text;
      this.type = 'PlainBlock';
    }

    PlainBlock.prototype.toPHP = function() {
      return this.text;
    };

    return PlainBlock;

  })();

  exports.MammouthBlock = MammouthBlock = (function() {
    function MammouthBlock(body) {
      this.body = body;
      this.type = 'MammouthBlock';
    }

    return MammouthBlock;

  })();

  exports.Block = Block = (function() {
    function Block(nodes) {
      this.nodes = nodes;
      this.type = 'Block';
    }

    return Block;

  })();

  exports.Expression = Expression = (function() {
    function Expression(expression) {
      this.expression = expression;
      this.type = 'Expression';
    }

    return Expression;

  })();

  exports.Value = Value = (function() {
    function Value(value, properties) {
      this.value = value;
      this.properties = properties != null ? properties : [];
      this.type = 'Value';
    }

    Value.prototype.add = function(prop) {
      return this.properties.push(prop);
    };

    return Value;

  })();

  exports.Access = Access = (function() {
    function Access(value, method) {
      this.value = value;
      this.method = method != null ? method : ".";
      this.type = 'Access';
    }

    return Access;

  })();

  exports.Parens = Parens = (function() {
    function Parens(expression) {
      this.expression = expression;
      this.type = 'Parens';
    }

    return Parens;

  })();

  exports.Identifier = Identifier = (function() {
    function Identifier(name, as_arguments, passing) {
      this.name = name;
      this.as_arguments = as_arguments != null ? as_arguments : false;
      this.passing = passing != null ? passing : false;
      this.type = 'Identifier';
    }

    return Identifier;

  })();

  exports.Literal = Literal = (function() {
    function Literal(value) {
      this.value = value;
      this.type = 'Literal';
    }

    return Literal;

  })();

  exports.Bool = Bool = (function() {
    function Bool(value) {
      this.value = value;
      this.type = 'Bool';
    }

    return Bool;

  })();

  exports.Null = (function() {
    function _Class() {
      this.type = 'Null';
    }

    return _Class;

  })();

  exports.Array = Array = (function() {
    function Array(elements) {
      this.elements = elements != null ? elements : [];
      this.type = 'Array';
    }

    return Array;

  })();

  exports.ArrayKey = ArrayKey = (function() {
    function ArrayKey(key, value) {
      this.key = key;
      this.value = value;
      this.type = 'ArrayKey';
    }

    return ArrayKey;

  })();

  exports.Call = Call = (function() {
    function Call(variable, _arguments) {
      this.variable = variable;
      this["arguments"] = _arguments != null ? _arguments : [];
      this.type = 'Call';
    }

    return Call;

  })();

  exports.NewCall = NewCall = (function() {
    function NewCall(variable, _arguments) {
      this.variable = variable;
      this["arguments"] = _arguments != null ? _arguments : false;
      this.type = 'NewCall';
    }

    return NewCall;

  })();

  exports.Code = Code = (function() {
    function Code(parameters, body, normal, name) {
      this.parameters = parameters;
      this.body = body;
      this.normal = normal != null ? normal : false;
      this.name = name != null ? name : null;
      this.type = 'Code';
    }

    return Code;

  })();

  exports.Casting = Casting = (function() {
    function Casting(variable, typec) {
      this.variable = variable;
      this.typec = typec;
      this.type = 'Casting';
    }

    return Casting;

  })();

  exports.Exec = Exec = (function() {
    function Exec(code) {
      this.type = 'Exec';
      if (code[0] === "'") {
        this.code = code.replace(/\'/g, '');
      } else if (code[0] === '"') {
        this.code = code.replace(/\"/, '');
      }
    }

    return Exec;

  })();

  exports.HereDoc = HereDoc = (function() {
    function HereDoc(doc) {
      this.doc = doc;
      this.type = 'HereDoc';
    }

    return HereDoc;

  })();

  exports.Clone = Clone = (function() {
    function Clone(value) {
      this.value = value;
      this.type = 'Clone';
    }

    return Clone;

  })();

  exports.Assign = Assign = (function() {
    function Assign(operator, left, right) {
      this.operator = operator;
      this.left = left;
      this.right = right;
      this.type = 'Assign';
    }

    return Assign;

  })();

  exports.GetKeyAssign = GetKeyAssign = (function() {
    function GetKeyAssign(keys, source) {
      this.keys = keys;
      this.source = source;
      this.type = 'GetKeyAssign';
    }

    return GetKeyAssign;

  })();

  exports.Constant = Constant = (function() {
    function Constant(left, right) {
      this.left = left;
      this.right = right;
      this.type = 'Constant';
    }

    return Constant;

  })();

  exports.Unary = Unary = (function() {
    function Unary(operator, expression) {
      this.operator = operator;
      this.expression = expression;
      this.type = 'Unary';
    }

    return Unary;

  })();

  exports.Update = Update = (function() {
    function Update(operator, expression, prefix) {
      this.operator = operator;
      this.expression = expression;
      this.prefix = prefix != null ? prefix : true;
      this.type = 'Update';
    }

    return Update;

  })();

  exports.Existence = Existence = (function() {
    function Existence(expression) {
      this.expression = expression;
      this.type = 'Existence';
    }

    return Existence;

  })();

  exports.Operation = Operation = (function() {
    function Operation(operator, left, right) {
      this.operator = operator;
      this.left = left;
      this.right = right;
      this.type = 'Operation';
    }

    return Operation;

  })();

  exports.In = In = (function() {
    function In(left, right) {
      this.left = left;
      this.right = right;
      this.type = 'In';
    }

    return In;

  })();

  exports.Echo = Echo = (function() {
    function Echo(value) {
      this.value = value;
      this.type = 'Echo';
    }

    return Echo;

  })();

  exports.Delete = Delete = (function() {
    function Delete(value) {
      this.value = value;
      this.type = 'Delete';
    }

    return Delete;

  })();

  exports.Include = Include = (function() {
    function Include(path, once) {
      this.path = path;
      this.once = once;
      this.type = 'Include';
    }

    return Include;

  })();

  exports.Require = Require = (function() {
    function Require(path, once) {
      this.path = path;
      this.once = once;
      this.type = 'Require';
    }

    return Require;

  })();

  exports.Break = Break = (function() {
    function Break(arg) {
      this.arg = arg != null ? arg : false;
      this.type = 'Break';
    }

    return Break;

  })();

  exports.Continue = Continue = (function() {
    function Continue(arg) {
      this.arg = arg != null ? arg : false;
      this.type = 'Continue';
    }

    return Continue;

  })();

  exports.Return = Return = (function() {
    function Return(value) {
      this.value = value;
      this.type = 'Return';
    }

    return Return;

  })();

  exports.Declare = Declare = (function() {
    function Declare(expression, script) {
      this.expression = expression;
      this.script = script != null ? script : false;
      this.type = 'Declare';
    }

    return Declare;

  })();

  exports.Goto = Goto = (function() {
    function Goto(section) {
      this.section = section;
      this.type = 'Goto';
    }

    return Goto;

  })();

  exports.If = If = (function() {
    function If(condition, body, as_expression) {
      this.condition = condition;
      this.body = body;
      this.as_expression = as_expression != null ? as_expression : false;
      this.type = 'If';
      if (!this.as_expression) {
        this.Elses = [];
      } else {
        this.Elses = false;
      }
    }

    If.prototype.addElse = function(element) {
      return this.Elses.push(element);
    };

    return If;

  })();

  exports.ElseIf = ElseIf = (function() {
    function ElseIf(condition, body) {
      this.condition = condition;
      this.body = body;
      this.type = 'ElseIf';
    }

    return ElseIf;

  })();

  exports.Else = Else = (function() {
    function Else(body) {
      this.body = body;
      this.type = 'Else';
    }

    return Else;

  })();

  exports.While = While = (function() {
    function While(test, body) {
      this.test = test;
      this.body = body;
      this.type = 'While';
    }

    return While;

  })();

  exports.DoWhile = DoWhile = (function() {
    function DoWhile(test, body) {
      this.test = test;
      this.body = body;
      this.type = 'DoWhile';
    }

    return DoWhile;

  })();

  exports.Try = Try = (function() {
    function Try(TryBody, CatchIdentifier, CatchBody, Finally) {
      this.TryBody = TryBody;
      this.CatchIdentifier = CatchIdentifier;
      this.CatchBody = CatchBody;
      this.Finally = Finally != null ? Finally : false;
      this.type = 'Try';
    }

    Try.prototype.addFinally = function(body) {
      this.Finally = true;
      return this.FinallyBody = body;
    };

    return Try;

  })();

  exports.Switch = Switch = (function() {
    function Switch(variable, cases) {
      this.variable = variable;
      this.cases = cases;
      this.type = 'Switch';
    }

    return Switch;

  })();

  exports.When = When = (function() {
    function When(condition, body) {
      this.condition = condition;
      this.body = body;
      this.type = 'When';
    }

    return When;

  })();

  exports.SwitchElse = SwitchElse = (function() {
    function SwitchElse(body) {
      this.body = body;
      this.type = 'SwitchElse';
    }

    return SwitchElse;

  })();

  exports.For = For = (function() {
    function For() {
      this.type = 'For';
      if (arguments[0] === 'normal') {
        this.method = 'normal';
        this.expressions = arguments[1];
        this.body = arguments[2];
      } else if (arguments[0] === 'foreach') {
        this.method = 'foreach';
        this.left = arguments[1];
        this.right = arguments[2];
        this.body = arguments[3];
      }
    }

    return For;

  })();

  exports.Section = Section = (function() {
    function Section(name) {
      this.name = name;
      this.type = 'Section';
    }

    return Section;

  })();

  exports.Class = Class = (function() {
    function Class(name, body, extendable, implement, abstract) {
      this.name = name;
      this.body = body;
      this.extendable = extendable != null ? extendable : false;
      this.implement = implement != null ? implement : false;
      this.abstract = abstract != null ? abstract : false;
      this.type = "Class";
    }

    return Class;

  })();

  exports.ClassLine = ClassLine = (function() {
    function ClassLine(visibility, statically, element) {
      this.visibility = visibility;
      this.statically = statically;
      this.element = element;
      this.type = 'ClassLine';
      this.abstract = false;
    }

    return ClassLine;

  })();

  exports.Interface = Interface = (function() {
    function Interface(name, body, extendable) {
      this.name = name;
      this.body = body;
      this.extendable = extendable != null ? extendable : false;
      this.type = "Interface";
    }

    return Interface;

  })();

  exports.Namespace = Namespace = (function() {
    function Namespace(name, body) {
      this.name = name;
      this.body = body != null ? body : false;
      this.type = 'Namespace';
    }

    return Namespace;

  })();

  exports.NamespaceRef = NamespaceRef = (function() {
    function NamespaceRef(path) {
      this.path = path;
      this.type = 'NamespaceRef';
    }

    return NamespaceRef;

  })();

}).call(this);
