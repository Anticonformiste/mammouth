// Generated by CoffeeScript 1.7.1
(function() {
  var Access, Array, ArrayKey, Assign, BlankLine, Block, Bool, BreakStatement, Call, Code, Constant, ContinueStatement, EchoStatement, Existence, Expression, Identifier, If, IncludeStatement, Literal, MammouthBlock, Operation, Parens, PassingIdentifier, PlainBlock, RequireStatement, ReturnStatement, Unary, Update, Value, While;

  exports.PlainBlock = PlainBlock = (function() {
    function PlainBlock(text) {
      this.text = text;
      this.type = 'PlainBlock';
    }

    PlainBlock.prototype.toPHP = function() {
      return this.text;
    };

    return PlainBlock;

  })();

  exports.MammouthBlock = MammouthBlock = (function() {
    function MammouthBlock(body) {
      this.body = body;
      this.type = 'MammouthBlock';
    }

    return MammouthBlock;

  })();

  exports.Block = Block = (function() {
    function Block(nodes) {
      this.nodes = nodes;
      this.type = 'Block';
    }

    return Block;

  })();

  exports.Expression = Expression = (function() {
    function Expression(expression) {
      this.expression = expression;
      this.type = 'Expression';
    }

    return Expression;

  })();

  exports.BlankLine = BlankLine = (function() {
    function BlankLine() {
      this.type = 'BlankLine';
    }

    return BlankLine;

  })();

  exports.Value = Value = (function() {
    function Value(value, properties) {
      this.value = value;
      this.properties = properties != null ? properties : [];
      this.type = 'Value';
    }

    Value.prototype.add = function(prop) {
      return this.properties.push(prop);
    };

    return Value;

  })();

  exports.Access = Access = (function() {
    function Access(value, method) {
      this.value = value;
      this.method = method != null ? method : ".";
      this.type = 'Access';
    }

    return Access;

  })();

  exports.Parens = Parens = (function() {
    function Parens(expression) {
      this.expression = expression;
      this.type = 'Parens';
    }

    return Parens;

  })();

  exports.Identifier = Identifier = (function() {
    function Identifier(name) {
      this.name = name;
      this.type = 'Identifier';
    }

    return Identifier;

  })();

  exports.PassingIdentifier = PassingIdentifier = (function() {
    function PassingIdentifier(name) {
      this.name = name;
      this.type = 'PassingIdentifier';
    }

    return PassingIdentifier;

  })();

  exports.Literal = Literal = (function() {
    function Literal(value) {
      this.value = value;
      this.type = 'Literal';
    }

    return Literal;

  })();

  exports.Bool = Bool = (function() {
    function Bool(value) {
      this.value = value;
      this.type = 'Bool';
    }

    return Bool;

  })();

  exports.Array = Array = (function() {
    function Array(elements) {
      this.elements = elements != null ? elements : [];
      this.type = 'Array';
    }

    return Array;

  })();

  exports.ArrayKey = ArrayKey = (function() {
    function ArrayKey(key, value) {
      this.key = key;
      this.value = value;
      this.type = 'ArrayKey';
    }

    return ArrayKey;

  })();

  exports.Call = Call = (function() {
    function Call(variable, _arguments) {
      this.variable = variable;
      this["arguments"] = _arguments != null ? _arguments : [];
      this.type = 'Call';
    }

    return Call;

  })();

  exports.Code = Code = (function() {
    function Code(parameters, body, normal, name) {
      this.parameters = parameters;
      this.body = body;
      this.normal = normal != null ? normal : false;
      this.name = name != null ? name : null;
      this.type = 'Code';
    }

    return Code;

  })();

  exports.Assign = Assign = (function() {
    function Assign(operator, left, right) {
      this.operator = operator;
      this.left = left;
      this.right = right;
      this.type = 'Assign';
    }

    return Assign;

  })();

  exports.Constant = Constant = (function() {
    function Constant(left, right) {
      this.left = left;
      this.right = right;
      this.type = 'Constant';
    }

    return Constant;

  })();

  exports.Unary = Unary = (function() {
    function Unary(operator, expression) {
      this.operator = operator;
      this.expression = expression;
      this.type = 'Unary';
    }

    return Unary;

  })();

  exports.Update = Update = (function() {
    function Update(operator, expression, prefix) {
      this.operator = operator;
      this.expression = expression;
      this.prefix = prefix != null ? prefix : true;
      this.type = 'Update';
    }

    return Update;

  })();

  exports.Existence = Existence = (function() {
    function Existence(expression) {
      this.expression = expression;
      this.type = 'Existence';
    }

    return Existence;

  })();

  exports.Operation = Operation = (function() {
    function Operation(operator, left, right) {
      this.operator = operator;
      this.left = left;
      this.right = right;
      this.type = 'Operation';
    }

    return Operation;

  })();

  exports.EchoStatement = EchoStatement = (function() {
    function EchoStatement(expression) {
      this.expression = expression;
      this.type = 'EchoStatement';
    }

    return EchoStatement;

  })();

  exports.ReturnStatement = ReturnStatement = (function() {
    function ReturnStatement(expression) {
      this.expression = expression != null ? expression : null;
      this.type = 'ReturnStatement';
    }

    return ReturnStatement;

  })();

  exports.BreakStatement = BreakStatement = (function() {
    function BreakStatement(expression) {
      this.expression = expression != null ? expression : null;
      this.type = 'BreakStatement';
    }

    return BreakStatement;

  })();

  exports.ContinueStatement = ContinueStatement = (function() {
    function ContinueStatement(expression) {
      this.expression = expression != null ? expression : null;
      this.type = 'ContinueStatement';
    }

    return ContinueStatement;

  })();

  exports.IncludeStatement = IncludeStatement = (function() {
    function IncludeStatement(expression, once) {
      this.expression = expression;
      this.once = once != null ? once : false;
      this.type = 'IncludeStatement';
    }

    return IncludeStatement;

  })();

  exports.RequireStatement = RequireStatement = (function() {
    function RequireStatement(expression, once) {
      this.expression = expression;
      this.once = once != null ? once : false;
      this.type = 'RequireStatement';
    }

    return RequireStatement;

  })();

  exports.If = If = (function() {
    function If(condition, body, expression) {
      this.condition = condition;
      this.body = body;
      this.expression = expression != null ? expression : false;
      this.type = 'If';
      this.Elses = [];
    }

    If.prototype.addElse = function(body) {
      return this.Elses.push({
        type: 'Else',
        body: body
      });
    };

    If.prototype.addElseIf = function(condition, body) {
      return this.Elses.push({
        type: 'ElseIf',
        condition: condition,
        body: body
      });
    };

    return If;

  })();

  exports.While = While = (function() {
    function While(condition, body) {
      this.condition = condition;
      this.body = body;
      this.type = 'While';
    }

    return While;

  })();

}).call(this);
