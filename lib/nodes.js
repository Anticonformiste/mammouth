// Generated by CoffeeScript 1.10.0
(function() {
  var Access, Array, ArrayKey, Assign, Base, Block, Break, Call, Class, ClassLine, Clone, Code, Constant, Context, Continue, Declare, Delete, Document, Echo, Else, ElseIf, Existence, Expression, For, GetKeyAssign, Goto, HereDoc, Identifier, If, Include, Interface, Literal, Namespace, NewExpression, Operation, Param, Parens, QualifiedName, Range, RawText, Require, Return, Script, Section, Slice, Switch, Throw, Try, Unary, Update, Value, While, mammouthFunction, typeCasting,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Context = require('./context');

  Base = (function() {
    function Base() {}

    Base.prototype.prepare = function() {
      return this;
    };

    Base.prototype.compile = function() {};

    return Base;

  })();

  Document = exports.Document = (function(superClass) {
    extend(Document, superClass);

    function Document(sections) {
      this.type = 'Document';
      this.sections = sections;
    }

    Document.prototype.prepare = function() {
      return this;
    };

    Document.prototype.compile = function(system) {
      var code, j, len1, ref, section;
      code = '';
      ref = this.sections;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        section = ref[j];
        code += section.prepare(system).compile(system);
      }
      if (system.config.addMammouth) {
        code = mammouthFunction + code;
      }
      return code;
    };

    return Document;

  })(Base);

  RawText = exports.RawText = (function(superClass) {
    extend(RawText, superClass);

    function RawText(text) {
      if (text == null) {
        text = '';
      }
      this.type = 'RawText';
      this.text = text;
    }

    RawText.prototype.compile = function() {
      return this.text;
    };

    return RawText;

  })(Base);

  Script = exports.Script = (function(superClass) {
    extend(Script, superClass);

    function Script(block) {
      this.type = 'Script';
      this.body = block;
    }

    Script.prototype.prepare = function() {
      this.body.braces = false;
      return this;
    };

    Script.prototype.compile = function(system) {
      var code;
      code = '<?php';
      code += this.body.prepare(system).compile(system);
      code += '?>';
      return code;
    };

    return Script;

  })(Base);

  Block = exports.Block = (function(superClass) {
    extend(Block, superClass);

    function Block(instructions) {
      if (instructions == null) {
        instructions = [];
      }
      this.type = 'Block';
      this.body = instructions;
      this.braces = true;
      this.expands = false;
    }

    Block.prototype.activateReturn = function(returnGen) {
      var lastIndex;
      if (returnGen == null) {
        returnGen = Express;
      }
      if (this.body.length === 0) {
        return;
      }
      lastIndex = this.body.length - 1;
      switch (this.body[lastIndex].type) {
        case 'For':
        case 'If':
        case 'Switch':
        case 'Try':
        case 'While':
          return this.body[lastIndex].activateReturn(returnGen);
        case 'Break':
        case 'Declare':
        case 'Echo':
        case 'Goto':
        case 'Interface':
        case 'Namespace':
        case 'Section':
        case 'Throw':
          break;
        case 'Return':
          if (this.body[lastIndex].value === false) {
            return this.body.pop();
          }
          break;
        default:
          return this.body[lastIndex] = returnGen(this.body[lastIndex]);
      }
    };

    Block.prototype.prepare = function() {
      var expression, i, instruction, j, len1, ref;
      ref = this.body;
      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
        instruction = ref[i];
        instruction.isStatement = true;
        switch (instruction.type) {
          case 'Assign':
          case 'Call':
          case 'Clone':
          case 'Code':
          case 'Goto':
          case 'Break':
          case 'Constant':
          case 'Continue':
          case 'Declare':
          case 'Delete':
          case 'GetKeyAssign':
          case 'Echo':
          case 'Include':
          case 'Namespace':
          case 'NewExpression':
          case 'Operation':
          case 'Require':
          case 'Return':
          case 'Throw':
          case 'typeCasting':
          case 'Value':
            if (instruction.type === 'Code' && instruction.body !== false) {
              break;
            }
            if (instruction.type === 'Namespace' && instruction.body !== false) {
              break;
            }
            if (instruction.type === 'Declare' && instruction.script !== false) {
              break;
            }
            if (instruction.type === 'Value' && instruction.value.type === 'Parens' && instruction.properties.length === 0) {
              instruction = instruction.value.expression;
            }
            expression = new Expression(instruction);
            expression.isStatement = true;
            this.body[i] = expression;
        }
      }
      return this;
    };

    Block.prototype.compile = function(system) {
      var code, compiled, i, instruction, j, len1, ref;
      if (this.braces && this.body.length === 0) {
        return '{}';
      }
      code = '';
      if (this.braces) {
        code += '{';
      }
      if (this.body.length === 1 && this.body[0].type === 'Expression' && !this.expands) {
        code += ' ' + this.body[0].prepare(system).compile(system) + (this.braces ? ' }' : ' ');
      } else {
        system.indent.up();
        code += '\n';
        ref = this.body;
        for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
          instruction = ref[i];
          compiled = instruction.prepare(system).compile(system);
          if (compiled !== false) {
            code += system.indent.get() + compiled;
            code += '\n';
          }
        }
        system.indent.down();
        if (this.braces) {
          code += system.indent.get() + '}';
        }
      }
      return code;
    };

    return Block;

  })(Base);

  Expression = exports.Expression = (function(superClass) {
    extend(Expression, superClass);

    function Expression(expression) {
      this.type = 'Expression';
      this.expression = expression;
    }

    Expression.prototype.compile = function(system) {
      if (this.expression.type === 'Value' && this.expression.value.type === 'Literal' && typeof this.expression.value.value === 'string') {
        if (this.expression.value.value.replace(/[ ]+/g, ' ') === 'strict mode') {
          system.setStrictMode();
          return false;
        }
        if (this.expression.value.value.replace(/[ ]+/g, ' ') === 'default mode') {
          system.setDefaultConfig();
          return false;
        }
      }
      return this.expression.prepare(system).compile(system) + ';';
    };

    return Expression;

  })(Base);

  Value = exports.Value = (function(superClass) {
    extend(Value, superClass);

    function Value(value, properties) {
      if (properties == null) {
        properties = [];
      }
      this.type = 'Value';
      this.value = value;
      this.properties = properties;
    }

    Value.prototype.add = function(prop) {
      this.properties.push(prop);
      return this;
    };

    Value.prototype.compile = function(system) {
      var code, existence, expression, j, len1, propertie, ref;
      if (this.value.type === 'Existence' && this.properties.length > 0) {
        existence = new Existence(this.value.value);
        this.value = this.value.value;
        expression = new If(existence, new Block([this]));
        if (this.isStatement) {
          expression.isStatement = true;
        }
        return expression.prepare(system).compile(system);
      }
      if (this.isStatement) {
        this.value.isStatement = true;
      }
      code = this.value.prepare(system).compile(system);
      ref = this.properties;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        propertie = ref[j];
        code += propertie.prepare(system).compile(system);
      }
      return code;
    };

    return Value;

  })(Base);

  Access = exports.Access = (function(superClass) {
    extend(Access, superClass);

    function Access(value, method) {
      if (method == null) {
        method = ".";
      }
      this.type = 'Access';
      this.value = value;
      this.method = method;
    }

    Access.prototype.compile = function(system) {
      var code;
      switch (this.method) {
        case '->':
        case '.':
          code = "->" + this.value.name;
          break;
        case '::':
        case '..':
          code = '::' + this.value.name;
          break;
        case '[]':
          code = '[' + this.value.prepare(system).compile(system) + ']';
      }
      return code;
    };

    return Access;

  })(Base);

  Identifier = exports.Identifier = (function(superClass) {
    extend(Identifier, superClass);

    function Identifier(name) {
      this.type = 'Identifier';
      this.name = name;
    }

    Identifier.prototype.compile = function(system) {
      if (!system.context.has(this.name)) {
        system.context.push(new Context.Name(this.name));
      }
      return system.context.Identify(this.name);
    };

    return Identifier;

  })(Base);

  HereDoc = exports.HereDoc = (function(superClass) {
    extend(HereDoc, superClass);

    function HereDoc(heredoc) {
      this.type = 'HereDoc';
      this.heredoc = heredoc;
    }

    HereDoc.prototype.compile = function(system) {
      return '<<<EOT\n' + this.heredoc + '\nEOT';
    };

    return HereDoc;

  })(Base);

  Literal = exports.Literal = (function(superClass) {
    extend(Literal, superClass);

    function Literal(raw) {
      this.type = 'Literal';
      this.value = eval(raw);
      this.raw = raw;
    }

    Literal.prototype.compile = function(system) {
      return this.raw;
    };

    return Literal;

  })(Base);

  Array = exports.Array = (function(superClass) {
    extend(Array, superClass);

    function Array(elements) {
      if (elements == null) {
        elements = [];
      }
      this.type = 'Array';
      this.elements = elements;
    }

    Array.prototype.compile = function(system) {
      var code, element, i, j, len1, ref;
      code = 'array(';
      ref = this.elements;
      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
        element = ref[i];
        code += element.prepare(system).compile(system);
        if (i !== this.elements.length - 1) {
          code += ', ';
        }
      }
      code += ')';
      return code;
    };

    return Array;

  })(Base);

  ArrayKey = exports.ArrayKey = (function(superClass) {
    extend(ArrayKey, superClass);

    function ArrayKey(key, value) {
      this.type = 'ArrayKey';
      this.key = key;
      this.value = value;
    }

    ArrayKey.prototype.compile = function(system) {
      return this.key.prepare(system).compile(system) + ' => ' + this.value.prepare(system).compile(system);
    };

    return ArrayKey;

  })(Base);

  Parens = exports.Parens = (function(superClass) {
    extend(Parens, superClass);

    function Parens(expression) {
      this.type = 'Parens';
      this.expression = expression;
    }

    Parens.prototype.compile = function(system) {
      return '(' + this.expression.prepare(system).compile(system) + ')';
    };

    return Parens;

  })(Base);

  typeCasting = exports.typeCasting = (function(superClass) {
    extend(typeCasting, superClass);

    function typeCasting(expression, ctype) {
      this.type = 'typeCasting';
      this.expression = expression;
      this.ctype = ctype;
    }

    typeCasting.prototype.compile = function(system) {
      return '(' + this.ctype + ') ' + this.expression.prepare(system).compile(system);
    };

    return typeCasting;

  })(Base);

  Clone = exports.Clone = (function(superClass) {
    extend(Clone, superClass);

    function Clone(expression) {
      this.type = 'Clone';
      this.expression = expression;
    }

    Clone.prototype.compile = function(system) {
      return 'clone ' + this.expression.prepare(system).compile(system);
    };

    return Clone;

  })(Base);

  Call = exports.Call = (function(superClass) {
    extend(Call, superClass);

    function Call(callee, args) {
      if (args == null) {
        args = [];
      }
      this.type = 'Call';
      this.callee = callee;
      this["arguments"] = args;
    }

    Call.prototype.prepare = function() {
      var arg, i, j, len1, ref;
      ref = this["arguments"];
      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
        arg = ref[i];
        if (arg.type === 'Value' && arg.value.type === 'Parens') {
          this["arguments"][i] = arg.value.expression;
        }
      }
      return this;
    };

    Call.prototype.compile = function(system) {
      var arg, callee, code, existence, expression, i, j, k, l, len1, len2, len3, prop, ref, ref1, ref2;
      if ((this.callee.value != null) && this.callee.value.type === 'Existence') {
        existence = new Existence(this.callee.value.value);
        callee = new Value(this.callee.value.value);
        ref = this.callee.value.value;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          prop = ref[j];
          callee.add(prop);
        }
        ref1 = this.callee.properties;
        for (k = 0, len2 = ref1.length; k < len2; k++) {
          prop = ref1[k];
          callee.add(prop);
        }
        expression = new If(existence, new Block([new Call(callee, this["arguments"])]));
        if (this.isStatement) {
          expression.isStatement = true;
        }
        return expression.prepare(system).compile(system);
      }
      code = this.callee.prepare(system).compile(system);
      code += '(';
      ref2 = this["arguments"];
      for (i = l = 0, len3 = ref2.length; l < len3; i = ++l) {
        arg = ref2[i];
        code += arg.prepare(system).compile(system);
        if (i !== this["arguments"].length - 1) {
          code += ', ';
        }
      }
      code += ')';
      return code;
    };

    return Call;

  })(Base);

  NewExpression = exports.NewExpression = (function(superClass) {
    extend(NewExpression, superClass);

    function NewExpression(callee, args) {
      if (args == null) {
        args = [];
      }
      this.type = 'NewExpression';
      this.callee = callee;
      this["arguments"] = args;
    }

    NewExpression.prototype.compile = function(system) {
      var arg, code, i, j, len1, ref;
      code = 'new ' + this.callee.prepare(system).compile(system);
      code += '(';
      ref = this["arguments"];
      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
        arg = ref[i];
        code += arg.prepare(system).compile(system);
        if (i !== this["arguments"].length - 1) {
          code += ', ';
        }
      }
      code += ')';
      return code;
    };

    return NewExpression;

  })(Base);

  Existence = exports.Existence = (function(superClass) {
    extend(Existence, superClass);

    function Existence(value) {
      this.type = 'Existence';
      this.value = value;
    }

    Existence.prototype.compile = function(system) {
      return 'isset(' + this.value.prepare(system).compile(system) + ')';
    };

    return Existence;

  })(Base);

  Range = exports.Range = (function(superClass) {
    extend(Range, superClass);

    function Range(from, to, tag) {
      this.type = 'Range';
      this.from = from;
      this.to = to;
      this.exclusive = tag === 'exclusive';
    }

    Range.prototype.prepare = function() {
      if (this.from instanceof Value && this.from.value instanceof Literal && typeof this.from.value.value === 'number') {
        this.fromCache = this.from.value.value;
      }
      if (this.to instanceof Value && this.to.value instanceof Literal && typeof this.to.value.value === 'number') {
        this.toCache = this.to.value.value;
      }
      if (typeof this.fromCache === 'number' && typeof this.toCache === 'number' && Math.abs(this.fromCache - this.toCache) <= 20) {
        this.compileResult = 'Array';
      } else {
        this.compileResult = 'function';
      }
      return this;
    };

    Range.prototype.compile = function(system) {
      var array, expression, i, index, j, k, ref, ref1, ref2, ref3, results, results1;
      if (this.compileResult === 'Array') {
        array = this.exclusive ? (function() {
          results = [];
          for (var j = ref = this.fromCache, ref1 = this.toCache; ref <= ref1 ? j < ref1 : j > ref1; ref <= ref1 ? j++ : j--){ results.push(j); }
          return results;
        }).apply(this) : (function() {
          results1 = [];
          for (var k = ref2 = this.fromCache, ref3 = this.toCache; ref2 <= ref3 ? k <= ref3 : k >= ref3; ref2 <= ref3 ? k++ : k--){ results1.push(k); }
          return results1;
        }).apply(this);
        return (new Array((function() {
          var l, len1, results2;
          results2 = [];
          for (l = 0, len1 = array.length; l < len1; l++) {
            i = array[l];
            results2.push(new Literal(i.toString()));
          }
          return results2;
        })())).prepare(system).compile();
      } else {
        index = new Identifier(system.context.free('i'));
        expression = new Call(new Identifier('call_user_func'), [
          new Code([], new Block([
            new For({
              source: this,
              index: index,
              range: true
            }, new Block([new Value(index)]))
          ]))
        ]);
        return expression.prepare(system).compile(system);
      }
    };

    return Range;

  })(Base);

  Slice = exports.Slice = (function(superClass) {
    extend(Slice, superClass);

    function Slice(range) {
      this.type = 'Slice';
      this.range = range;
    }

    Slice.prototype.compile = function(system) {
      var expression, param;
      param = [];
      if (this.range.from != null) {
        param.push(this.range.from);
      } else {
        param.push(new Value(new Literal('0')));
      }
      if (this.range.to != null) {
        param.push(this.range.exclusive ? this.range.to : new Operation('+', this.range.to, new Literal('1')));
      }
      param = [new Literal('"slice"'), this.value].concat(param);
      system.config.addMammouth = true;
      expression = new Call(new Identifier('mammouth'), param);
      return expression.prepare(system).compile(system);
    };

    return Slice;

  })(Base);

  QualifiedName = exports.QualifiedName = (function(superClass) {
    extend(QualifiedName, superClass);

    function QualifiedName(path) {
      this.type = 'QualifiedName';
      this.path = path;
    }

    QualifiedName.prototype.compile = function(system) {
      return this.path;
    };

    return QualifiedName;

  })(Base);

  Assign = exports.Assign = (function(superClass) {
    extend(Assign, superClass);

    function Assign(operator, left, right) {
      this.type = 'Assign';
      this.operator = operator;
      this.left = left;
      this.right = right;
    }

    Assign.prototype.compile = function(system) {
      var code;
      if (this.left.type === 'Value' && this.left.value.type === 'Identifier') {
        system.context.push(new Context.Name(this.left.value.name));
      }
      code = this.left.prepare(system).compile(system);
      code += ' ' + this.operator + ' ';
      code += this.right.prepare(system).compile(system);
      return code;
    };

    return Assign;

  })(Base);

  GetKeyAssign = exports.GetKeyAssign = (function(superClass) {
    extend(GetKeyAssign, superClass);

    function GetKeyAssign(keys, source) {
      this.type = 'GetKeyAssign';
      this.keys = keys;
      this.source = source;
    }

    GetKeyAssign.prototype.compile = function(system) {
      var code, i, j, key, left, len1, ref;
      code = '';
      ref = this.keys;
      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
        key = ref[i];
        if (i !== 0) {
          code += system.indent.get();
        }
        left = new Value(key);
        this.source.properties = [];
        this.source.add(new Access(new Value(new Literal('"' + key.name + '"')), '[]'));
        code += (new Assign('=', left, this.source)).prepare(system).compile(system);
        if (i !== this.keys.length - 1) {
          code += ';\n';
        }
      }
      return code;
    };

    return GetKeyAssign;

  })(Base);

  Constant = exports.Constant = (function(superClass) {
    extend(Constant, superClass);

    function Constant(left, right) {
      this.type = 'Constant';
      this.left = left;
      this.right = right;
    }

    Constant.prototype.compile = function(system) {
      system.context.push(new Context.Name(this.left, 'const'));
      return 'const ' + this.left + ' = ' + this.right.prepare(system).compile(system);
    };

    return Constant;

  })(Base);

  Unary = exports.Unary = (function(superClass) {
    extend(Unary, superClass);

    function Unary(operator, expression) {
      this.type = 'Unary';
      this.operator = operator;
      this.expression = expression;
    }

    Unary.prototype.compile = function(system) {
      return this.operator + this.expression.prepare(system).compile(system);
    };

    return Unary;

  })(Base);

  Update = exports.Update = (function(superClass) {
    extend(Update, superClass);

    function Update(operator, expression, prefix) {
      if (prefix == null) {
        prefix = true;
      }
      this.type = 'Update';
      this.operator = operator;
      this.expression = expression;
      this.prefix = prefix;
    }

    Update.prototype.compile = function(system) {
      var code;
      code = this.expression.prepare(system).compile(system);
      if (this.prefix) {
        code = this.operator + code;
      } else {
        code += this.operator;
      }
      return code;
    };

    return Update;

  })(Base);

  Operation = exports.Operation = (function(superClass) {
    extend(Operation, superClass);

    function Operation(operator, left, right) {
      this.type = 'Operation';
      this.operator = operator;
      this.left = left;
      this.right = right;
    }

    Operation.prototype.compile = function(system) {
      var code, expression, space;
      if (this.operator === 'in') {
        return (new Value(new Call(new Value(new Identifier('in_array')), [this.left, this.right]))).prepare(system).compile(system);
      }
      code = this.left.prepare(system).compile(system);
      if (this.operator === '~') {
        this.operator = '.';
      }
      space = this.operator !== '.' ? ' ' : '';
      if (this.operator === '+' && system.config['+'] === true) {
        system.config.addMammouth = true;
        expression = new Value(new Call(new Value(new Identifier('mammouth')), [new Value(new Literal('"+"')), this.left, this.right]));
        return expression.prepare(system).compile(system);
      }
      code += space + this.operator + space;
      code += this.right.prepare(system).compile(system);
      return code;
    };

    return Operation;

  })(Base);

  Code = exports.Code = (function(superClass) {
    extend(Code, superClass);

    function Code(parameters, body, asStatement, name) {
      if (body == null) {
        body = false;
      }
      if (asStatement == null) {
        asStatement = false;
      }
      if (name == null) {
        name = null;
      }
      this.type = 'Code';
      this.parameters = parameters;
      this.body = body;
      this.asStatement = asStatement;
      this.name = name;
    }

    Code.prototype.prepare = function() {
      if (this.body !== false) {
        this.body.activateReturn(function(exp) {
          return new Return(exp);
        });
      }
      return this;
    };

    Code.prototype.compile = function(system) {
      var code, i, j, len1, parameter, ref;
      code = "function" + (this.asStatement ? ' ' + this.name : '') + '(';
      system.context.push(new Context.Name(this.name, 'function'));
      system.context.scopeStarts();
      ref = this.parameters;
      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
        parameter = ref[i];
        code += parameter.prepare(system).compile(system);
        if (i !== this.parameters.length - 1) {
          code += ', ';
        }
      }
      code += ')';
      if (this.body !== false) {
        code += ' ' + this.body.prepare(system).compile(system);
      }
      system.context.scopeEnds();
      return code;
    };

    return Code;

  })(Base);

  Param = exports.Param = (function(superClass) {
    extend(Param, superClass);

    function Param(name, passing, hasDefault, def) {
      if (passing == null) {
        passing = false;
      }
      if (hasDefault == null) {
        hasDefault = false;
      }
      if (def == null) {
        def = null;
      }
      this.type = 'Param';
      this.name = name;
      this.passing = passing;
      this.hasDefault = hasDefault;
      this["default"] = def;
    }

    Param.prototype.compile = function(system) {
      var code;
      system.context.push(new Context.Name(this.name));
      code = (this.passing ? '&' : '');
      code += '$' + this.name;
      code += (this.hasDefault ? ' = ' + this["default"].prepare(system).compile(system) : '');
      return code;
    };

    return Param;

  })(Base);

  If = exports.If = (function(superClass) {
    extend(If, superClass);

    function If(condition, body, invert) {
      if (invert == null) {
        invert = false;
      }
      this.type = 'If';
      this.condition = invert ? new Unary("!", new Parens(condition)) : condition;
      this.body = body;
      this.elses = [];
      this.closed = false;
    }

    If.prototype.addElse = function(element) {
      this.elses.push(element);
      return this;
    };

    If.prototype.activateReturn = function(returnGen) {
      var els, j, len1, ref, results;
      this.body.activateReturn(returnGen);
      ref = this.elses;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        els = ref[j];
        results.push(els.activateReturn(returnGen));
      }
      return results;
    };

    If.prototype.prepare = function() {
      var els, j, len1, ref;
      this.body.expands = true;
      ref = this.elses;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        els = ref[j];
        els.parentIf = this;
        if (this.isStatement) {
          els.isStatement = true;
        }
        els.body.expands = true;
      }
      if (!this.isStatement) {
        if (this.body.body.length === 1) {
          this.body = this.body.body[0];
        }
      }
      return this;
    };

    If.prototype.compile = function(system) {
      var code, els, j, k, len1, len2, ref, ref1;
      if (this.isStatement) {
        code = 'if(' + this.condition.prepare(system).compile(system) + ') ';
        code += this.body.prepare(system).compile(system);
        ref = this.elses;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          els = ref[j];
          code += els.prepare(system).compile(system);
        }
      } else {
        code = this.condition.prepare(system).compile(system) + ' ? ' + this.body.prepare(system).compile(system);
        ref1 = this.elses;
        for (k = 0, len2 = ref1.length; k < len2; k++) {
          els = ref1[k];
          code += ' : ' + els.prepare(system).compile(system);
        }
        if (!this.closed) {
          code += ' : NULL';
        }
      }
      return code;
    };

    return If;

  })(Base);

  ElseIf = exports.ElseIf = (function(superClass) {
    extend(ElseIf, superClass);

    function ElseIf(condition, body) {
      this.type = 'ElseIf';
      this.condition = condition;
      this.body = body;
    }

    ElseIf.prototype.activateReturn = function(returnGen) {
      return this.body.activateReturn(returnGen);
    };

    ElseIf.prototype.prepare = function() {
      if (!this.isStatement) {
        if (this.body.body.length === 1) {
          this.body = this.body.body[0];
        }
      }
      return this;
    };

    ElseIf.prototype.compile = function(system) {
      var code;
      if (this.isStatement) {
        code = ' elseif(' + this.condition.prepare(system).compile(system) + ') ';
        code += this.body.prepare(system).compile(system);
      } else {
        code = this.condition.prepare(system).compile(system) + ' ? ' + this.body.prepare(system).compile(system);
      }
      return code;
    };

    return ElseIf;

  })(Base);

  Else = exports.Else = (function(superClass) {
    extend(Else, superClass);

    function Else(body) {
      this.type = 'Else';
      this.body = body;
    }

    Else.prototype.activateReturn = function(returnGen) {
      return this.body.activateReturn(returnGen);
    };

    Else.prototype.prepare = function() {
      if (!this.isStatement) {
        if (this.body.body.length === 1) {
          this.body = this.body.body[0];
        }
      }
      return this;
    };

    Else.prototype.compile = function(system) {
      var code;
      if (this.isStatement) {
        code = ' else ';
        code += this.body.prepare(system).compile(system);
      } else {
        this.parentIf.closed = true;
        code = this.body.prepare(system).compile(system);
      }
      return code;
    };

    return Else;

  })(Base);

  While = exports.While = (function(superClass) {
    extend(While, superClass);

    function While(test, invert, guard, block) {
      if (invert == null) {
        invert = false;
      }
      if (guard == null) {
        guard = null;
      }
      if (block == null) {
        block = null;
      }
      this.type = 'While';
      this.test = invert ? new Unary("!", test) : test;
      this.guard = guard;
      this.body = block;
      this.returnactived = false;
      if (block !== null) {
        delete this.guard;
      }
    }

    While.prototype.addBody = function(block) {
      this.body = this.guard !== null ? new Block([new If(this.guard, block)]) : block;
      delete this.guard;
      return this;
    };

    While.prototype.activateReturn = function(returnGen) {
      return this.returnactived = true;
    };

    While.prototype.prepare = function(system) {
      var cacheRes, funcgen;
      this.body.expands = true;
      if (this.returnactived) {
        this.cacheRes = cacheRes = new Identifier(system.context.free('result'));
        funcgen = function(exp) {
          var m;
          m = new Expression(new Call(new Value(new Identifier('array_push')), [new Value(cacheRes), exp]));
          return m;
        };
        this.body.activateReturn(funcgen);
      }
      return this;
    };

    While.prototype.compile = function(system) {
      var code, init;
      code = '';
      if (this.isStatement) {
        if (this.returnactived) {
          init = new Expression(new Assign('=', new Value(this.cacheRes), new Value(new Array())));
          code += init.prepare(system).compile(system);
          code += '\n' + system.indent.get();
        }
        code += 'while(' + this.test.prepare(system).compile(system) + ') ';
        code += this.body.prepare(system).compile(system);
        if (this.returnactived) {
          code += '\n' + system.indent.get();
          code += (new Expression(new Return(new Value(this.cacheRes)))).prepare(system).compile(system);
        }
      } else {
        this.isStatement = true;
        code += (new Value(new Call(new Identifier('call_user_func'), [new Code([], new Block([this]))]))).prepare(system).compile(system);
      }
      return code;
    };

    return While;

  })(Base);

  Try = exports.Try = (function(superClass) {
    extend(Try, superClass);

    function Try(TryBody, CatchBody, CatchIdentifier, FinallyBody) {
      if (CatchBody == null) {
        CatchBody = new Block;
      }
      if (CatchIdentifier == null) {
        CatchIdentifier = false;
      }
      if (FinallyBody == null) {
        FinallyBody = false;
      }
      this.type = 'Try';
      this.TryBody = TryBody;
      this.CatchBody = CatchBody;
      this.CatchIdentifier = CatchIdentifier;
      this.FinallyBody = FinallyBody;
    }

    Try.prototype.activateReturn = function(returnGen) {
      this.TryBody.activateReturn(returnGen);
      this.CatchBody.activateReturn(returnGen);
      if (this.FinallyBody !== false) {
        return this.FinallyBody.activateReturn(returnGen);
      }
    };

    Try.prototype.prepare = function(system) {
      this.TryBody.expands = true;
      this.CatchBody.expands = true;
      if (this.FinallyBody !== false) {
        this.FinallyBody.expands = true;
      }
      return this;
    };

    Try.prototype.compile = function(system) {
      var code;
      code = '';
      if (this.isStatement) {
        code += 'try ';
        code += this.TryBody.prepare(system).compile(system);
        code += ' catch(Exception ';
        if (this.CatchIdentifier === false) {
          code += (new Identifier(system.context.free('error'))).prepare(system).compile(system);
        } else {
          code += this.CatchIdentifier.prepare(system).compile(system);
        }
        code += ') ' + this.CatchBody.prepare(system).compile(system);
      } else {
        this.isStatement = true;
        code += (new Value(new Call(new Identifier('call_user_func'), [new Code([], new Block([this]))]))).prepare(system).compile(system);
      }
      return code;
    };

    return Try;

  })(Base);

  For = exports.For = (function(superClass) {
    extend(For, superClass);

    function For(source, block) {
      this.type = 'For';
      this.source = source;
      this.body = block;
      this.returnactived = false;
      this.isPrepared = false;
    }

    For.prototype.activateReturn = function(returnGen) {
      return this.returnactived = true;
    };

    For.prototype.prepare = function(system) {
      var addTop, cacheRes, funcgen, valfromRef;
      this.body.expands = true;
      this.object = !!this.source.object;
      if (!((this.source.range != null) && this.source.range === true) && !this.isPrepared) {
        if (!this.object) {
          this.cacheIndex = new Identifier(system.context.free('i'));
          this.cacheLen = new Identifier(system.context.free('len'));
          if (this.source.source.type === 'Value' && this.source.source.value.type === 'Identifier') {
            this.initRef = false;
            this.cacheRef = this.source.source.value;
          } else {
            this.initRef = true;
            this.cacheRef = new Identifier(system.context.free('ref'));
          }
          valfromRef = new Value(this.cacheRef);
          valfromRef.add(new Access((this.source.index != null ? this.source.index : this.cacheIndex), '[]'));
          addTop = true;
        }
      }
      if ((this.source.guard != null) && !this.isPrepared) {
        this.body = new Block([new If(this.source.guard, this.body)]);
      }
      if (addTop === true && !this.isPrepared) {
        this.body.body.unshift(new Expression(new Assign('=', this.source.name, valfromRef)));
      }
      if (this.returnactived) {
        this.cacheRes = cacheRes = new Identifier(system.context.free('result'));
        funcgen = function(exp) {
          var m;
          m = new Expression(new Call(new Value(new Identifier('array_push')), [new Value(cacheRes), exp]));
          return m;
        };
        this.body.activateReturn(funcgen);
      }
      return this;
    };

    For.prototype.compile = function(system) {
      var code, index, init, len, update;
      code = '';
      if (this.isStatement) {
        if (this.returnactived) {
          init = new Expression(new Assign('=', new Value(this.cacheRes), new Value(new Array())));
          code += init.prepare(system).compile(system);
          code += '\n' + system.indent.get();
        }
        if ((this.source.range != null) && this.source.range === true) {
          index = this.source.index != null ? this.source.index : new Identifier(system.context.free('i'));
          code += 'for(';
          code += (new Assign('=', index, this.source.source.from)).prepare(system).compile(system);
          code += '; ';
          code += (new Operation(this.source.source.exclusive ? '<' : '<=', index, this.source.source.to)).prepare(system).compile(system);
          code += '; ';
          if (this.source.step != null) {
            update = new Assign('+=', index, this.source.step);
          } else {
            update = new Update('++', index, false);
          }
          code += update.prepare(system).compile(system);
          code += ') ';
          code += this.body.prepare(system).compile(system);
        } else {
          if (this.object) {
            code += 'foreach(' + this.source.source.prepare(system).compile(system) + ' as ';
            code += this.source.name.prepare(system).compile(system);
            code += ' => ';
            if (this.source.index != null) {
              code += this.source.index.prepare(system).compile(system);
            } else {
              code += (new Identifier(system.context.free('value'))).prepare(system).compile(system);
            }
            code += ') ';
            code += this.body.prepare(system).compile(system);
          } else {
            index = this.cacheIndex;
            len = this.cacheLen;
            if (this.initRef) {
              init = new Expression(new Assign('=', new Value(this.cacheRef), this.source.source));
              code += init.prepare(system).compile(system);
              code += '\n' + system.indent.get();
            }
            code += 'for(';
            if (this.source.index != null) {
              code += (new Assign('=', this.source.index, new Value(new Assign('=', index, new Value(new Literal('0')))))).prepare(system).compile(system);
            } else {
              code += (new Assign('=', index, new Value(new Literal('0')))).prepare(system).compile(system);
            }
            code += ', ';
            system.config.addMammouth = true;
            code += (new Assign('=', len, new Value(new Call(new Identifier('mammouth'), [new Value(new Literal("'length'")), this.cacheRef])))).prepare(system).compile(system);
            code += '; ';
            code += (new Operation('<', index, len)).prepare(system).compile(system);
            code += '; ';
            if (this.source.step != null) {
              update = new Assign('+=', index, this.source.step);
            } else {
              update = new Update('++', index, false);
            }
            if (this.source.index != null) {
              code += (new Assign('=', this.source.index, new Value(update))).prepare(system).compile(system);
            } else {
              code += update.prepare(system).compile(system);
            }
            code += ') ';
            code += this.body.prepare(system).compile(system);
          }
        }
        if (this.returnactived) {
          code += '\n' + system.indent.get();
          code += (new Expression(new Return(new Value(this.cacheRes)))).prepare(system).compile(system);
        }
      } else {
        this.isStatement = true;
        this.isPrepared = true;
        code += (new Value(new Call(new Identifier('call_user_func'), [new Code([], new Block([this]))]))).prepare(system).compile(system);
      }
      return code;
    };

    return For;

  })(Base);

  Switch = exports.Switch = (function(superClass) {
    extend(Switch, superClass);

    function Switch(subject, whens, otherwise) {
      var i, j, k, len1, len2, ref, ref1, val, whe;
      if (subject == null) {
        subject = null;
      }
      if (otherwise == null) {
        otherwise = false;
      }
      this.type = 'Switch';
      this.subject = subject === null ? new Value(new Literal('false')) : subject;
      this.whens = whens;
      if (subject === null) {
        ref = this.whens;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          whe = ref[j];
          ref1 = whe[0];
          for (i = k = 0, len2 = ref1.length; k < len2; i = ++k) {
            val = ref1[i];
            whe[0][i] = new Value(new Unary('!', new Parens(val)));
          }
        }
      }
      this.otherwise = otherwise;
      this.isPrepared = false;
      this.returnactived = false;
    }

    Switch.prototype.activateReturn = function(returnGen) {
      var j, len1, ref, whe;
      this.returnactived = true;
      ref = this.whens;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        whe = ref[j];
        whe[1].activateReturn(returnGen);
      }
      if (this.otherwise !== false) {
        return this.otherwise.activateReturn(returnGen);
      }
    };

    Switch.prototype.compile = function(system) {
      var code, i, j, k, l, lastndex, len1, len2, len3, ref, ref1, ref2, ref3, val, whe;
      code = '';
      if (this.isStatement) {
        ref = this.whens;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          whe = ref[j];
          whe[1].expands = true;
          whe[1].braces = false;
          lastndex = whe[1].body.length - 1;
          if (!((ref1 = whe[1].body[lastndex].type) === 'Return' || ref1 === 'Break') && !this.returnactived) {
            whe[1].body.push(new Break);
          }
        }
        if (this.otherwise !== false) {
          this.otherwise.expands = true;
          this.otherwise.braces = false;
        }
        code += 'switch(' + this.subject.prepare(system).compile(system) + ') {\n';
        system.indent.up();
        ref2 = this.whens;
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          whe = ref2[k];
          ref3 = whe[0];
          for (i = l = 0, len3 = ref3.length; l < len3; i = ++l) {
            val = ref3[i];
            if (i !== 0) {
              code += '\n';
            }
            code += system.indent.get() + 'case ' + val.prepare(system).compile(system) + ':';
          }
          code += whe[1].prepare(system).compile(system);
        }
        if (this.otherwise !== false) {
          code += system.indent.get() + 'default:';
          code += this.otherwise.prepare(system).compile(system);
        }
        system.indent.down();
        code += system.indent.get() + '}';
      } else {
        this.isStatement = true;
        this.isPrepared = true;
        this.activateReturn(function(exp) {
          return new Return(exp);
        });
        code += (new Value(new Call(new Identifier('call_user_func'), [new Code([], new Block([this]))]))).prepare(system).compile(system);
      }
      return code;
    };

    return Switch;

  })(Base);

  Declare = exports.Declare = (function(superClass) {
    extend(Declare, superClass);

    function Declare(expression, script) {
      if (script == null) {
        script = false;
      }
      this.type = 'Declare';
      this.expression = expression;
      this.script = script;
    }

    Declare.prototype.prepare = function(system) {
      if (this.script !== false) {
        this.script.expands = true;
      }
      return this;
    };

    Declare.prototype.compile = function(system) {
      var code;
      if (this.expression.type === 'Assign' && this.expression.left.type === 'Value' && this.expression.left.value.type === 'Identifier') {
        system.context.push(new Context.Name(this.expression.left.value.name, 'const'));
      }
      code = 'declare(' + this.expression.prepare(system).compile(system) + ')';
      if (this.script !== false) {
        code += ' ' + this.script.prepare(system).compile(system);
      }
      return code;
    };

    return Declare;

  })(Base);

  Section = exports.Section = (function(superClass) {
    extend(Section, superClass);

    function Section(name) {
      this.type = 'Section';
      this.name = name;
    }

    Section.prototype.compile = function(system) {
      return this.name + ':';
    };

    return Section;

  })(Base);

  Goto = exports.Goto = (function(superClass) {
    extend(Goto, superClass);

    function Goto(section) {
      this.type = 'Goto';
      this.section = section;
    }

    Goto.prototype.compile = function(system) {
      return 'goto ' + this.section;
    };

    return Goto;

  })(Base);

  Break = exports.Break = (function(superClass) {
    extend(Break, superClass);

    function Break(arg) {
      if (arg == null) {
        arg = false;
      }
      this.type = 'Break';
      this.arg = arg;
    }

    Break.prototype.compile = function(system) {
      return 'break' + (this.arg === false ? '' : ' ' + this.arg.prepare(system).compile(system));
    };

    return Break;

  })(Base);

  Continue = exports.Continue = (function(superClass) {
    extend(Continue, superClass);

    function Continue(arg) {
      if (arg == null) {
        arg = false;
      }
      this.type = 'Continue';
      this.arg = arg;
    }

    Continue.prototype.compile = function(system) {
      return 'continue' + (this.arg === false ? '' : ' ' + this.arg.prepare(system).compile(system));
    };

    return Continue;

  })(Base);

  Return = exports.Return = (function(superClass) {
    extend(Return, superClass);

    function Return(value) {
      if (value == null) {
        value = false;
      }
      this.type = 'Return';
      this.value = value;
    }

    Return.prototype.compile = function(system) {
      return 'return' + (this.value === false ? '' : ' ' + this.value.prepare(system).compile(system));
    };

    return Return;

  })(Base);

  Throw = exports.Throw = (function(superClass) {
    extend(Throw, superClass);

    function Throw(expression) {
      this.type = 'Throw';
      this.expression = expression;
    }

    Throw.prototype.compile = function(system) {
      return 'throw ' + this.expression.prepare(system).compile(system);
    };

    return Throw;

  })(Base);

  Echo = exports.Echo = (function(superClass) {
    extend(Echo, superClass);

    function Echo(value) {
      this.type = 'Echo';
      this.value = value;
    }

    Echo.prototype.compile = function(system) {
      return 'echo ' + this.value.prepare(system).compile(system);
    };

    return Echo;

  })(Base);

  Delete = exports.Delete = (function(superClass) {
    extend(Delete, superClass);

    function Delete(value) {
      this.type = 'Delete';
      this.value = value;
    }

    Delete.prototype.compile = function(system) {
      return 'delete ' + this.value.prepare(system).compile(system);
    };

    return Delete;

  })(Base);

  Class = exports.Class = (function(superClass) {
    extend(Class, superClass);

    function Class(name, body, extendable, implement, modifier) {
      if (extendable == null) {
        extendable = false;
      }
      if (implement == null) {
        implement = false;
      }
      if (modifier == null) {
        modifier = false;
      }
      this.type = "Class";
      this.name = name;
      this.body = body;
      this.extendable = extendable;
      this.implement = implement;
      this.modifier = modifier;
    }

    Class.prototype.prepare = function(system) {
      var i, j, len1, line, ref;
      ref = this.body;
      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
        line = ref[i];
        if (line.element.type === 'Code' && line.element.body === false) {
          this.body[i].element = new Expression(line.element);
        }
      }
      return this;
    };

    Class.prototype.compile = function(system) {
      var code, i, impl, j, k, len1, len2, line, ref, ref1;
      system.context.push(new Context.Name(this.name, 'class'));
      code = (this.modifier !== false ? this.modifier + ' ' : '') + 'class ' + this.name;
      if (this.extendable !== false) {
        code += ' extends ' + this.extendable.prepare(system).compile(system);
      }
      if (this.implement !== false) {
        code += ' implements ';
        ref = this.implement;
        for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
          impl = ref[i];
          code += impl.prepare(system).compile(system);
          if (i !== this.implement.length - 1) {
            code += ', ';
          }
        }
      }
      code += '\n' + system.indent.get() + '{\n';
      system.indent.up();
      ref1 = this.body;
      for (i = k = 0, len2 = ref1.length; k < len2; i = ++k) {
        line = ref1[i];
        code += system.indent.get() + line.prepare(system).compile(system);
        code += '\n';
      }
      system.indent.down();
      code += system.indent.get() + '}';
      return code;
    };

    return Class;

  })(Base);

  ClassLine = exports.ClassLine = (function(superClass) {
    extend(ClassLine, superClass);

    function ClassLine(visibility, statically, element) {
      this.type = 'ClassLine';
      this.abstract = false;
      this.finaly = false;
      this.visibility = visibility;
      this.statically = statically;
      this.element = element;
    }

    ClassLine.prototype.compile = function(system) {
      var code;
      code = '';
      if (this.abstract === true) {
        code += 'abstract ';
      }
      if (this.finaly === true) {
        code += 'final ';
      }
      if (this.visibility !== false) {
        code += this.visibility + ' ';
      }
      if (this.statically !== false) {
        code += this.statically + ' ';
      }
      code += this.element.prepare(system).compile(system);
      return code;
    };

    return ClassLine;

  })(Base);

  Interface = exports.Interface = (function(superClass) {
    extend(Interface, superClass);

    function Interface(name, body, extendable) {
      if (extendable == null) {
        extendable = false;
      }
      this.type = "Interface";
      this.name = name;
      this.body = body;
      this.extendable = extendable;
    }

    Interface.prototype.prepare = function(system) {
      var i, j, len1, line, ref;
      ref = this.body;
      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
        line = ref[i];
        if (line.element.type === 'Code' && line.element.body === false) {
          this.body[i].element = new Expression(line.element);
        }
      }
      return this;
    };

    Interface.prototype.compile = function(system) {
      var code, i, j, len1, line, ref;
      system.context.push(new Context.Name(this.name, 'interface'));
      code = 'interface ' + this.name;
      if (this.extendable !== false) {
        code += ' extends ' + this.extendable.prepare(system).compile(system);
      }
      code += '\n' + system.indent.get() + '{\n';
      system.indent.up();
      ref = this.body;
      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
        line = ref[i];
        code += system.indent.get() + line.prepare(system).compile(system);
        code += '\n';
      }
      system.indent.down();
      code += system.indent.get() + '}';
      return code;
    };

    return Interface;

  })(Base);

  Namespace = exports.Namespace = (function(superClass) {
    extend(Namespace, superClass);

    function Namespace(name, body) {
      if (body == null) {
        body = false;
      }
      this.type = 'Namespace';
      this.name = name;
      this.body = body;
    }

    Namespace.prototype.prepare = function(system) {
      if (this.body !== false) {
        this.body.expands = true;
      }
      return this;
    };

    Namespace.prototype.compile = function(system) {
      var code;
      code = 'namespace ' + this.name.prepare(system).compile(system);
      if (this.body !== false) {
        system.context.scopeStarts();
        code += ' ' + this.body.prepare(system).compile(system);
        system.context.scopeEnds();
      }
      return code;
    };

    return Namespace;

  })(Base);

  Include = exports.Include = (function(superClass) {
    extend(Include, superClass);

    function Include(path, once) {
      if (once == null) {
        once = false;
      }
      this.type = 'Include';
      this.path = path;
      this.once = once;
    }

    Include.prototype.compile = function(system) {
      var code;
      code = '';
      if (this.once) {
        code += 'include_once ';
      } else {
        code += 'include ';
      }
      code += this.path.prepare(system).compile(system);
      return code;
    };

    return Include;

  })(Base);

  Require = exports.Require = (function(superClass) {
    extend(Require, superClass);

    function Require(path, once) {
      if (once == null) {
        once = false;
      }
      this.type = 'Require';
      this.path = path;
      this.once = once;
    }

    Require.prototype.compile = function(system) {
      var code, literal, path;
      code = '';
      if (this.once) {
        code += 'require_once ';
      } else {
        code += 'require ';
      }
      if (this.path.type === 'Value' && this.path.value.type === 'Literal') {
        literal = this.path.value.value;
        if (typeof literal === 'string' && system.config['import']) {
          path = literal;
          system.Mammouth.contextify(path);
          if (literal.slice(-9) === '.mammouth') {
            this.path.value.raw = this.path.value.raw.slice(0, -10) + '.php' + this.path.value.raw.slice(-1);
          }
        }
      }
      code += this.path.prepare(system).compile(system);
      return code;
    };

    return Require;

  })(Base);

  mammouthFunction = "<?php function mammouth() { $arguments = func_get_args(); switch($arguments[0]) { case '+': if((is_string($arguments[1]) && is_numeric($arguments[2])) || (is_string($arguments[1]) && is_numeric($arguments[1]))) { return $arguments[1].$arguments[2]; } else { return $arguments[1] + $arguments[2]; } break; case 'length': if(is_array($arguments[1])) { return count($arguments[1]); } elseif(is_string($arguments[1])) { return strlen($arguments[1]); } elseif(is_numeric($arguments[1])) { return strlen((string) $arguments[1]); } break; case 'slice': if(is_array($arguments[1])) { if(count($arguments) === 3) { return array_slice($arguments[1], $arguments[2]); } else { return array_slice($arguments[1], $arguments[2], $arguments[3] - $arguments[2]); } } elseif(is_string($arguments[1])) { if(count($arguments) === 3) { return substr($arguments[1], $arguments[2]); } else { return substr($arguments[1], $arguments[2], $arguments[3] - $arguments[2]); } } elseif(is_numeric($arguments[1])) { if(count($arguments) === 3) { return mammouth('slice', (string) $arguments[1], $arguments[2]); } else { return mammouth('slice', (string) $arguments[1], $arguments[2], $arguments[3] - $arguments[2]); } } break; } } ?>\n";

}).call(this);
