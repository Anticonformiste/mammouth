// Generated by CoffeeScript 1.9.3
(function() {
  exports.Document = (function() {
    function Document(sections) {
      this.type = 'Document';
      this.sections = sections;
    }

    return Document;

  })();

  exports.RawText = (function() {
    function RawText(text) {
      if (text == null) {
        text = '';
      }
      this.type = 'RawText';
      this.text = text;
    }

    return RawText;

  })();

  exports.Script = (function() {
    function Script(block) {
      this.type = 'Script';
      this.body = block;
    }

    return Script;

  })();

  exports.Block = (function() {
    function Block(instructions) {
      if (instructions == null) {
        instructions = [];
      }
      this.type = 'Block';
      this.body = instructions;
    }

    return Block;

  })();

  exports.Value = (function() {
    function Value(value, properties) {
      if (properties == null) {
        properties = [];
      }
      this.type = 'Value';
      this.value = value;
      this.properties = properties;
    }

    Value.prototype.add = function(prop) {
      return this.properties.push(prop);
    };

    return Value;

  })();

  exports.Identifier = (function() {
    function Identifier(name) {
      this.type = 'Identifier';
      this.name = name;
    }

    return Identifier;

  })();

  exports.Literal = (function() {
    function Literal(raw) {
      this.type = 'Literal';
      this.value = eval(raw);
      this.raw = raw;
    }

    return Literal;

  })();

  exports.Access = (function() {
    function Access(value, method) {
      if (method == null) {
        method = ".";
      }
      this.type = 'Access';
      this.value = value;
      this.method = method;
    }

    return Access;

  })();

  exports.Array = (function() {
    function Array(elements) {
      if (elements == null) {
        elements = [];
      }
      this.type = 'Array';
      this.elements = elements;
    }

    return Array;

  })();

  exports.ArrayKey = (function() {
    function ArrayKey(key, value) {
      this.type = 'ArrayKey';
      this.key = key;
      this.value = value;
    }

    return ArrayKey;

  })();

  exports.Parens = (function() {
    function Parens(expression) {
      this.type = 'Parens';
      this.expression = expression;
    }

    return Parens;

  })();

  exports.typeCasting = (function() {
    function typeCasting(expression, ctype) {
      this.type = 'typeCasting';
      this.expression = expression;
      this.ctype = ctype;
    }

    return typeCasting;

  })();

  exports.Clone = (function() {
    function Clone(expression) {
      this.type = 'Clone';
      this.expression = expression;
    }

    return Clone;

  })();

}).call(this);
