// Generated by CoffeeScript 1.7.1
(function() {
  var Access, Array, ArrayKey, Assign, Block, Bool, Call, Code, Constant, Else, ElseIf, Existence, Expression, Identifier, If, In, Literal, MammouthBlock, Operation, Parens, PlainBlock, Switch, SwitchElse, Try, Unary, Update, Value, When, While;

  exports.PlainBlock = PlainBlock = (function() {
    function PlainBlock(text) {
      this.text = text;
      this.type = 'PlainBlock';
    }

    PlainBlock.prototype.toPHP = function() {
      return this.text;
    };

    return PlainBlock;

  })();

  exports.MammouthBlock = MammouthBlock = (function() {
    function MammouthBlock(body) {
      this.body = body;
      this.type = 'MammouthBlock';
    }

    return MammouthBlock;

  })();

  exports.Block = Block = (function() {
    function Block(nodes) {
      this.nodes = nodes;
      this.type = 'Block';
    }

    return Block;

  })();

  exports.Expression = Expression = (function() {
    function Expression(expression) {
      this.expression = expression;
      this.type = 'Expression';
    }

    return Expression;

  })();

  exports.Value = Value = (function() {
    function Value(value, properties) {
      this.value = value;
      this.properties = properties != null ? properties : [];
      this.type = 'Value';
    }

    Value.prototype.add = function(prop) {
      return this.properties.push(prop);
    };

    return Value;

  })();

  exports.Access = Access = (function() {
    function Access(value, method) {
      this.value = value;
      this.method = method != null ? method : ".";
      this.type = 'Access';
    }

    return Access;

  })();

  exports.Parens = Parens = (function() {
    function Parens(expression) {
      this.expression = expression;
      this.type = 'Parens';
    }

    return Parens;

  })();

  exports.Identifier = Identifier = (function() {
    function Identifier(name, as_arguments, passing) {
      this.name = name;
      this.as_arguments = as_arguments != null ? as_arguments : false;
      this.passing = passing != null ? passing : false;
      this.type = 'Identifier';
    }

    return Identifier;

  })();

  exports.Literal = Literal = (function() {
    function Literal(value) {
      this.value = value;
      this.type = 'Literal';
    }

    return Literal;

  })();

  exports.Bool = Bool = (function() {
    function Bool(value) {
      this.value = value;
      this.type = 'Bool';
    }

    return Bool;

  })();

  exports.Array = Array = (function() {
    function Array(elements) {
      this.elements = elements != null ? elements : [];
      this.type = 'Array';
    }

    return Array;

  })();

  exports.ArrayKey = ArrayKey = (function() {
    function ArrayKey(key, value) {
      this.key = key;
      this.value = value;
      this.type = 'ArrayKey';
    }

    return ArrayKey;

  })();

  exports.Call = Call = (function() {
    function Call(variable, _arguments) {
      this.variable = variable;
      this["arguments"] = _arguments != null ? _arguments : [];
      this.type = 'Call';
    }

    return Call;

  })();

  exports.Code = Code = (function() {
    function Code(parameters, body, normal, name) {
      this.parameters = parameters;
      this.body = body;
      this.normal = normal != null ? normal : false;
      this.name = name != null ? name : null;
      this.type = 'Code';
    }

    return Code;

  })();

  exports.Assign = Assign = (function() {
    function Assign(operator, left, right) {
      this.operator = operator;
      this.left = left;
      this.right = right;
      this.type = 'Assign';
    }

    return Assign;

  })();

  exports.Constant = Constant = (function() {
    function Constant(left, right) {
      this.left = left;
      this.right = right;
      this.type = 'Constant';
    }

    return Constant;

  })();

  exports.Unary = Unary = (function() {
    function Unary(operator, expression) {
      this.operator = operator;
      this.expression = expression;
      this.type = 'Unary';
    }

    return Unary;

  })();

  exports.Update = Update = (function() {
    function Update(operator, expression, prefix) {
      this.operator = operator;
      this.expression = expression;
      this.prefix = prefix != null ? prefix : true;
      this.type = 'Update';
    }

    return Update;

  })();

  exports.Existence = Existence = (function() {
    function Existence(expression) {
      this.expression = expression;
      this.type = 'Existence';
    }

    return Existence;

  })();

  exports.Operation = Operation = (function() {
    function Operation(operator, left, right) {
      this.operator = operator;
      this.left = left;
      this.right = right;
      this.type = 'Operation';
    }

    return Operation;

  })();

  exports.In = In = (function() {
    function In(left, right) {
      this.left = left;
      this.right = right;
      this.type = 'In';
    }

    return In;

  })();

  exports.If = If = (function() {
    function If(condition, body) {
      this.condition = condition;
      this.body = body;
      this.type = 'If';
      this.Elses = [];
    }

    If.prototype.addElse = function(element) {
      return this.Elses.push(element);
    };

    return If;

  })();

  exports.ElseIf = ElseIf = (function() {
    function ElseIf(condition, body) {
      this.condition = condition;
      this.body = body;
      this.type = 'ElseIf';
    }

    return ElseIf;

  })();

  exports.Else = Else = (function() {
    function Else(body) {
      this.body = body;
      this.type = 'Else';
    }

    return Else;

  })();

  exports.While = While = (function() {
    function While(test, body) {
      this.test = test;
      this.body = body;
      this.type = 'While';
    }

    return While;

  })();

  exports.Try = Try = (function() {
    function Try(TryBody, CatchIdentifier, CatchBody, Finally) {
      this.TryBody = TryBody;
      this.CatchIdentifier = CatchIdentifier;
      this.CatchBody = CatchBody;
      this.Finally = Finally != null ? Finally : false;
      this.type = 'Try';
    }

    Try.prototype.addFinally = function(body) {
      this.Finally = true;
      return this.FinallyBody = body;
    };

    return Try;

  })();

  exports.Switch = Switch = (function() {
    function Switch(variable, cases) {
      this.variable = variable;
      this.cases = cases;
      this.type = 'Switch';
    }

    return Switch;

  })();

  exports.When = When = (function() {
    function When(condition, body) {
      this.condition = condition;
      this.body = body;
      this.type = 'When';
    }

    return When;

  })();

  exports.SwitchElse = SwitchElse = (function() {
    function SwitchElse(body) {
      this.body = body;
      this.type = 'SwitchElse';
    }

    return SwitchElse;

  })();

}).call(this);
