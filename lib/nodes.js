// Generated by CoffeeScript 1.9.3
(function() {
  var Access, Array, ArrayKey, Assign, Block, Break, Call, Class, ClassLine, Clone, Code, Constant, Continue, Declare, Delete, Document, Echo, Else, ElseIf, Existence, Expression, For, GetKeyAssign, Goto, Identifier, If, Interface, Literal, Namespace, NewExpression, Operation, Param, Parens, QualifiedName, Range, RawText, Return, Script, Section, Slice, Switch, Throw, Try, Unary, Update, Value, While, typeCasting;

  Document = exports.Document = (function() {
    function Document(sections) {
      this.type = 'Document';
      this.sections = sections;
    }

    return Document;

  })();

  RawText = exports.RawText = (function() {
    function RawText(text) {
      if (text == null) {
        text = '';
      }
      this.type = 'RawText';
      this.text = text;
    }

    return RawText;

  })();

  Script = exports.Script = (function() {
    function Script(block) {
      this.type = 'Script';
      this.body = block;
    }

    return Script;

  })();

  Block = exports.Block = (function() {
    function Block(instructions) {
      if (instructions == null) {
        instructions = [];
      }
      this.type = 'Block';
      this.body = instructions;
    }

    return Block;

  })();

  Expression = exports.Expression = (function() {
    function Expression(expression) {
      this.type = 'Expression';
      this.expression = expression;
    }

    return Expression;

  })();

  Value = exports.Value = (function() {
    function Value(value, properties) {
      if (properties == null) {
        properties = [];
      }
      this.type = 'Value';
      this.value = value;
      this.properties = properties;
    }

    Value.prototype.add = function(prop) {
      return this.properties.push(prop);
    };

    return Value;

  })();

  Identifier = exports.Identifier = (function() {
    function Identifier(name) {
      this.type = 'Identifier';
      this.name = name;
    }

    return Identifier;

  })();

  Literal = exports.Literal = (function() {
    function Literal(raw) {
      this.type = 'Literal';
      this.value = eval(raw);
      this.raw = raw;
    }

    return Literal;

  })();

  Access = exports.Access = (function() {
    function Access(value, method) {
      if (method == null) {
        method = ".";
      }
      this.type = 'Access';
      this.value = value;
      this.method = method;
    }

    return Access;

  })();

  Array = exports.Array = (function() {
    function Array(elements) {
      if (elements == null) {
        elements = [];
      }
      this.type = 'Array';
      this.elements = elements;
    }

    return Array;

  })();

  ArrayKey = exports.ArrayKey = (function() {
    function ArrayKey(key, value) {
      this.type = 'ArrayKey';
      this.key = key;
      this.value = value;
    }

    return ArrayKey;

  })();

  Parens = exports.Parens = (function() {
    function Parens(expression) {
      this.type = 'Parens';
      this.expression = expression;
    }

    return Parens;

  })();

  typeCasting = exports.typeCasting = (function() {
    function typeCasting(expression, ctype) {
      this.type = 'typeCasting';
      this.expression = expression;
      this.ctype = ctype;
    }

    return typeCasting;

  })();

  Clone = exports.Clone = (function() {
    function Clone(expression) {
      this.type = 'Clone';
      this.expression = expression;
    }

    return Clone;

  })();

  Call = exports.Call = (function() {
    function Call(callee, args) {
      if (args == null) {
        args = [];
      }
      this.type = 'Call';
      this.callee = callee;
      this["arguments"] = args;
    }

    return Call;

  })();

  NewExpression = exports.NewExpression = (function() {
    function NewExpression(callee, args) {
      if (args == null) {
        args = [];
      }
      this.type = 'NewExpression';
      this.callee = callee;
      this["arguments"] = args;
    }

    return NewExpression;

  })();

  Existence = exports.Existence = (function() {
    function Existence(value) {
      this.type = 'Existence';
      this.value = value;
    }

    return Existence;

  })();

  Range = exports.Range = (function() {
    function Range(from, to, tag) {
      this.type = 'Range';
      this.from = from;
      this.to = to;
      this.exclusive = tag === 'exclusive';
    }

    return Range;

  })();

  Slice = exports.Slice = (function() {
    function Slice(range) {
      this.type = 'Slice';
      this.range = range;
    }

    return Slice;

  })();

  QualifiedName = exports.QualifiedName = (function() {
    function QualifiedName(path) {
      this.type = 'QualifiedName';
      this.path = path;
    }

    return QualifiedName;

  })();

  Assign = exports.Assign = (function() {
    function Assign(operator, left, right) {
      this.type = 'Assign';
      this.operator = operator;
      this.left = left;
      this.right = right;
    }

    return Assign;

  })();

  GetKeyAssign = exports.GetKeyAssign = (function() {
    function GetKeyAssign(keys, source) {
      this.type = 'GetKeyAssign';
      this.keys = keys;
      this.source = source;
    }

    return GetKeyAssign;

  })();

  Constant = exports.Constant = (function() {
    function Constant(left, right) {
      this.type = 'Constant';
      this.left = left;
      this.right = right;
    }

    return Constant;

  })();

  Unary = exports.Unary = (function() {
    function Unary(operator, expression) {
      this.type = 'Unary';
      this.operator = operator;
      this.expression = expression;
    }

    return Unary;

  })();

  Update = exports.Update = (function() {
    function Update(operator, expression, prefix) {
      if (prefix == null) {
        prefix = true;
      }
      this.type = 'Update';
      this.operator = operator;
      this.expression = expression;
      this.prefix = prefix;
    }

    return Update;

  })();

  Operation = exports.Operation = (function() {
    function Operation(operator, left, right) {
      this.type = 'Operation';
      this.operator = operator;
      this.left = left;
      this.right = right;
    }

    return Operation;

  })();

  Code = exports.Code = (function() {
    function Code(parameters, body, asStatement, name) {
      if (asStatement == null) {
        asStatement = false;
      }
      if (name == null) {
        name = null;
      }
      this.type = 'Code';
      this.parameters = parameters;
      this.body = body;
      this.asStatement = asStatement;
      this.name = name;
    }

    return Code;

  })();

  Param = exports.Param = (function() {
    function Param(name, passing, hasDefault, def) {
      if (passing == null) {
        passing = false;
      }
      if (hasDefault == null) {
        hasDefault = false;
      }
      if (def == null) {
        def = null;
      }
      this.type = 'Param';
      this.name = name;
      this.passing = passing;
      this.hasDefault = hasDefault;
      this["default"] = def;
    }

    return Param;

  })();

  If = exports.If = (function() {
    function If(condition, body, invert) {
      if (invert == null) {
        invert = false;
      }
      this.type = 'If';
      this.condition = invert ? new Unary("!", condition) : condition;
      this.body = body;
      this.elses = [];
    }

    If.prototype.addElse = function(element) {
      this.elses.push(element);
      return this;
    };

    return If;

  })();

  ElseIf = exports.ElseIf = (function() {
    function ElseIf(condition, body) {
      this.type = 'ElseIf';
      this.condition = condition;
      this.body = body;
    }

    return ElseIf;

  })();

  Else = exports.Else = (function() {
    function Else(body) {
      this.type = 'Else';
      this.body = body;
    }

    return Else;

  })();

  While = exports.While = (function() {
    function While(test, invert, guard, block) {
      if (invert == null) {
        invert = false;
      }
      if (guard == null) {
        guard = null;
      }
      if (block == null) {
        block = null;
      }
      this.type = 'While';
      this.test = invert ? new Unary("!", test) : test;
      this.guard = guard;
      this.body = block;
      if (block !== null) {
        delete this.guard;
      }
    }

    While.prototype.addBody = function(block) {
      this.body = this.guard !== null ? new Block([new If(this.guard, block.body)]) : block;
      delete this.guard;
      return this;
    };

    return While;

  })();

  Try = exports.Try = (function() {
    function Try(TryBody, CatchBody, CatchIdentifier, FinallyBody) {
      if (CatchBody == null) {
        CatchBody = new Block;
      }
      if (CatchIdentifier == null) {
        CatchIdentifier = false;
      }
      if (FinallyBody == null) {
        FinallyBody = false;
      }
      this.type = 'Try';
      this.TryBody = TryBody;
      this.CatchBody = CatchBody;
      this.CatchIdentifier = CatchIdentifier;
      this.FinallyBody = FinallyBody;
    }

    return Try;

  })();

  For = exports.For = (function() {
    function For(properties, block) {
      this.type = 'For';
      this.properties = properties;
      this.body = block;
    }

    return For;

  })();

  Switch = exports.Switch = (function() {
    function Switch(subject, whens, otherwise) {
      if (otherwise == null) {
        otherwise = null;
      }
      this.type = 'Switch';
      this.subject = subject;
      this.whens = whens;
      this.otherwise = otherwise;
    }

    return Switch;

  })();

  Declare = exports.Declare = (function() {
    function Declare(expression, script) {
      if (script == null) {
        script = false;
      }
      this.type = 'Declare';
      this.expression = expression;
      this.script = script;
    }

    return Declare;

  })();

  Section = exports.Section = (function() {
    function Section(name) {
      this.type = 'Section';
      this.name = name;
    }

    return Section;

  })();

  Goto = exports.Goto = (function() {
    function Goto(section) {
      this.type = 'Goto';
      this.section = section;
    }

    return Goto;

  })();

  Break = exports.Break = (function() {
    function Break(arg) {
      if (arg == null) {
        arg = false;
      }
      this.type = 'Break';
      this.arg = arg;
    }

    return Break;

  })();

  Continue = exports.Continue = (function() {
    function Continue(arg) {
      if (arg == null) {
        arg = false;
      }
      this.type = 'Continue';
      this.arg = arg;
    }

    return Continue;

  })();

  Return = exports.Return = (function() {
    function Return(value) {
      if (value == null) {
        value = false;
      }
      this.type = 'Return';
      this.value = value;
    }

    return Return;

  })();

  Throw = exports.Throw = (function() {
    function Throw(expression) {
      this.type = 'Throw';
      this.expression = expression;
    }

    return Throw;

  })();

  Echo = exports.Echo = (function() {
    function Echo(value) {
      this.type = 'Echo';
      this.value = value;
    }

    return Echo;

  })();

  Delete = exports.Delete = (function() {
    function Delete(value) {
      this.type = 'Delete';
      this.value = value;
    }

    return Delete;

  })();

  Class = exports.Class = (function() {
    function Class(name, body, extendable, implement, modifier) {
      if (extendable == null) {
        extendable = false;
      }
      if (implement == null) {
        implement = false;
      }
      if (modifier == null) {
        modifier = false;
      }
      this.type = "Class";
      this.name = name;
      this.body = body;
      this.extendable = extendable;
      this.implement = implement;
      this.modifier = modifier;
    }

    return Class;

  })();

  ClassLine = exports.ClassLine = (function() {
    function ClassLine(visibility, statically, element) {
      this.type = 'ClassLine';
      this.abstract = false;
      this.visibility = visibility;
      this.statically = statically;
      this.element = element;
    }

    return ClassLine;

  })();

  Interface = exports.Interface = (function() {
    function Interface(name, body, extendable) {
      if (extendable == null) {
        extendable = false;
      }
      this.type = "Interface";
      this.name = name;
      this.body = body;
      this.extendable = extendable;
    }

    return Interface;

  })();

  Namespace = exports.Namespace = (function() {
    function Namespace(name, body) {
      if (body == null) {
        body = false;
      }
      this.type = 'Namespace';
      this.name = Namespace;
      this.body = body;
    }

    return Namespace;

  })();

}).call(this);
