import "package:mammouth/src/language/common/ast/token.dart" show TokenKind;

const List<String> booleans = const <String>["false", "true"];

const Map<String, TokenKind> keywords = const <String, TokenKind>{
  "abstract": TokenKind.ABSTRACT,
  "as": TokenKind.AS,
  "break": TokenKind.BREAK,
  "by": TokenKind.BY,
  "case": TokenKind.CASE,
  "catch": TokenKind.CATCH,
  "class": TokenKind.CLASS,
  "constructor": TokenKind.CONSTRUCTOR,
  "continue": TokenKind.CONTINUE,
  "default": TokenKind.DEFAULT,
  "echo": TokenKind.ECHO,
  "else": TokenKind.ELSE,
  "extends": TokenKind.EXTENDS,
  "finally": TokenKind.FINALLY,
  "for": TokenKind.FOR,
  "if": TokenKind.IF,
  "implements": TokenKind.IMPLEMENTS,
  "import": TokenKind.IMPORT,
  "in": TokenKind.IN,
  "inline": TokenKind.INLINE,
  "interface": TokenKind.INTERFACE,
  "loop": TokenKind.LOOP,
  "native": TokenKind.NATIVE,
  "new": TokenKind.NEW,
  "of": TokenKind.OF,
  "private": TokenKind.PRIVATE,
  "protected": TokenKind.PROTECTED,
  "public": TokenKind.PUBLIC,
  "return": TokenKind.RETURN,
  "static": TokenKind.STATIC,
  "switch": TokenKind.SWITCH,
  "then": TokenKind.THEN,
  "throw": TokenKind.THROW,
  "to": TokenKind.TO,
  "try": TokenKind.TRY,
  "unless": TokenKind.UNLESS,
  "until": TokenKind.UNTIL,
  "when": TokenKind.WHEN,
  "while": TokenKind.WHILE
};
