// Generated by CoffeeScript 1.9.3
(function() {
  var Context, IndentGenerator, Mammouth, PHP, Predefined, System, lexer, parser, yy;

  yy = require('./nodes');

  parser = require('./parser').parser;

  lexer = require('./lexer');

  Context = require('./context');

  Predefined = require('./predefined');

  IndentGenerator = require('./utils').IndentGenerator;

  PHP = require('./php');

  parser.lexer = lexer;

  parser.yy = yy;

  System = (function() {
    function System() {
      this.indent = new IndentGenerator;
      this.context = new Context.Context(new Context.Scope);
      Predefined.Initialize(this.context);
      this.config = {};
      this.setDefaultConfig();
    }

    System.prototype.setDefaultConfig = function() {
      this.config['+'] = true;
      return this.config['import'] = false;
    };

    System.prototype.setStrictMode = function() {
      this.config['+'] = false;
      return this.config['import'] = false;
    };

    return System;

  })();

  Mammouth = (function() {
    Mammouth.VERSION = '3.0.0';

    function Mammouth() {
      this._fs = require('fs');
      this._path = require('path');
    }

    Mammouth.prototype.compile = function(file) {
      var code, result;
      code = this._fs.readFileSync(file, 'utf8');
      this.path = this._path.dirname(file);
      this.system = new System;
      this.system.config['import'] = true;
      this.system.Mammouth = this;
      result = Mammouth.compile(code, this.system);
      return result;
    };

    Mammouth.prototype.contextify = function(file) {
      var code, path, path2, type;
      path = this._path.join(this.path, file);
      type = 'php';
      switch (this._path.extname(path)) {
        case '.php':
          type = 'php';
          break;
        case '.mammouth':
          type = 'mammouth';
          break;
        default:
          return;
      }
      if (this._fs.existsSync(path)) {
        code = this._fs.readFileSync(path, 'utf8');
        if (type === 'mammouth') {
          Mammouth.compile(code, this.system);
        } else if (type === 'php') {
          PHP.compile(code, this.system);
        }
        return;
      }
      if (type === 'php') {
        path2 = this._path.join(this._path.dirname(path), path.basename(path, '.php'), '.mammouth');
        if (this._fs.existsSync(path2)) {
          code = this._fs.readFileSync(path2, 'utf8');
          Mammouth.compile(path2, this.system);
        }
      }
    };

    Mammouth.parser = parser;

    Mammouth.parse = function(code) {
      return Mammouth.parser.parse(code);
    };

    Mammouth.compile = function(code, sys) {
      var result, system, tree;
      if (sys == null) {
        sys = false;
      }
      if (sys === false) {
        system = new System;
      } else {
        system = sys;
      }
      tree = Mammouth.parse(code);
      return result = tree.prepare().compile(system);
    };

    Mammouth.contextify = function(code, sys) {
      var result, system;
      if (sys == null) {
        sys = false;
      }
      if (sys === false) {
        system = new System;
      } else {
        system = sys;
      }
      result = Mammouth.compile(system, system);
      return system.context;
    };

    return Mammouth;

  })();

  module.exports = Mammouth;

}).call(this);
