/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,6,8],$V3=[1,10],$V4=[1,40],$V5=[1,42],$V6=[1,46],$V7=[1,43],$V8=[1,38],$V9=[1,39],$Va=[1,44],$Vb=[1,45],$Vc=[1,35],$Vd=[1,27],$Ve=[1,28],$Vf=[1,29],$Vg=[1,30],$Vh=[1,32],$Vi=[1,33],$Vj=[1,34],$Vk=[9,11,12,15,29,41,50,51,59,67,71,72,73,74,75,76,77,78,79,80,82,83],$Vl=[12,15],$Vm=[1,57],$Vn=[1,51],$Vo=[1,49],$Vp=[1,50],$Vq=[1,52],$Vr=[1,53],$Vs=[1,54],$Vt=[1,55],$Vu=[1,56],$Vv=[1,58],$Vw=[1,59],$Vx=[1,60],$Vy=[1,61],$Vz=[11,12,15,29,41,50,51,59,67,71,72,73,74,75,76,77,78,79,80,82,83],$VA=[1,64],$VB=[1,67],$VC=[1,68],$VD=[1,69],$VE=[1,70],$VF=[1,66],$VG=[11,12,15,29,30,37,38,39,40,41,50,51,53,58,59,67,71,72,73,74,75,76,77,78,79,80,82,83],$VH=[2,20],$VI=[1,77],$VJ=[11,12,15,29,30,37,38,39,40,41,50,51,52,53,58,59,67,71,72,73,74,75,76,77,78,79,80,82,83],$VK=[2,26],$VL=[11,12,15,29,30,37,38,39,40,41,50,51,52,53,58,59,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83],$VM=[1,92],$VN=[11,12,15,29,30,37,38,39,40,41,50,51,58,59,67,71,72,73,74,75,76,77,78,79,80,82,83],$VO=[29,50],$VP=[1,123],$VQ=[1,121],$VR=[1,122],$VS=[11,12,15,29,41,50,51,59,67,71,72,73,78,79,80,82,83],$VT=[2,50],$VU=[1,128],$VV=[11,12,15,41,50,59],$VW=[11,12,15,29,41,50,51,59,67,79],$VX=[11,12,15,29,41,50,51,59,67,79,80,82,83],$VY=[11,12,15,29,41,50,51,59],$VZ=[29,50,52],$V_=[1,141],$V$=[1,140],$V01=[11,12,15];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Sections":4,"Section":5,"RAW":6,"Script":7,"{{":8,"}}":9,"Block":10,"INDENT":11,"OUTDENT":12,"Instructions":13,"Instruction":14,"MINDENT":15,"Expression":16,"Value":17,"Invocation":18,"Code":19,"Operation":20,"Assign":21,"Casting":22,"Clone":23,"Assignable":24,"Literal":25,"Parenthetical":26,"Existence":27,"(":28,")":29,"?":30,"SimpleAssignable":31,"Array":32,"Identifier":33,"Accessor":34,"@":35,"IDENTIFIER":36,".":37,"..":38,"::":39,"[":40,"]":41,"AlphaNumeric":42,"BOOL":43,"NULL":44,"NUMBER":45,"STRING":46,"ArgList":47,"OptComma":48,"Arg":49,",":50,":":51,"=":52,"=>":53,"CASTTYPE":54,"CLONE":55,"Arguments":56,"NEW":57,"CALL_START":58,"CALL_END":59,"FUNC":60,"ParametersList":61,"FuncGlyph":62,"->":63,"Param":64,"ParamVar":65,"USE":66,"&":67,"--":68,"++":69,"NOT":70,"-":71,"+":72,"CONCAT":73,"*":74,"**":75,"/":76,"%":77,"BITWISE":78,"LOGIC":79,"COMPARE":80,"ASSIGN":81,"INSTANCEOF":82,"IN":83,"$accept":0,"$end":1},
terminals_: {2:"error",6:"RAW",8:"{{",9:"}}",11:"INDENT",12:"OUTDENT",15:"MINDENT",28:"(",29:")",30:"?",35:"@",36:"IDENTIFIER",37:".",38:"..",39:"::",40:"[",41:"]",43:"BOOL",44:"NULL",45:"NUMBER",46:"STRING",50:",",51:":",52:"=",53:"=>",54:"CASTTYPE",55:"CLONE",57:"NEW",58:"CALL_START",59:"CALL_END",60:"FUNC",63:"->",66:"USE",67:"&",68:"--",69:"++",70:"NOT",71:"-",72:"+",73:"CONCAT",74:"*",75:"**",76:"/",77:"%",78:"BITWISE",79:"LOGIC",80:"COMPARE",81:"ASSIGN",82:"INSTANCEOF",83:"IN"},
productions_: [0,[3,1],[4,1],[4,2],[5,1],[5,1],[7,2],[7,3],[10,2],[10,3],[13,1],[13,3],[14,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[17,1],[17,1],[17,1],[17,1],[26,3],[27,2],[24,1],[24,1],[31,1],[31,2],[31,2],[33,1],[34,2],[34,2],[34,2],[34,3],[25,1],[25,1],[25,1],[42,1],[42,1],[32,2],[32,4],[47,1],[47,3],[47,4],[47,4],[47,6],[49,1],[49,3],[48,0],[48,1],[21,3],[21,5],[22,3],[23,2],[18,2],[18,2],[18,3],[56,2],[56,4],[19,6],[19,3],[62,1],[61,0],[61,1],[61,3],[64,1],[64,2],[64,3],[65,2],[65,1],[20,2],[20,2],[20,2],[20,2],[20,2],[20,2],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return new yy.Document($$[$0]);
break;
case 2: case 10: case 43: case 65:
this.$ = [$$[$0]];
break;
case 3:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 4:
this.$ = new yy.RawText($$[$0]);
break;
case 5: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 26: case 27: case 36: case 48: case 50: case 51: case 67:
this.$ = $$[$0];
break;
case 6:
this.$ = new yy.Script(new yy.Block([]));
break;
case 7:
this.$ = new yy.Script($$[$0-1]);
break;
case 8:
this.$ = new yy.Block([]);
break;
case 9:
this.$ = new yy.Block($$[$0-1]);
break;
case 11: case 44: case 66:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 21: case 22: case 23: case 28:
this.$ = new yy.Value($$[$0]);
break;
case 24:
this.$ = new yy.Parens($$[$0-1]);
break;
case 25:
this.$ = new yy.Existence($$[$0-1]);
break;
case 29:
$$[$0-1].add($$[$0]); this.$ = $$[$0-1];
break;
case 30:
var value = new yy.Value(new yy.Identifier("this")); value.add(new yy.Access($$[$0])); this.$ = value;
break;
case 31:
this.$ = new yy.Identifier($$[$0]);
break;
case 32:
this.$ = new yy.Access($$[$0]);
break;
case 33:
this.$ = new yy.Access($$[$0], "..");
break;
case 34:
this.$ = new yy.Access($$[$0], "::");
break;
case 35:
this.$ = new yy.Access($$[$0-1], "[]");
break;
case 37: case 39: case 40:
this.$ = new yy.Literal($$[$0]);
break;
case 38:
this.$ = new yy.Literal("null");
break;
case 41:
this.$ = new yy.Array();
break;
case 42:
this.$ = new yy.Array($$[$0-2]);
break;
case 45:
this.$ = $$[$0-3].concat($$[$0]);
break;
case 46: case 60:
this.$ = $$[$0-2];
break;
case 47:
this.$ = $$[$0-5].concat($$[$0-2]);
break;
case 49:
this.$ = new yy.ArrayKey($$[$0-2], $$[$0]);
break;
case 52:
this.$ = new yy.Assign("=", $$[$0-2], $$[$0]);
break;
case 53:
this.$ = new yy.Assign("=", $$[$0-4], $$[$0-1]);
break;
case 54:
this.$ = new yy.typeCasting($$[$0-2], $$[$0]);
break;
case 55:
this.$ = new yy.Clone($$[$0]);
break;
case 56:
this.$ = new yy.Call($$[$0-1], $$[$0]);
break;
case 57:
this.$ = new yy.NewExpression($$[$0]);
break;
case 58:
this.$ = new yy.NewExpression($$[$0-1], $$[$0]);
break;
case 59: case 64:
this.$ = [];
break;
case 61:
this.$ = new yy.Code($$[$0-3], $$[$0]);
break;
case 62:
this.$ = new yy.Code([], $$[$0]);
break;
case 63:

break;
case 68:
$$[$0].passing = true; this.$ = $$[$0];
break;
case 69:
$$[$0-2].hasDefault = true; $$[$0-2].default = $$[$0]; this.$ = $$[$0-2];
break;
case 70:
this.$ = new yy.Param(yytext, true);
break;
case 71:
this.$ = new yy.Param(yytext);
break;
case 72:
this.$ = new yy.Update("--", $$[$0]);
break;
case 73:
this.$ = new yy.Update("++", $$[$0]);
break;
case 74:
this.$ = new yy.Update("--", $$[$0-1], false);
break;
case 75:
this.$ = new yy.Update("++", $$[$0-1], false);
break;
case 76:
this.$ = new yy.Unary("!", $$[$0]);
break;
case 77:
this.$ = new yy.Unary("-", $$[$0]);
break;
case 78:
this.$ = new yy.Unary("+", $$[$0]);
break;
case 79:
this.$ = new yy.Operation("+", $$[$0-2], $$[$0]);
break;
case 80:
this.$ = new yy.Operation("~", $$[$0-2], $$[$0]);
break;
case 81:
this.$ = new yy.Operation("-", $$[$0-2], $$[$0]);
break;
case 82:
this.$ = new yy.Operation("*", $$[$0-2], $$[$0]);
break;
case 83:
this.$ = new yy.Operation("**", $$[$0-2], $$[$0]);
break;
case 84:
this.$ = new yy.Operation("/", $$[$0-2], $$[$0]);
break;
case 85:
this.$ = new yy.Operation("%", $$[$0-2], $$[$0]);
break;
case 86: case 88: case 89:
this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]);
break;
case 87:
this.$ = new yy.Operation("&", $$[$0-2], $$[$0]);
break;
case 90:
this.$ = new yy.Assign($$[$0-1], $$[$0-2], $$[$0]);
break;
case 91:
this.$ = new yy.Operation("instanceof", $$[$0-2], $$[$0]);
break;
case 92:
this.$ = new yy.Operation("in", $$[$0-2], $$[$0]);
break;
}
},
table: [{3:1,4:2,5:3,6:$V0,7:5,8:$V1},{1:[3]},{1:[2,1],5:7,6:$V0,7:5,8:$V1},o($V2,[2,2]),o($V2,[2,4]),o($V2,[2,5]),{9:[1,8],10:9,11:$V3},o($V2,[2,3]),o($V2,[2,6]),{9:[1,11]},{12:[1,12],13:13,14:14,16:15,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},o($V2,[2,7]),o($Vk,[2,8]),{12:[1,47],15:[1,48]},o($Vl,[2,10]),o($Vl,[2,12],{67:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,82:$Vx,83:$Vy}),o($Vz,[2,13],{56:62,34:65,30:$VA,37:$VB,38:$VC,39:$VD,40:$VE,53:[1,63],58:$VF}),o($Vz,[2,14]),o($Vz,[2,15]),o($Vz,[2,16]),o($Vz,[2,17]),o($Vz,[2,18]),o($Vz,[2,19]),o($VG,$VH,{52:[1,71]}),o($VG,[2,21]),o($VG,[2,22]),o($VG,[2,23]),{17:72,24:73,25:24,26:25,27:26,28:$V4,31:74,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb},{28:[1,75],62:76,63:$VI},{16:78,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:79,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},o($VJ,$VK,{68:[1,80],69:[1,81],81:[1,82]}),{16:83,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:84,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:85,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{17:86,24:73,25:24,26:25,27:26,28:$V4,31:74,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb},o($VJ,[2,27]),o($VG,[2,36]),o($VG,[2,37]),o($VG,[2,38]),{16:87,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},o($VL,[2,28]),{33:88,36:$V6},{11:$VM,16:93,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,41:[1,89],42:37,43:$V8,44:$V9,45:$Va,46:$Vb,47:90,49:91,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},o($VG,[2,39]),o($VG,[2,40]),o($VL,[2,31]),o($Vk,[2,9]),{14:94,16:15,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:95,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:96,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:97,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:98,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:99,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:100,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:101,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:102,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:103,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:104,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:105,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:106,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{16:107,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},o($Vz,[2,56]),{54:[1,108]},o($VG,[2,25]),o($VL,[2,29]),{11:$VM,16:93,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,47:110,49:91,55:$Vc,57:$Vd,59:[1,109],60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{33:111,36:$V6},{33:112,36:$V6},{33:113,36:$V6},{16:114,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{11:[1,116],16:115,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},o($Vz,[2,57],{34:65,56:117,30:$VA,37:$VB,38:$VC,39:$VD,40:$VE,58:$VF}),o($VN,$VH),o($VN,$VK),o($VO,[2,64],{61:118,64:119,65:120,36:$VP,66:$VQ,67:$VR}),{10:124,11:$V3},{11:[2,63]},o($Vz,[2,72]),o($Vz,[2,73]),o($Vz,[2,74]),o($Vz,[2,75]),{16:125,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},o($Vz,[2,76]),o($VS,[2,77],{74:$Vq,75:$Vr,76:$Vs,77:$Vt}),o($VS,[2,78],{74:$Vq,75:$Vr,76:$Vs,77:$Vt}),o($Vz,[2,55],{34:65,30:$VA,37:$VB,38:$VC,39:$VD,40:$VE}),{29:[1,126],67:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,82:$Vx,83:$Vy},o($VL,[2,30]),o($VJ,[2,41]),o([11,15,41],$VT,{48:127,50:$VU}),o($VV,[2,43]),{11:$VM,16:93,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,47:129,49:91,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},o($VV,[2,48],{51:[1,130],67:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,82:$Vx,83:$Vy}),o($Vl,[2,11]),o($VS,[2,79],{74:$Vq,75:$Vr,76:$Vs,77:$Vt}),o($VS,[2,80],{74:$Vq,75:$Vr,76:$Vs,77:$Vt}),o($VS,[2,81],{74:$Vq,75:$Vr,76:$Vs,77:$Vt}),o($Vz,[2,82]),o($Vz,[2,83]),o($Vz,[2,84]),o($Vz,[2,85]),o([11,12,15,29,41,50,51,59,67,78,79,80,82,83],[2,86],{71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt}),o($VW,[2,87],{71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vw,82:$Vx,83:$Vy}),o($VW,[2,88],{71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vw,82:$Vx,83:$Vy}),o([11,12,15,29,41,50,51,59,67,79,80],[2,89],{71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,82:$Vx,83:$Vy}),o($VX,[2,91],{71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu}),o($VX,[2,92],{71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu}),o($Vz,[2,54]),o($Vz,[2,59]),o([11,15,59],$VT,{48:131,50:$VU}),o($VL,[2,32]),o($VL,[2,33]),o($VL,[2,34]),{41:[1,132],67:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,82:$Vx,83:$Vy},o($VY,[2,52],{67:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,82:$Vx,83:$Vy}),{16:133,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},o($Vz,[2,58]),{29:[1,134],50:[1,135]},o($VO,[2,65]),o($VO,[2,67],{52:[1,136]}),{36:$VP,65:137,67:$VR},{36:[1,138]},o($VZ,[2,71]),o($Vz,[2,62]),o($VY,[2,90],{67:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,82:$Vx,83:$Vy}),o($VG,[2,24]),{11:$V_,15:$V$,41:[1,139]},o([11,12,15,41,59],[2,51],{17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,31:31,32:36,42:37,33:41,16:93,49:142,28:$V4,35:$V5,36:$V6,40:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj}),o($V01,$VT,{48:143,50:$VU}),{16:144,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{11:$V_,15:$V$,59:[1,145]},o($VL,[2,35]),{12:[1,146],67:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,82:$Vx,83:$Vy},{62:147,63:$VI},{36:$VP,64:148,65:120,66:$VQ,67:$VR},{16:149,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},o($VO,[2,68]),o($VZ,[2,70]),o($VJ,[2,42]),{16:93,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,49:150,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{11:$VM,16:93,17:16,18:17,19:18,20:19,21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V4,31:31,32:36,33:41,35:$V5,36:$V6,40:$V7,42:37,43:$V8,44:$V9,45:$Va,46:$Vb,47:151,49:91,55:$Vc,57:$Vd,60:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},o($VV,[2,44]),{11:$V_,12:[1,152],15:$V$},o($VV,[2,49],{67:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,82:$Vx,83:$Vy}),o($Vz,[2,60]),o($Vz,[2,53]),{10:153,11:$V3},o($VO,[2,66]),o($VO,[2,69],{67:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,82:$Vx,83:$Vy}),o($VV,[2,45]),o($V01,$VT,{48:154,50:$VU}),o($VV,[2,46]),o($Vz,[2,61]),{11:$V_,12:[1,155],15:$V$},o($VV,[2,47])],
defaultActions: {77:[2,63]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}