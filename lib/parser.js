/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,6,8],$V3=[1,35],$V4=[1,37],$V5=[1,41],$V6=[1,38],$V7=[1,33],$V8=[1,34],$V9=[1,39],$Va=[1,40],$Vb=[1,30],$Vc=[1,23],$Vd=[1,24],$Ve=[1,25],$Vf=[1,27],$Vg=[1,28],$Vh=[1,29],$Vi=[13,15],$Vj=[1,46],$Vk=[1,44],$Vl=[1,45],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[11,13,15,26,37,46,47,54,58,59,60,61,62,63,64,65,66,67,69,70],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[1,59],$VB=[11,13,15,26,33,34,35,36,37,46,47,48,53,54,58,59,60,61,62,63,64,65,66,67,69,70],$VC=[2,21],$VD=[11,13,15,26,33,34,35,36,37,46,47,48,53,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70],$VE=[1,80],$VF=[11,13,15,26,37,46,47,54,58,59,60,65,66,67,69,70],$VG=[2,45],$VH=[1,106],$VI=[11,13,15,37,46,54],$VJ=[11,13,15,26,37,46,47,54,66,67,69,70],$VK=[1,113],$VL=[1,112],$VM=[11,13,15];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Sections":4,"Section":5,"RAW":6,"Script":7,"{{":8,"}}":9,"Block":10,"INDENT":11,"Instructions":12,"OUTDENT":13,"Instruction":14,"MINDENT":15,"Expression":16,"Value":17,"Invocation":18,"Operation":19,"Casting":20,"Clone":21,"Assignable":22,"Literal":23,"Parenthetical":24,"(":25,")":26,"SimpleAssignable":27,"Array":28,"Identifier":29,"Accessor":30,"@":31,"IDENTIFIER":32,".":33,"..":34,"::":35,"[":36,"]":37,"AlphaNumeric":38,"BOOL":39,"NULL":40,"NUMBER":41,"STRING":42,"ArgList":43,"OptComma":44,"Arg":45,",":46,":":47,"=>":48,"CASTTYPE":49,"CLONE":50,"Arguments":51,"NEW":52,"CALL_START":53,"CALL_END":54,"--":55,"++":56,"NOT":57,"-":58,"+":59,"CONCAT":60,"*":61,"**":62,"/":63,"%":64,"BITWISE":65,"LOGIC":66,"COMPARE":67,"ASSIGN":68,"INSTANCEOF":69,"IN":70,"$accept":0,"$end":1},
terminals_: {2:"error",6:"RAW",8:"{{",9:"}}",11:"INDENT",13:"OUTDENT",15:"MINDENT",25:"(",26:")",31:"@",32:"IDENTIFIER",33:".",34:"..",35:"::",36:"[",37:"]",39:"BOOL",40:"NULL",41:"NUMBER",42:"STRING",46:",",47:":",48:"=>",49:"CASTTYPE",50:"CLONE",52:"NEW",53:"CALL_START",54:"CALL_END",55:"--",56:"++",57:"NOT",58:"-",59:"+",60:"CONCAT",61:"*",62:"**",63:"/",64:"%",65:"BITWISE",66:"LOGIC",67:"COMPARE",68:"ASSIGN",69:"INSTANCEOF",70:"IN"},
productions_: [0,[3,1],[4,1],[4,2],[5,1],[5,1],[7,2],[7,3],[10,3],[12,1],[12,3],[14,1],[16,1],[16,1],[16,1],[16,1],[16,1],[17,1],[17,1],[17,1],[24,3],[22,1],[22,1],[27,1],[27,2],[27,2],[29,1],[30,2],[30,2],[30,2],[30,3],[23,1],[23,1],[23,1],[38,1],[38,1],[28,2],[28,4],[43,1],[43,3],[43,4],[43,4],[43,6],[45,1],[45,3],[44,0],[44,1],[20,3],[21,2],[18,2],[18,2],[18,3],[51,2],[51,4],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return new yy.Document($$[$0]);
break;
case 2: case 9: case 38:
this.$ = [$$[$0]];
break;
case 3:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 4:
this.$ = new yy.RawText($$[$0]);
break;
case 5: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 21: case 22: case 31: case 43: case 45: case 46:
this.$ = $$[$0];
break;
case 6:
this.$ = new yy.Script(new yy.Block([]));
break;
case 7:
this.$ = new yy.Script($$[$0-1]);
break;
case 8:
this.$ = new yy.Block($$[$0-1]);
break;
case 10: case 39:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 18: case 19: case 23:
this.$ = new yy.Value($$[$0]);
break;
case 20:
this.$ = new yy.Parens($$[$0-1]);
break;
case 24:
$$[$0-1].add($$[$0]); this.$ = $$[$0-1];
break;
case 25:
var value = new yy.Value(new yy.Identifier("this")); value.add(new yy.Access($$[$0])); this.$ = value;
break;
case 26:
this.$ = new yy.Identifier($$[$0]);
break;
case 27:
this.$ = new yy.Access($$[$0]);
break;
case 28:
this.$ = new yy.Access($$[$0], "..");
break;
case 29:
this.$ = new yy.Access($$[$0], "::");
break;
case 30:
this.$ = new yy.Access($$[$0-1], "[]");
break;
case 32: case 34: case 35:
this.$ = new yy.Literal($$[$0]);
break;
case 33:
this.$ = new yy.Literal("null");
break;
case 36:
this.$ = new yy.Array();
break;
case 37:
this.$ = new yy.Array($$[$0-2]);
break;
case 40:
this.$ = $$[$0-3].concat($$[$0]);
break;
case 41: case 53:
this.$ = $$[$0-2];
break;
case 42:
this.$ = $$[$0-5].concat($$[$0-2]);
break;
case 44:
this.$ = new yy.ArrayKey($$[$0-2], $$[$0]);
break;
case 47:
this.$ = new yy.typeCasting($$[$0-2], $$[$0]);
break;
case 48:
this.$ = new yy.Clone($$[$0]);
break;
case 49:
this.$ = new yy.Call($$[$0-1], $$[$0]);
break;
case 50:
this.$ = new yy.NewExpression($$[$0]);
break;
case 51:
this.$ = new yy.NewExpression($$[$0-1], $$[$0]);
break;
case 52:
this.$ = [];
break;
case 54:
this.$ = new yy.Update("--", $$[$0]);
break;
case 55:
this.$ = new yy.Update("++", $$[$0]);
break;
case 56:
this.$ = new yy.Update("--", $$[$0-1], false);
break;
case 57:
this.$ = new yy.Update("++", $$[$0-1], false);
break;
case 58:
this.$ = new yy.Unary("!", $$[$0]);
break;
case 59:
this.$ = new yy.Unary("-", $$[$0]);
break;
case 60:
this.$ = new yy.Unary("+", $$[$0]);
break;
case 61:
this.$ = new yy.Operation("+", $$[$0-2], $$[$0]);
break;
case 62:
this.$ = new yy.Operation("~", $$[$0-2], $$[$0]);
break;
case 63:
this.$ = new yy.Operation("-", $$[$0-2], $$[$0]);
break;
case 64:
this.$ = new yy.Operation("*", $$[$0-2], $$[$0]);
break;
case 65:
this.$ = new yy.Operation("**", $$[$0-2], $$[$0]);
break;
case 66:
this.$ = new yy.Operation("/", $$[$0-2], $$[$0]);
break;
case 67:
this.$ = new yy.Operation("%", $$[$0-2], $$[$0]);
break;
case 68: case 69: case 70:
this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]);
break;
case 71:
this.$ = new yy.Assign($$[$0-1], $$[$0-2], $$[$0]);
break;
case 72:
this.$ = new yy.Operation("instanceof", $$[$0-2], $$[$0]);
break;
case 73:
this.$ = new yy.Operation("in", $$[$0-2], $$[$0]);
break;
}
},
table: [{3:1,4:2,5:3,6:$V0,7:5,8:$V1},{1:[3]},{1:[2,1],5:7,6:$V0,7:5,8:$V1},o($V2,[2,2]),o($V2,[2,4]),o($V2,[2,5]),{9:[1,8],10:9,11:[1,10]},o($V2,[2,3]),o($V2,[2,6]),{9:[1,11]},{12:12,14:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},o($V2,[2,7]),{13:[1,42],15:[1,43]},o($Vi,[2,9]),o($Vi,[2,11],{58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:$Vu}),o($Vv,[2,12],{51:56,30:58,33:$Vw,34:$Vx,35:$Vy,36:$Vz,48:[1,57],53:$VA}),o($Vv,[2,13]),o($Vv,[2,14]),o($Vv,[2,15]),o($Vv,[2,16]),o($VB,[2,17]),o($VB,[2,18]),o($VB,[2,19]),{17:64,22:20,23:21,24:22,25:$V3,27:65,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va},{16:66,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{16:67,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},o($VB,$VC,{55:[1,68],56:[1,69],68:[1,70]}),{16:71,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{16:72,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{16:73,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{17:74,22:20,23:21,24:22,25:$V3,27:65,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va},o($VB,[2,22]),o($VB,[2,31]),o($VB,[2,32]),o($VB,[2,33]),{16:75,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},o($VD,[2,23]),{29:76,32:$V5},{11:$VE,16:81,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,37:[1,77],38:32,39:$V7,40:$V8,41:$V9,42:$Va,43:78,45:79,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},o($VB,[2,34]),o($VB,[2,35]),o($VD,[2,26]),{9:[2,8]},{14:82,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{16:83,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{16:84,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{16:85,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{16:86,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{16:87,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{16:88,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{16:89,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{16:90,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{16:91,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{16:92,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{16:93,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{16:94,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},o($Vv,[2,49]),{49:[1,95]},o($VD,[2,24]),{11:$VE,16:81,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,43:97,45:79,50:$Vb,52:$Vc,54:[1,96],55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{29:98,32:$V5},{29:99,32:$V5},{29:100,32:$V5},{16:101,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},o($Vv,[2,50],{30:58,51:102,33:$Vw,34:$Vx,35:$Vy,36:$Vz,53:$VA}),o([11,13,15,26,33,34,35,36,37,46,47,53,54,58,59,60,61,62,63,64,65,66,67,69,70],$VC),o($Vv,[2,54]),o($Vv,[2,55]),o($Vv,[2,56]),o($Vv,[2,57]),{16:103,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},o($Vv,[2,58]),o($VF,[2,59],{61:$Vm,62:$Vn,63:$Vo,64:$Vp}),o($VF,[2,60],{61:$Vm,62:$Vn,63:$Vo,64:$Vp}),o($Vv,[2,48],{30:58,33:$Vw,34:$Vx,35:$Vy,36:$Vz}),{26:[1,104],58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:$Vu},o($VD,[2,25]),o($VB,[2,36]),o([11,15,37],$VG,{44:105,46:$VH}),o($VI,[2,38]),{11:$VE,16:81,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,43:107,45:79,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},o($VI,[2,43],{47:[1,108],58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:$Vu}),o($Vi,[2,10]),o($VF,[2,61],{61:$Vm,62:$Vn,63:$Vo,64:$Vp}),o($VF,[2,62],{61:$Vm,62:$Vn,63:$Vo,64:$Vp}),o($VF,[2,63],{61:$Vm,62:$Vn,63:$Vo,64:$Vp}),o($Vv,[2,64]),o($Vv,[2,65]),o($Vv,[2,66]),o($Vv,[2,67]),o([11,13,15,26,37,46,47,54,65,66,67,69,70],[2,68],{58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp}),o([11,13,15,26,37,46,47,54,66],[2,69],{58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,67:$Vs,69:$Vt,70:$Vu}),o([11,13,15,26,37,46,47,54,66,67],[2,70],{58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,69:$Vt,70:$Vu}),o($VJ,[2,72],{58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq}),o($VJ,[2,73],{58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq}),o($Vv,[2,47]),o($Vv,[2,52]),o([11,15,54],$VG,{44:109,46:$VH}),o($VD,[2,27]),o($VD,[2,28]),o($VD,[2,29]),{37:[1,110],58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:$Vu},o($Vv,[2,51]),o([11,13,15,26,37,46,47,54],[2,71],{58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:$Vu}),o($VB,[2,20]),{11:$VK,15:$VL,37:[1,111]},o([11,13,15,37,54],[2,46],{17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,27:26,28:31,38:32,29:36,16:81,45:114,25:$V3,31:$V4,32:$V5,36:$V6,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh}),o($VM,$VG,{44:115,46:$VH}),{16:116,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{11:$VK,15:$VL,54:[1,117]},o($VD,[2,30]),o($VB,[2,37]),{16:81,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,45:118,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},{11:$VE,16:81,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V3,27:26,28:31,29:36,31:$V4,32:$V5,36:$V6,38:32,39:$V7,40:$V8,41:$V9,42:$Va,43:119,45:79,50:$Vb,52:$Vc,55:$Vd,56:$Ve,57:$Vf,58:$Vg,59:$Vh},o($VI,[2,39]),{11:$VK,13:[1,120],15:$VL},o($VI,[2,44],{58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:$Vu}),o($Vv,[2,53]),o($VI,[2,40]),o($VM,$VG,{44:121,46:$VH}),o($VI,[2,41]),{11:$VK,13:[1,122],15:$VL},o($VI,[2,42])],
defaultActions: {42:[2,8]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}