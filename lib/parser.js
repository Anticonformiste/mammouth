/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,6,8],$V3=[1,27],$V4=[1,21],$V5=[1,29],$V6=[1,33],$V7=[1,30],$V8=[1,25],$V9=[1,26],$Va=[1,31],$Vb=[1,32],$Vc=[13,15],$Vd=[11,13,15,24,38,47,48],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[11,13,15,24,25,34,35,36,37,38,47,48],$Vj=[1,48],$Vk=[2,45],$Vl=[1,58],$Vm=[11,13,15,38,47],$Vn=[1,64],$Vo=[1,63],$Vp=[11,13,15];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Sections":4,"Section":5,"RAW":6,"Script":7,"{{":8,"}}":9,"Block":10,"INDENT":11,"Instructions":12,"OUTDENT":13,"Instruction":14,"MINDENT":15,"Expression":16,"Value":17,"Casting":18,"Clone":19,"Assignable":20,"Literal":21,"Parenthetical":22,"(":23,")":24,"=>":25,"CASTTYPE":26,"CLONE":27,"SimpleAssignable":28,"Array":29,"Identifier":30,"Accessor":31,"@":32,"IDENTIFIER":33,".":34,"..":35,"::":36,"[":37,"]":38,"AlphaNumeric":39,"BOOL":40,"NULL":41,"NUMBER":42,"STRING":43,"ArgList":44,"OptComma":45,"Arg":46,",":47,":":48,"$accept":0,"$end":1},
terminals_: {2:"error",6:"RAW",8:"{{",9:"}}",11:"INDENT",13:"OUTDENT",15:"MINDENT",23:"(",24:")",25:"=>",26:"CASTTYPE",27:"CLONE",32:"@",33:"IDENTIFIER",34:".",35:"..",36:"::",37:"[",38:"]",40:"BOOL",41:"NULL",42:"NUMBER",43:"STRING",47:",",48:":"},
productions_: [0,[3,1],[4,1],[4,2],[5,1],[5,1],[7,2],[7,3],[10,3],[12,1],[12,3],[14,1],[16,1],[16,1],[16,1],[17,1],[17,1],[17,1],[22,3],[18,3],[19,2],[20,1],[20,1],[28,1],[28,2],[28,2],[30,1],[31,2],[31,2],[31,2],[31,3],[21,1],[21,1],[21,1],[39,1],[39,1],[29,2],[29,4],[44,1],[44,3],[44,4],[44,4],[44,6],[46,1],[46,3],[45,0],[45,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return new yy.Document($$[$0]);
break;
case 2: case 9: case 38:
this.$ = [$$[$0]];
break;
case 3:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 4:
this.$ = new yy.RawText($$[$0]);
break;
case 5: case 11: case 12: case 13: case 14: case 15: case 21: case 22: case 31: case 43: case 45: case 46:
this.$ = $$[$0];
break;
case 6:
this.$ = new yy.Script(new yy.Block([]));
break;
case 7:
this.$ = new yy.Script($$[$0-1]);
break;
case 8:
this.$ = new yy.Block($$[$0-1]);
break;
case 10: case 39:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 16: case 17: case 23:
this.$ = new yy.Value($$[$0]);
break;
case 18:
this.$ = new yy.Parens($$[$0-1]);
break;
case 19:
this.$ = new yy.typeCasting($$[$0-2], $$[$0]);
break;
case 20:
this.$ = new yy.Clone($$[$0]);
break;
case 24:
$$[$0-1].add($$[$0]); this.$ = $$[$0-1];
break;
case 25:
var value = new yy.Value(new yy.Identifier("this")); value.add(new yy.Access($$[$0])); this.$ = value;
break;
case 26:
this.$ = new yy.Identifier($$[$0]);
break;
case 27:
this.$ = new yy.Access($$[$0]);
break;
case 28:
this.$ = new yy.Access($$[$0], "..");
break;
case 29:
this.$ = new yy.Access($$[$0], "::");
break;
case 30:
this.$ = new yy.Access($$[$0-1], "[]");
break;
case 32: case 34: case 35:
this.$ = new yy.Literal($$[$0]);
break;
case 33:
this.$ = new yy.Literal("null");
break;
case 36:
this.$ = new yy.Array();
break;
case 37:
this.$ = new yy.Array($$[$0-2]);
break;
case 40:
this.$ = $$[$0-3].concat($$[$0]);
break;
case 41:
this.$ = $$[$0-2];
break;
case 42:
this.$ = $$[$0-5].concat($$[$0-2]);
break;
case 44:
this.$ = new yy.ArrayKey($$[$0-2], $$[$0]);
break;
}
},
table: [{3:1,4:2,5:3,6:$V0,7:5,8:$V1},{1:[3]},{1:[2,1],5:7,6:$V0,7:5,8:$V1},o($V2,[2,2]),o($V2,[2,4]),o($V2,[2,5]),{9:[1,8],10:9,11:[1,10]},o($V2,[2,3]),o($V2,[2,6]),{9:[1,11]},{12:12,14:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:$V3,27:$V4,28:22,29:23,30:28,32:$V5,33:$V6,37:$V7,39:24,40:$V8,41:$V9,42:$Va,43:$Vb},o($V2,[2,7]),{13:[1,34],15:[1,35]},o($Vc,[2,9]),o($Vc,[2,11]),o($Vd,[2,12],{31:37,25:[1,36],34:$Ve,35:$Vf,36:$Vg,37:$Vh}),o($Vd,[2,13]),o($Vd,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),{17:42,20:18,21:19,22:20,23:$V3,28:22,29:23,30:28,32:$V5,33:$V6,37:$V7,39:24,40:$V8,41:$V9,42:$Va,43:$Vb},o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,31]),o($Vi,[2,32]),o($Vi,[2,33]),{16:43,17:15,18:16,19:17,20:18,21:19,22:20,23:$V3,27:$V4,28:22,29:23,30:28,32:$V5,33:$V6,37:$V7,39:24,40:$V8,41:$V9,42:$Va,43:$Vb},o($Vi,[2,23]),{30:44,33:$V6},{11:$Vj,16:49,17:15,18:16,19:17,20:18,21:19,22:20,23:$V3,27:$V4,28:22,29:23,30:28,32:$V5,33:$V6,37:$V7,38:[1,45],39:24,40:$V8,41:$V9,42:$Va,43:$Vb,44:46,46:47},o($Vi,[2,34]),o($Vi,[2,35]),o($Vi,[2,26]),{9:[2,8]},{14:50,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:$V3,27:$V4,28:22,29:23,30:28,32:$V5,33:$V6,37:$V7,39:24,40:$V8,41:$V9,42:$Va,43:$Vb},{26:[1,51]},o($Vi,[2,24]),{30:52,33:$V6},{30:53,33:$V6},{30:54,33:$V6},{16:55,17:15,18:16,19:17,20:18,21:19,22:20,23:$V3,27:$V4,28:22,29:23,30:28,32:$V5,33:$V6,37:$V7,39:24,40:$V8,41:$V9,42:$Va,43:$Vb},o($Vd,[2,20],{31:37,34:$Ve,35:$Vf,36:$Vg,37:$Vh}),{24:[1,56]},o($Vi,[2,25]),o($Vi,[2,36]),o([11,15,38],$Vk,{45:57,47:$Vl}),o($Vm,[2,38]),{11:$Vj,16:49,17:15,18:16,19:17,20:18,21:19,22:20,23:$V3,27:$V4,28:22,29:23,30:28,32:$V5,33:$V6,37:$V7,39:24,40:$V8,41:$V9,42:$Va,43:$Vb,44:59,46:47},o($Vm,[2,43],{48:[1,60]}),o($Vc,[2,10]),o($Vd,[2,19]),o($Vi,[2,27]),o($Vi,[2,28]),o($Vi,[2,29]),{38:[1,61]},o($Vi,[2,18]),{11:$Vn,15:$Vo,38:[1,62]},o([11,13,15,38],[2,46],{17:15,18:16,19:17,20:18,21:19,22:20,28:22,29:23,39:24,30:28,16:49,46:65,23:$V3,27:$V4,32:$V5,33:$V6,37:$V7,40:$V8,41:$V9,42:$Va,43:$Vb}),o($Vp,$Vk,{45:66,47:$Vl}),{16:67,17:15,18:16,19:17,20:18,21:19,22:20,23:$V3,27:$V4,28:22,29:23,30:28,32:$V5,33:$V6,37:$V7,39:24,40:$V8,41:$V9,42:$Va,43:$Vb},o($Vi,[2,30]),o($Vi,[2,37]),{16:49,17:15,18:16,19:17,20:18,21:19,22:20,23:$V3,27:$V4,28:22,29:23,30:28,32:$V5,33:$V6,37:$V7,39:24,40:$V8,41:$V9,42:$Va,43:$Vb,46:68},{11:$Vj,16:49,17:15,18:16,19:17,20:18,21:19,22:20,23:$V3,27:$V4,28:22,29:23,30:28,32:$V5,33:$V6,37:$V7,39:24,40:$V8,41:$V9,42:$Va,43:$Vb,44:69,46:47},o($Vm,[2,39]),{11:$Vn,13:[1,70],15:$Vo},o($Vm,[2,44]),o($Vm,[2,40]),o($Vp,$Vk,{45:71,47:$Vl}),o($Vm,[2,41]),{11:$Vn,13:[1,72],15:$Vo},o($Vm,[2,42])],
defaultActions: {34:[2,8]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}