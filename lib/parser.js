/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,6,8],$V3=[1,10],$V4=[1,45],$V5=[1,47],$V6=[1,52],$V7=[1,49],$V8=[1,43],$V9=[1,44],$Va=[1,50],$Vb=[1,51],$Vc=[1,38],$Vd=[1,30],$Ve=[1,31],$Vf=[1,48],$Vg=[1,32],$Vh=[1,33],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[9,11,12,15,33,45,54,55,63,71,73,74,79,80,81,82,83,84,85,86,87,88,90,91],$Vm=[12,15],$Vn=[1,63],$Vo=[1,68],$Vp=[1,57],$Vq=[1,55],$Vr=[1,56],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,64],$Vy=[1,65],$Vz=[1,66],$VA=[1,67],$VB=[11,12,15,33,45,54,55,63,71,74,79,80,81,82,83,84,85,86,87,88,90,91],$VC=[1,71],$VD=[1,74],$VE=[1,75],$VF=[1,76],$VG=[1,77],$VH=[1,73],$VI=[11,12,15,33,34,41,42,43,44,45,54,55,57,62,63,71,74,79,80,81,82,83,84,85,86,87,88,90,91],$VJ=[2,23],$VK=[1,82],$VL=[1,85],$VM=[1,87],$VN=[11,12,15,33,34,41,42,43,44,45,54,55,56,57,62,63,71,74,79,80,81,82,83,84,85,86,87,88,90,91],$VO=[2,29],$VP=[11,12,15,33,34,41,42,43,44,45,54,55,56,57,62,63,71,74,76,77,79,80,81,82,83,84,85,86,87,88,89,90,91],$VQ=[1,104],$VR=[11,12,15,33,34,41,42,43,44,45,54,55,62,63,71,74,79,80,81,82,83,84,85,86,87,88,90,91],$VS=[33,54],$VT=[2,72],$VU=[1,136],$VV=[1,134],$VW=[1,135],$VX=[11,12,15,33,45,54,55,63,71,74,79,80,81,86,87,88,90,91],$VY=[2,54],$VZ=[1,147],$V_=[11,12,15,45,54,63],$V$=[11,12,15,33,45,54,55,63,71,74,87],$V01=[11,12,15,33,45,54,55,63,71,74,87,88,90,91],$V11=[11,12,15,33,45,54,55,63,74],$V21=[1,155],$V31=[33,54,56],$V41=[11,12,15,33,45,54,55,63,71,73,74,79,80,81,82,83,84,85,86,87,88,90,91],$V51=[1,164],$V61=[1,163],$V71=[11,12,15];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Sections":4,"Section":5,"RAW":6,"Script":7,"{{":8,"}}":9,"Block":10,"INDENT":11,"OUTDENT":12,"Instructions":13,"Instruction":14,"MINDENT":15,"Expression":16,"BigStatement":17,"Function":18,"Statement":19,"Value":20,"Invocation":21,"Code":22,"Operation":23,"Assign":24,"Casting":25,"Clone":26,"If":27,"Assignable":28,"Literal":29,"Parenthetical":30,"Existence":31,"(":32,")":33,"?":34,"SimpleAssignable":35,"Array":36,"Identifier":37,"Accessor":38,"@":39,"IDENTIFIER":40,".":41,"..":42,"::":43,"[":44,"]":45,"AlphaNumeric":46,"BOOL":47,"NULL":48,"NUMBER":49,"STRING":50,"ArgList":51,"OptComma":52,"Arg":53,",":54,":":55,"=":56,"=>":57,"CASTTYPE":58,"CLONE":59,"Arguments":60,"NEW":61,"CALL_START":62,"CALL_END":63,"FUNC":64,"FuncGlyph":65,"ParametersList":66,"->":67,"Param":68,"ParamVar":69,"USE":70,"&":71,"IfBlock":72,"ELSE":73,"POST_IF":74,"IF":75,"--":76,"++":77,"NOT":78,"-":79,"+":80,"CONCAT":81,"*":82,"**":83,"/":84,"%":85,"BITWISE":86,"LOGIC":87,"COMPARE":88,"ASSIGN":89,"INSTANCEOF":90,"IN":91,"$accept":0,"$end":1},
terminals_: {2:"error",6:"RAW",8:"{{",9:"}}",11:"INDENT",12:"OUTDENT",15:"MINDENT",32:"(",33:")",34:"?",39:"@",40:"IDENTIFIER",41:".",42:"..",43:"::",44:"[",45:"]",47:"BOOL",48:"NULL",49:"NUMBER",50:"STRING",54:",",55:":",56:"=",57:"=>",58:"CASTTYPE",59:"CLONE",61:"NEW",62:"CALL_START",63:"CALL_END",64:"FUNC",67:"->",70:"USE",71:"&",73:"ELSE",74:"POST_IF",75:"IF",76:"--",77:"++",78:"NOT",79:"-",80:"+",81:"CONCAT",82:"*",83:"**",84:"/",85:"%",86:"BITWISE",87:"LOGIC",88:"COMPARE",89:"ASSIGN",90:"INSTANCEOF",91:"IN"},
productions_: [0,[3,1],[4,1],[4,2],[5,1],[5,1],[7,2],[7,3],[10,2],[10,3],[13,1],[13,3],[14,1],[14,1],[17,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[20,1],[20,1],[20,1],[20,1],[30,3],[31,2],[28,1],[28,1],[35,1],[35,2],[35,2],[37,1],[38,2],[38,2],[38,2],[38,3],[29,1],[29,1],[29,1],[46,1],[46,1],[36,2],[36,4],[51,1],[51,3],[51,4],[51,2],[51,4],[51,6],[53,1],[53,3],[52,0],[52,1],[24,3],[24,5],[25,3],[26,2],[21,2],[21,2],[21,3],[60,2],[60,4],[18,2],[18,4],[18,5],[18,7],[22,6],[22,3],[65,1],[66,0],[66,1],[66,3],[68,1],[68,2],[68,3],[69,2],[69,1],[27,1],[27,3],[27,3],[27,3],[72,3],[72,5],[23,2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return new yy.Document($$[$0]);
break;
case 2: case 10: case 46: case 73:
this.$ = [$$[$0]];
break;
case 3:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 4:
this.$ = new yy.RawText($$[$0]);
break;
case 5: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 29: case 30: case 39: case 52: case 54: case 55: case 75: case 80:
this.$ = $$[$0];
break;
case 6:
this.$ = new yy.Script(new yy.Block([]));
break;
case 7:
this.$ = new yy.Script($$[$0-1]);
break;
case 8:
this.$ = new yy.Block([]);
break;
case 9:
this.$ = new yy.Block($$[$0-1]);
break;
case 11: case 47: case 74:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 24: case 25: case 26: case 31:
this.$ = new yy.Value($$[$0]);
break;
case 27:
this.$ = new yy.Parens($$[$0-1]);
break;
case 28:
this.$ = new yy.Existence($$[$0-1]);
break;
case 32:
$$[$0-1].add($$[$0]); this.$ = $$[$0-1];
break;
case 33:
var value = new yy.Value(new yy.Identifier("this")); value.add(new yy.Access($$[$0])); this.$ = value;
break;
case 34:
this.$ = new yy.Identifier($$[$0]);
break;
case 35:
this.$ = new yy.Access($$[$0]);
break;
case 36:
this.$ = new yy.Access($$[$0], "..");
break;
case 37:
this.$ = new yy.Access($$[$0], "::");
break;
case 38:
this.$ = new yy.Access($$[$0-1], "[]");
break;
case 40: case 42: case 43:
this.$ = new yy.Literal($$[$0]);
break;
case 41:
this.$ = new yy.Literal("null");
break;
case 44:
this.$ = new yy.Array();
break;
case 45:
this.$ = new yy.Array($$[$0-2]);
break;
case 48:
this.$ = $$[$0-3].concat($$[$0]);
break;
case 49: case 63: case 72:
this.$ = [];
break;
case 50: case 64:
this.$ = $$[$0-2];
break;
case 51:
this.$ = $$[$0-5].concat($$[$0-2]);
break;
case 53:
this.$ = new yy.ArrayKey($$[$0-2], $$[$0]);
break;
case 56:
this.$ = new yy.Assign("=", $$[$0-2], $$[$0]);
break;
case 57:
this.$ = new yy.Assign("=", $$[$0-4], $$[$0-1]);
break;
case 58:
this.$ = new yy.typeCasting($$[$0-2], $$[$0]);
break;
case 59:
this.$ = new yy.Clone($$[$0]);
break;
case 60:
this.$ = new yy.Call($$[$0-1], $$[$0]);
break;
case 61:
this.$ = new yy.NewExpression($$[$0]);
break;
case 62:
this.$ = new yy.NewExpression($$[$0-1], $$[$0]);
break;
case 65:
this.$ = new yy.Code([], false, true, $$[$0]);
break;
case 66:
this.$ = new yy.Code([], $$[$0], true, $$[$0-2]);
break;
case 67:
this.$ = new yy.Code($$[$0-1], false, true, $$[$0-3]);
break;
case 68:
this.$ = new yy.Code($$[$0-3], $$[$0], true, $$[$0-5]);
break;
case 69:
this.$ = new yy.Code($$[$0-3], $$[$0]);
break;
case 70:
this.$ = new yy.Code([], $$[$0]);
break;
case 71:

break;
case 76:
$$[$0].passing = true; this.$ = $$[$0];
break;
case 77:
$$[$0-2].hasDefault = true; $$[$0-2].default = $$[$0]; this.$ = $$[$0-2];
break;
case 78:
this.$ = new yy.Param(yytext, true);
break;
case 79:
this.$ = new yy.Param(yytext);
break;
case 81:
$$[$0-2].addElse(new yy.Else($$[$0])); this.$ = $$[$0-2]
break;
case 82: case 83:
this.$ = new yy.If($$[$0], new yy.Block([$$[$0-2]]))
break;
case 84:
this.$ = new yy.If($$[$0-1], $$[$0])
break;
case 85:
$$[$0-4].addElse(new yy.ElseIf($$[$0-1], $$[$0])); this.$ = $$[$0-4]
break;
case 86:
this.$ = new yy.Update("--", $$[$0]);
break;
case 87:
this.$ = new yy.Update("++", $$[$0]);
break;
case 88:
this.$ = new yy.Update("--", $$[$0-1], false);
break;
case 89:
this.$ = new yy.Update("++", $$[$0-1], false);
break;
case 90:
this.$ = new yy.Unary("!", $$[$0]);
break;
case 91:
this.$ = new yy.Unary("-", $$[$0]);
break;
case 92:
this.$ = new yy.Unary("+", $$[$0]);
break;
case 93:
this.$ = new yy.Operation("+", $$[$0-2], $$[$0]);
break;
case 94:
this.$ = new yy.Operation("~", $$[$0-2], $$[$0]);
break;
case 95:
this.$ = new yy.Operation("-", $$[$0-2], $$[$0]);
break;
case 96:
this.$ = new yy.Operation("*", $$[$0-2], $$[$0]);
break;
case 97:
this.$ = new yy.Operation("**", $$[$0-2], $$[$0]);
break;
case 98:
this.$ = new yy.Operation("/", $$[$0-2], $$[$0]);
break;
case 99:
this.$ = new yy.Operation("%", $$[$0-2], $$[$0]);
break;
case 100: case 102: case 103:
this.$ = new yy.Operation($$[$0-1], $$[$0-2], $$[$0]);
break;
case 101:
this.$ = new yy.Operation("&", $$[$0-2], $$[$0]);
break;
case 104:
this.$ = new yy.Assign($$[$0-1], $$[$0-2], $$[$0]);
break;
case 105:
this.$ = new yy.Operation("instanceof", $$[$0-2], $$[$0]);
break;
case 106:
this.$ = new yy.Operation("in", $$[$0-2], $$[$0]);
break;
}
},
table: [{3:1,4:2,5:3,6:$V0,7:5,8:$V1},{1:[3]},{1:[2,1],5:7,6:$V0,7:5,8:$V1},o($V2,[2,2]),o($V2,[2,4]),o($V2,[2,5]),{9:[1,8],10:9,11:$V3},o($V2,[2,3]),o($V2,[2,6]),{9:[1,11]},{12:[1,12],13:13,14:14,16:15,17:16,18:25,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$Ve,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($V2,[2,7]),o($Vl,[2,8]),{12:[1,53],15:[1,54]},o($Vm,[2,10]),o($Vm,[2,12],{71:$Vn,74:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,90:$Vz,91:$VA}),o($Vm,[2,13]),o($VB,[2,15],{60:69,38:72,34:$VC,41:$VD,42:$VE,43:$VF,44:$VG,57:[1,70],62:$VH}),o($VB,[2,16]),o($VB,[2,17]),o($VB,[2,18]),o($VB,[2,19]),o($VB,[2,20]),o($VB,[2,21]),o($VB,[2,22]),o($Vm,[2,14]),o($VI,$VJ,{56:[1,78]}),o($VI,[2,24]),o($VI,[2,25]),o($VI,[2,26]),{20:79,28:80,29:27,30:28,31:29,32:$V4,35:81,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb},{32:$VK,40:[1,84],65:83,67:$VL},{16:86,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:88,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($VN,$VO,{76:[1,89],77:[1,90],89:[1,91]}),{16:92,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:93,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:94,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{20:95,28:80,29:27,30:28,31:29,32:$V4,35:81,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb},o($VB,[2,80],{73:[1,96]}),{74:[1,97]},o($VN,[2,30]),o($VI,[2,39]),o($VI,[2,40]),o($VI,[2,41]),{16:98,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($VP,[2,31]),{37:99,40:$V6},{16:100,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$VQ,16:105,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,45:[1,101],46:42,47:$V8,48:$V9,49:$Va,50:$Vb,51:102,53:103,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($VI,[2,42]),o($VI,[2,43]),o($VP,[2,34]),o($Vl,[2,9]),{14:106,16:15,17:16,18:25,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$Ve,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:107,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:108,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:109,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:110,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:111,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:112,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:113,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:114,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:115,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:116,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:117,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:118,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:119,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:120,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($VB,[2,60]),{58:[1,121]},o($VI,[2,28]),o($VP,[2,32]),{11:$VQ,16:105,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,51:123,53:103,59:$Vc,61:$Vd,63:[1,122],64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{37:124,40:$V6},{37:125,40:$V6},{37:126,40:$V6},{16:127,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:[1,129],16:128,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($VB,[2,61],{38:72,60:130,34:$VC,41:$VD,42:$VE,43:$VF,44:$VG,62:$VH}),o($VR,$VJ),o($VR,$VO),o($VS,$VT,{66:131,68:132,69:133,40:$VU,70:$VV,71:$VW}),{10:137,11:$V3},o($Vm,[2,65],{65:138,32:[1,139],67:$VL}),{11:[2,71]},o($VB,[2,86]),{32:$VK,65:83,67:$VL},o($VB,[2,87]),o($VB,[2,88]),o($VB,[2,89]),{16:140,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($VB,[2,90]),o($VX,[2,91],{82:$Vs,83:$Vt,84:$Vu,85:$Vv}),o($VX,[2,92],{82:$Vs,83:$Vt,84:$Vu,85:$Vv}),o($VB,[2,59],{38:72,34:$VC,41:$VD,42:$VE,43:$VF,44:$VG}),{10:141,11:$V3,75:[1,142]},{16:143,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{33:[1,144],71:$Vn,74:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,90:$Vz,91:$VA},o($VP,[2,33]),{10:145,11:$V3,71:$Vn,74:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,90:$Vz,91:$VA},o($VN,[2,44]),o([11,15,45],$VY,{52:146,54:$VZ}),o($V_,[2,46]),{11:$VQ,12:[1,148],16:105,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,51:149,53:103,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($V_,[2,52],{55:[1,150],71:$Vn,74:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,90:$Vz,91:$VA}),o($Vm,[2,11]),o($VX,[2,93],{82:$Vs,83:$Vt,84:$Vu,85:$Vv}),o($VX,[2,94],{82:$Vs,83:$Vt,84:$Vu,85:$Vv}),o($VX,[2,95],{82:$Vs,83:$Vt,84:$Vu,85:$Vv}),o($VB,[2,96]),o($VB,[2,97]),o($VB,[2,98]),o($VB,[2,99]),o([11,12,15,33,45,54,55,63,71,74,86,87,88,90,91],[2,100],{79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv}),o($V$,[2,101],{79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,88:$Vy,90:$Vz,91:$VA}),o($V$,[2,102],{79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,88:$Vy,90:$Vz,91:$VA}),o([11,12,15,33,45,54,55,63,71,74,87,88],[2,103],{79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,90:$Vz,91:$VA}),o($V01,[2,105],{79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw}),o($V01,[2,106],{79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw}),o($V11,[2,83],{71:$Vn,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,90:$Vz,91:$VA}),o($VB,[2,58]),o($VB,[2,63]),o([11,15,63],$VY,{52:151,54:$VZ}),o($VP,[2,35]),o($VP,[2,36]),o($VP,[2,37]),{45:[1,152],71:$Vn,74:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,90:$Vz,91:$VA},o($V11,[2,56],{71:$Vn,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,90:$Vz,91:$VA}),{16:153,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($VB,[2,62]),{33:[1,154],54:$V21},o($VS,[2,73]),o($VS,[2,75],{56:[1,156]}),{40:$VU,69:157,71:$VW},{40:[1,158]},o($V31,[2,79]),o($VB,[2,70]),{10:159,11:$V3},o($VS,$VT,{68:132,69:133,66:160,40:$VU,70:$VV,71:$VW}),o($V11,[2,104],{71:$Vn,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,90:$Vz,91:$VA}),o($VB,[2,81]),{16:161,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($V11,[2,82],{71:$Vn,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,90:$Vz,91:$VA}),o($VI,[2,27]),o($V41,[2,84]),{11:$V51,15:$V61,45:[1,162]},o([11,12,15,45,63],[2,55],{20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,35:34,72:39,19:40,36:41,46:42,37:46,16:105,53:165,32:$V4,39:$V5,40:$V6,44:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk}),o($V_,[2,49]),o($V71,$VY,{52:166,54:$VZ}),{16:167,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$V51,15:$V61,63:[1,168]},o($VP,[2,38]),{12:[1,169],71:$Vn,74:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,90:$Vz,91:$VA},{65:170,67:$VL},{40:$VU,68:171,69:133,70:$VV,71:$VW},{16:172,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($VS,[2,76]),o($V31,[2,78]),o($Vm,[2,66]),{33:[1,173],54:$V21},{10:174,11:$V3,71:$Vn,74:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,90:$Vz,91:$VA},o($VN,[2,45]),{16:105,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,53:175,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$VQ,16:105,19:40,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,30:28,31:29,32:$V4,35:34,36:41,37:46,39:$V5,40:$V6,44:$V7,46:42,47:$V8,48:$V9,49:$Va,50:$Vb,51:176,53:103,59:$Vc,61:$Vd,64:$VM,72:39,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($V_,[2,47]),{11:$V51,12:[1,177],15:$V61},o($V_,[2,53],{71:$Vn,74:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,90:$Vz,91:$VA}),o($VB,[2,64]),o($VB,[2,57]),{10:178,11:$V3},o($VS,[2,74]),o($VS,[2,77],{71:$Vn,74:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,90:$Vz,91:$VA}),o($Vm,[2,67],{65:179,67:$VL}),o($V41,[2,85]),o($V_,[2,48]),o($V71,$VY,{52:180,54:$VZ}),o($V_,[2,50]),o($VB,[2,69]),{10:181,11:$V3},{11:$V51,12:[1,182],15:$V61},o($Vm,[2,68]),o($V_,[2,51])],
defaultActions: {85:[2,71]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}